// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoom.proto

#include "ChatRoom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ChatRoomWatchMember::ChatRoomWatchMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChatRoomWatchMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRoomWatchMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRoomWatchMemberDefaultTypeInternal() {}
  union {
    ChatRoomWatchMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRoomWatchMemberDefaultTypeInternal _ChatRoomWatchMember_default_instance_;
PROTOBUF_CONSTEXPR ChatRoomMemberInfo::ChatRoomMemberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bigheadimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.smallheadimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inviterusername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textstatus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.associateopenimappid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.associateopenimdescid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textstatusid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textstatusextinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chatroommemberflag_)*/0u
  , /*decltype(_impl_.status_)*/0u} {}
struct ChatRoomMemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRoomMemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRoomMemberInfoDefaultTypeInternal() {}
  union {
    ChatRoomMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
PROTOBUF_CONSTEXPR ChatRoomMemberData::ChatRoomMemberData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chatroommember_)*/{}
  , /*decltype(_impl_.watchmembers_)*/{}
  , /*decltype(_impl_.chatroomusername_)*/nullptr
  , /*decltype(_impl_.membercount_)*/0u
  , /*decltype(_impl_.infomask_)*/0u
  , /*decltype(_impl_.watchmembercount_)*/0u} {}
struct ChatRoomMemberDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRoomMemberDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRoomMemberDataDefaultTypeInternal() {}
  union {
    ChatRoomMemberData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
PROTOBUF_CONSTEXPR GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chatroomusername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baseresponse_)*/nullptr
  , /*decltype(_impl_.newchatroomdata_)*/nullptr
  , /*decltype(_impl_.serverversion_)*/0u} {}
struct GetChatroomMemberDetailResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatroomMemberDetailResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatroomMemberDetailResponseDefaultTypeInternal() {}
  union {
    GetChatroomMemberDetailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatroomMemberDetailResponseDefaultTypeInternal _GetChatroomMemberDetailResponse_default_instance_;

// ===================================================================

class ChatRoomWatchMember::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRoomWatchMember>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatRoomWatchMember::ChatRoomWatchMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatRoomWatchMember)
}
ChatRoomWatchMember::ChatRoomWatchMember(const ChatRoomWatchMember& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChatRoomWatchMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.username_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatRoomWatchMember)
}

inline void ChatRoomWatchMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.username_){}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatRoomWatchMember::~ChatRoomWatchMember() {
  // @@protoc_insertion_point(destructor:ChatRoomWatchMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRoomWatchMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void ChatRoomWatchMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatRoomWatchMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomWatchMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.username_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatRoomWatchMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRoomWatchMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomWatchMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomWatchMember)
  return target;
}

size_t ChatRoomWatchMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomWatchMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string userName = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRoomWatchMember::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChatRoomWatchMember*>(
      &from));
}

void ChatRoomWatchMember::MergeFrom(const ChatRoomWatchMember& from) {
  ChatRoomWatchMember* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomWatchMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_username()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChatRoomWatchMember::CopyFrom(const ChatRoomWatchMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomWatchMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomWatchMember::IsInitialized() const {
  return true;
}

void ChatRoomWatchMember::InternalSwap(ChatRoomWatchMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

std::string ChatRoomWatchMember::GetTypeName() const {
  return "ChatRoomWatchMember";
}


// ===================================================================

class ChatRoomMemberInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRoomMemberInfo>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bigheadimgurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_smallheadimgurl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chatroommemberflag(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_inviterusername(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_textstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_associateopenimappid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_associateopenimdescid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_textstatusid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_textstatusextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000800) ^ 0x00000800) != 0;
  }
};

ChatRoomMemberInfo::ChatRoomMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatRoomMemberInfo)
}
ChatRoomMemberInfo::ChatRoomMemberInfo(const ChatRoomMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChatRoomMemberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.username_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.bigheadimgurl_){}
    , decltype(_impl_.smallheadimgurl_){}
    , decltype(_impl_.inviterusername_){}
    , decltype(_impl_.textstatus_){}
    , decltype(_impl_.associateopenimappid_){}
    , decltype(_impl_.associateopenimdescid_){}
    , decltype(_impl_.textstatusid_){}
    , decltype(_impl_.textstatusextinfo_){}
    , decltype(_impl_.chatroommemberflag_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bigheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bigheadimgurl()) {
    _this->_impl_.bigheadimgurl_.Set(from._internal_bigheadimgurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.smallheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smallheadimgurl()) {
    _this->_impl_.smallheadimgurl_.Set(from._internal_smallheadimgurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inviterusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inviterusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_inviterusername()) {
    _this->_impl_.inviterusername_.Set(from._internal_inviterusername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.textstatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textstatus()) {
    _this->_impl_.textstatus_.Set(from._internal_textstatus(), 
      _this->GetArenaForAllocation());
  }
  _impl_.associateopenimappid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.associateopenimappid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_associateopenimappid()) {
    _this->_impl_.associateopenimappid_.Set(from._internal_associateopenimappid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.associateopenimdescid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.associateopenimdescid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_associateopenimdescid()) {
    _this->_impl_.associateopenimdescid_.Set(from._internal_associateopenimdescid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.textstatusid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textstatusid()) {
    _this->_impl_.textstatusid_.Set(from._internal_textstatusid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.textstatusextinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusextinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textstatusextinfo()) {
    _this->_impl_.textstatusextinfo_.Set(from._internal_textstatusextinfo(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chatroommemberflag_, &from._impl_.chatroommemberflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.chatroommemberflag_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:ChatRoomMemberInfo)
}

inline void ChatRoomMemberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.username_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.bigheadimgurl_){}
    , decltype(_impl_.smallheadimgurl_){}
    , decltype(_impl_.inviterusername_){}
    , decltype(_impl_.textstatus_){}
    , decltype(_impl_.associateopenimappid_){}
    , decltype(_impl_.associateopenimdescid_){}
    , decltype(_impl_.textstatusid_){}
    , decltype(_impl_.textstatusextinfo_){}
    , decltype(_impl_.chatroommemberflag_){0u}
    , decltype(_impl_.status_){0u}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bigheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smallheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inviterusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inviterusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textstatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.associateopenimappid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.associateopenimappid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.associateopenimdescid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.associateopenimdescid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textstatusid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textstatusextinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusextinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatRoomMemberInfo::~ChatRoomMemberInfo() {
  // @@protoc_insertion_point(destructor:ChatRoomMemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRoomMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.displayname_.Destroy();
  _impl_.bigheadimgurl_.Destroy();
  _impl_.smallheadimgurl_.Destroy();
  _impl_.inviterusername_.Destroy();
  _impl_.textstatus_.Destroy();
  _impl_.associateopenimappid_.Destroy();
  _impl_.associateopenimdescid_.Destroy();
  _impl_.textstatusid_.Destroy();
  _impl_.textstatusextinfo_.Destroy();
}

void ChatRoomMemberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatRoomMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomMemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.bigheadimgurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.smallheadimgurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.inviterusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.textstatus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.associateopenimappid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.associateopenimdescid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.textstatusid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.textstatusextinfo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    ::memset(&_impl_.chatroommemberflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.chatroommemberflag_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatRoomMemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nickName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string displayName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bigHeadImgUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bigheadimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string smallHeadImgUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_smallheadimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 chatroomMemberFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_chatroommemberflag(&has_bits);
          _impl_.chatroommemberflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string inviterUserName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_inviterusername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string textStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_textstatus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string associateOpenImappId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_associateopenimappid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string associateOpenImdescId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_associateopenimdescid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string textStatusId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_textstatusid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string textStatusExtInfo = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_textstatusextinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRoomMemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomMemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string nickName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional string displayName = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_displayname(), target);
  }

  // optional string bigHeadImgUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bigheadimgurl(), target);
  }

  // optional string smallHeadImgUrl = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_smallheadimgurl(), target);
  }

  // required uint32 chatroomMemberFlag = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_chatroommemberflag(), target);
  }

  // optional string inviterUserName = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_inviterusername(), target);
  }

  // optional uint32 status = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_status(), target);
  }

  // optional string textStatus = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_textstatus(), target);
  }

  // optional string associateOpenImappId = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_associateopenimappid(), target);
  }

  // optional string associateOpenImdescId = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_associateopenimdescid(), target);
  }

  // optional string textStatusId = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_textstatusid(), target);
  }

  // optional string textStatusExtInfo = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_textstatusextinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomMemberInfo)
  return target;
}

size_t ChatRoomMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomMemberInfo)
  size_t total_size = 0;

  // required uint32 chatroomMemberFlag = 6;
  if (_internal_has_chatroommemberflag()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatroommemberflag());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string userName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string nickName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string displayName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string bigHeadImgUrl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bigheadimgurl());
    }

    // optional string smallHeadImgUrl = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smallheadimgurl());
    }

    // optional string inviterUserName = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviterusername());
    }

    // optional string textStatus = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textstatus());
    }

    // optional string associateOpenImappId = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_associateopenimappid());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional string associateOpenImdescId = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_associateopenimdescid());
    }

    // optional string textStatusId = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textstatusid());
    }

    // optional string textStatusExtInfo = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textstatusextinfo());
    }

  }
  // optional uint32 status = 8;
  if (cached_has_bits & 0x00001000u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRoomMemberInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChatRoomMemberInfo*>(
      &from));
}

void ChatRoomMemberInfo::MergeFrom(const ChatRoomMemberInfo& from) {
  ChatRoomMemberInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomMemberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_bigheadimgurl(from._internal_bigheadimgurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_smallheadimgurl(from._internal_smallheadimgurl());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_inviterusername(from._internal_inviterusername());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_textstatus(from._internal_textstatus());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_associateopenimappid(from._internal_associateopenimappid());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_associateopenimdescid(from._internal_associateopenimdescid());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_textstatusid(from._internal_textstatusid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_textstatusextinfo(from._internal_textstatusextinfo());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.chatroommemberflag_ = from._impl_.chatroommemberflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChatRoomMemberInfo::CopyFrom(const ChatRoomMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChatRoomMemberInfo::InternalSwap(ChatRoomMemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bigheadimgurl_, lhs_arena,
      &other->_impl_.bigheadimgurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.smallheadimgurl_, lhs_arena,
      &other->_impl_.smallheadimgurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inviterusername_, lhs_arena,
      &other->_impl_.inviterusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textstatus_, lhs_arena,
      &other->_impl_.textstatus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.associateopenimappid_, lhs_arena,
      &other->_impl_.associateopenimappid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.associateopenimdescid_, lhs_arena,
      &other->_impl_.associateopenimdescid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textstatusid_, lhs_arena,
      &other->_impl_.textstatusid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textstatusextinfo_, lhs_arena,
      &other->_impl_.textstatusextinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatRoomMemberInfo, _impl_.status_)
      + sizeof(ChatRoomMemberInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ChatRoomMemberInfo, _impl_.chatroommemberflag_)>(
          reinterpret_cast<char*>(&_impl_.chatroommemberflag_),
          reinterpret_cast<char*>(&other->_impl_.chatroommemberflag_));
}

std::string ChatRoomMemberInfo::GetTypeName() const {
  return "ChatRoomMemberInfo";
}


// ===================================================================

class ChatRoomMemberData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRoomMemberData>()._impl_._has_bits_);
  static void set_has_membercount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_infomask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SKBuiltinString_t& chatroomusername(const ChatRoomMemberData* msg);
  static void set_has_chatroomusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_watchmembercount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::SKBuiltinString_t&
ChatRoomMemberData::_Internal::chatroomusername(const ChatRoomMemberData* msg) {
  return *msg->_impl_.chatroomusername_;
}
void ChatRoomMemberData::clear_chatroomusername() {
  if (_impl_.chatroomusername_ != nullptr) _impl_.chatroomusername_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChatRoomMemberData::ChatRoomMemberData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatRoomMemberData)
}
ChatRoomMemberData::ChatRoomMemberData(const ChatRoomMemberData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChatRoomMemberData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatroommember_){from._impl_.chatroommember_}
    , decltype(_impl_.watchmembers_){from._impl_.watchmembers_}
    , decltype(_impl_.chatroomusername_){nullptr}
    , decltype(_impl_.membercount_){}
    , decltype(_impl_.infomask_){}
    , decltype(_impl_.watchmembercount_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_chatroomusername()) {
    _this->_impl_.chatroomusername_ = new ::SKBuiltinString_t(*from._impl_.chatroomusername_);
  }
  ::memcpy(&_impl_.membercount_, &from._impl_.membercount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.watchmembercount_) -
    reinterpret_cast<char*>(&_impl_.membercount_)) + sizeof(_impl_.watchmembercount_));
  // @@protoc_insertion_point(copy_constructor:ChatRoomMemberData)
}

inline void ChatRoomMemberData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatroommember_){arena}
    , decltype(_impl_.watchmembers_){arena}
    , decltype(_impl_.chatroomusername_){nullptr}
    , decltype(_impl_.membercount_){0u}
    , decltype(_impl_.infomask_){0u}
    , decltype(_impl_.watchmembercount_){0u}
  };
}

ChatRoomMemberData::~ChatRoomMemberData() {
  // @@protoc_insertion_point(destructor:ChatRoomMemberData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRoomMemberData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatroommember_.~RepeatedPtrField();
  _impl_.watchmembers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.chatroomusername_;
}

void ChatRoomMemberData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatRoomMemberData::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomMemberData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chatroommember_.Clear();
  _impl_.watchmembers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.chatroomusername_ != nullptr);
    _impl_.chatroomusername_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.membercount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.watchmembercount_) -
        reinterpret_cast<char*>(&_impl_.membercount_)) + sizeof(_impl_.watchmembercount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatRoomMemberData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 memberCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_membercount(&has_bits);
          _impl_.membercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ChatRoomMemberInfo chatRoomMember = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chatroommember(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 infoMask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_infomask(&has_bits);
          _impl_.infomask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinString_t chatRoomUserName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatroomusername(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watchMemberCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_watchmembercount(&has_bits);
          _impl_.watchmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ChatRoomWatchMember watchMembers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_watchmembers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRoomMemberData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomMemberData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 memberCount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_membercount(), target);
  }

  // repeated .ChatRoomMemberInfo chatRoomMember = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chatroommember_size()); i < n; i++) {
    const auto& repfield = this->_internal_chatroommember(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 infoMask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_infomask(), target);
  }

  // optional .SKBuiltinString_t chatRoomUserName = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::chatroomusername(this),
        _Internal::chatroomusername(this).GetCachedSize(), target, stream);
  }

  // optional uint32 watchMemberCount = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_watchmembercount(), target);
  }

  // repeated .ChatRoomWatchMember watchMembers = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_watchmembers_size()); i < n; i++) {
    const auto& repfield = this->_internal_watchmembers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomMemberData)
  return target;
}

size_t ChatRoomMemberData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomMemberData)
  size_t total_size = 0;

  // required uint32 memberCount = 1;
  if (_internal_has_membercount()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_membercount());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatRoomMemberInfo chatRoomMember = 2;
  total_size += 1UL * this->_internal_chatroommember_size();
  for (const auto& msg : this->_impl_.chatroommember_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ChatRoomWatchMember watchMembers = 6;
  total_size += 1UL * this->_internal_watchmembers_size();
  for (const auto& msg : this->_impl_.watchmembers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .SKBuiltinString_t chatRoomUserName = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chatroomusername_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 infoMask = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_infomask());
    }

    // optional uint32 watchMemberCount = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_watchmembercount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRoomMemberData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChatRoomMemberData*>(
      &from));
}

void ChatRoomMemberData::MergeFrom(const ChatRoomMemberData& from) {
  ChatRoomMemberData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomMemberData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chatroommember_.MergeFrom(from._impl_.chatroommember_);
  _this->_impl_.watchmembers_.MergeFrom(from._impl_.watchmembers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chatroomusername()->::SKBuiltinString_t::MergeFrom(
          from._internal_chatroomusername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.membercount_ = from._impl_.membercount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.infomask_ = from._impl_.infomask_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.watchmembercount_ = from._impl_.watchmembercount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChatRoomMemberData::CopyFrom(const ChatRoomMemberData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomMemberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chatroommember_))
    return false;
  return true;
}

void ChatRoomMemberData::InternalSwap(ChatRoomMemberData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chatroommember_.InternalSwap(&other->_impl_.chatroommember_);
  _impl_.watchmembers_.InternalSwap(&other->_impl_.watchmembers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatRoomMemberData, _impl_.watchmembercount_)
      + sizeof(ChatRoomMemberData::_impl_.watchmembercount_)
      - PROTOBUF_FIELD_OFFSET(ChatRoomMemberData, _impl_.chatroomusername_)>(
          reinterpret_cast<char*>(&_impl_.chatroomusername_),
          reinterpret_cast<char*>(&other->_impl_.chatroomusername_));
}

std::string ChatRoomMemberData::GetTypeName() const {
  return "ChatRoomMemberData";
}


// ===================================================================

class GetChatroomMemberDetailResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetChatroomMemberDetailResponse>()._impl_._has_bits_);
  static const ::BaseResponse& baseresponse(const GetChatroomMemberDetailResponse* msg);
  static void set_has_baseresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chatroomusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serverversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ChatRoomMemberData& newchatroomdata(const GetChatroomMemberDetailResponse* msg);
  static void set_has_newchatroomdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::BaseResponse&
GetChatroomMemberDetailResponse::_Internal::baseresponse(const GetChatroomMemberDetailResponse* msg) {
  return *msg->_impl_.baseresponse_;
}
const ::ChatRoomMemberData&
GetChatroomMemberDetailResponse::_Internal::newchatroomdata(const GetChatroomMemberDetailResponse* msg) {
  return *msg->_impl_.newchatroomdata_;
}
void GetChatroomMemberDetailResponse::clear_baseresponse() {
  if (_impl_.baseresponse_ != nullptr) _impl_.baseresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetChatroomMemberDetailResponse)
}
GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(const GetChatroomMemberDetailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetChatroomMemberDetailResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatroomusername_){}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.newchatroomdata_){nullptr}
    , decltype(_impl_.serverversion_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.chatroomusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatroomusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chatroomusername()) {
    _this->_impl_.chatroomusername_.Set(from._internal_chatroomusername(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_baseresponse()) {
    _this->_impl_.baseresponse_ = new ::BaseResponse(*from._impl_.baseresponse_);
  }
  if (from._internal_has_newchatroomdata()) {
    _this->_impl_.newchatroomdata_ = new ::ChatRoomMemberData(*from._impl_.newchatroomdata_);
  }
  _this->_impl_.serverversion_ = from._impl_.serverversion_;
  // @@protoc_insertion_point(copy_constructor:GetChatroomMemberDetailResponse)
}

inline void GetChatroomMemberDetailResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatroomusername_){}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.newchatroomdata_){nullptr}
    , decltype(_impl_.serverversion_){0u}
  };
  _impl_.chatroomusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatroomusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChatroomMemberDetailResponse::~GetChatroomMemberDetailResponse() {
  // @@protoc_insertion_point(destructor:GetChatroomMemberDetailResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatroomMemberDetailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatroomusername_.Destroy();
  if (this != internal_default_instance()) delete _impl_.baseresponse_;
  if (this != internal_default_instance()) delete _impl_.newchatroomdata_;
}

void GetChatroomMemberDetailResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChatroomMemberDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetChatroomMemberDetailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chatroomusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.baseresponse_ != nullptr);
      _impl_.baseresponse_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.newchatroomdata_ != nullptr);
      _impl_.newchatroomdata_->Clear();
    }
  }
  _impl_.serverversion_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetChatroomMemberDetailResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .BaseResponse baseResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chatroomUserName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chatroomusername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 serverVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_serverversion(&has_bits);
          _impl_.serverversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ChatRoomMemberData newChatroomData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_newchatroomdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatroomMemberDetailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetChatroomMemberDetailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .BaseResponse baseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseresponse(this),
        _Internal::baseresponse(this).GetCachedSize(), target, stream);
  }

  // optional string chatroomUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chatroomusername(), target);
  }

  // required uint32 serverVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serverversion(), target);
  }

  // required .ChatRoomMemberData newChatroomData = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::newchatroomdata(this),
        _Internal::newchatroomdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetChatroomMemberDetailResponse)
  return target;
}

size_t GetChatroomMemberDetailResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetChatroomMemberDetailResponse)
  size_t total_size = 0;

  if (_internal_has_baseresponse()) {
    // required .BaseResponse baseResponse = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseresponse_);
  }

  if (_internal_has_newchatroomdata()) {
    // required .ChatRoomMemberData newChatroomData = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newchatroomdata_);
  }

  if (_internal_has_serverversion()) {
    // required uint32 serverVersion = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverversion());
  }

  return total_size;
}
size_t GetChatroomMemberDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetChatroomMemberDetailResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .BaseResponse baseResponse = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseresponse_);

    // required .ChatRoomMemberData newChatroomData = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newchatroomdata_);

    // required uint32 serverVersion = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string chatroomUserName = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatroomusername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatroomMemberDetailResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetChatroomMemberDetailResponse*>(
      &from));
}

void GetChatroomMemberDetailResponse::MergeFrom(const GetChatroomMemberDetailResponse& from) {
  GetChatroomMemberDetailResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GetChatroomMemberDetailResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chatroomusername(from._internal_chatroomusername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_baseresponse()->::BaseResponse::MergeFrom(
          from._internal_baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_newchatroomdata()->::ChatRoomMemberData::MergeFrom(
          from._internal_newchatroomdata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.serverversion_ = from._impl_.serverversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetChatroomMemberDetailResponse::CopyFrom(const GetChatroomMemberDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetChatroomMemberDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatroomMemberDetailResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_baseresponse()) {
    if (!_impl_.baseresponse_->IsInitialized()) return false;
  }
  if (_internal_has_newchatroomdata()) {
    if (!_impl_.newchatroomdata_->IsInitialized()) return false;
  }
  return true;
}

void GetChatroomMemberDetailResponse::InternalSwap(GetChatroomMemberDetailResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chatroomusername_, lhs_arena,
      &other->_impl_.chatroomusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChatroomMemberDetailResponse, _impl_.serverversion_)
      + sizeof(GetChatroomMemberDetailResponse::_impl_.serverversion_)
      - PROTOBUF_FIELD_OFFSET(GetChatroomMemberDetailResponse, _impl_.baseresponse_)>(
          reinterpret_cast<char*>(&_impl_.baseresponse_),
          reinterpret_cast<char*>(&other->_impl_.baseresponse_));
}

std::string GetChatroomMemberDetailResponse::GetTypeName() const {
  return "GetChatroomMemberDetailResponse";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatRoomWatchMember*
Arena::CreateMaybeMessage< ::ChatRoomWatchMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRoomWatchMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRoomMemberInfo*
Arena::CreateMaybeMessage< ::ChatRoomMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRoomMemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRoomMemberData*
Arena::CreateMaybeMessage< ::ChatRoomMemberData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRoomMemberData >(arena);
}
template<> PROTOBUF_NOINLINE ::GetChatroomMemberDetailResponse*
Arena::CreateMaybeMessage< ::GetChatroomMemberDetailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetChatroomMemberDetailResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
