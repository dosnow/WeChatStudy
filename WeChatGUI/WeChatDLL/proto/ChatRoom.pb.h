// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatRoom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatRoom_2eproto {
  static const uint32_t offsets[];
};
class ChatRoomMemberData;
struct ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
struct ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class ChatRoomWatchMember;
struct ChatRoomWatchMemberDefaultTypeInternal;
extern ChatRoomWatchMemberDefaultTypeInternal _ChatRoomWatchMember_default_instance_;
class GetChatroomMemberDetailResponse;
struct GetChatroomMemberDetailResponseDefaultTypeInternal;
extern GetChatroomMemberDetailResponseDefaultTypeInternal _GetChatroomMemberDetailResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatRoomMemberData* Arena::CreateMaybeMessage<::ChatRoomMemberData>(Arena*);
template<> ::ChatRoomMemberInfo* Arena::CreateMaybeMessage<::ChatRoomMemberInfo>(Arena*);
template<> ::ChatRoomWatchMember* Arena::CreateMaybeMessage<::ChatRoomWatchMember>(Arena*);
template<> ::GetChatroomMemberDetailResponse* Arena::CreateMaybeMessage<::GetChatroomMemberDetailResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChatRoomWatchMember final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ChatRoomWatchMember) */ {
 public:
  inline ChatRoomWatchMember() : ChatRoomWatchMember(nullptr) {}
  ~ChatRoomWatchMember() override;
  explicit PROTOBUF_CONSTEXPR ChatRoomWatchMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRoomWatchMember(const ChatRoomWatchMember& from);
  ChatRoomWatchMember(ChatRoomWatchMember&& from) noexcept
    : ChatRoomWatchMember() {
    *this = ::std::move(from);
  }

  inline ChatRoomWatchMember& operator=(const ChatRoomWatchMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRoomWatchMember& operator=(ChatRoomWatchMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChatRoomWatchMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRoomWatchMember* internal_default_instance() {
    return reinterpret_cast<const ChatRoomWatchMember*>(
               &_ChatRoomWatchMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatRoomWatchMember& a, ChatRoomWatchMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRoomWatchMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRoomWatchMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRoomWatchMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatRoomWatchMember>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChatRoomWatchMember& from);
  void MergeFrom(const ChatRoomWatchMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatRoomWatchMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoomWatchMember";
  }
  protected:
  explicit ChatRoomWatchMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // optional string userName = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:ChatRoomWatchMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatRoom_2eproto;
};
// -------------------------------------------------------------------

class ChatRoomMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ChatRoomMemberInfo) */ {
 public:
  inline ChatRoomMemberInfo() : ChatRoomMemberInfo(nullptr) {}
  ~ChatRoomMemberInfo() override;
  explicit PROTOBUF_CONSTEXPR ChatRoomMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRoomMemberInfo(const ChatRoomMemberInfo& from);
  ChatRoomMemberInfo(ChatRoomMemberInfo&& from) noexcept
    : ChatRoomMemberInfo() {
    *this = ::std::move(from);
  }

  inline ChatRoomMemberInfo& operator=(const ChatRoomMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRoomMemberInfo& operator=(ChatRoomMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChatRoomMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRoomMemberInfo* internal_default_instance() {
    return reinterpret_cast<const ChatRoomMemberInfo*>(
               &_ChatRoomMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatRoomMemberInfo& a, ChatRoomMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRoomMemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRoomMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRoomMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatRoomMemberInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChatRoomMemberInfo& from);
  void MergeFrom(const ChatRoomMemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatRoomMemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoomMemberInfo";
  }
  protected:
  explicit ChatRoomMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kNickNameFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kBigHeadImgUrlFieldNumber = 4,
    kSmallHeadImgUrlFieldNumber = 5,
    kInviterUserNameFieldNumber = 7,
    kTextStatusFieldNumber = 9,
    kAssociateOpenImappIdFieldNumber = 10,
    kAssociateOpenImdescIdFieldNumber = 11,
    kTextStatusIdFieldNumber = 17,
    kTextStatusExtInfoFieldNumber = 19,
    kChatroomMemberFlagFieldNumber = 6,
    kStatusFieldNumber = 8,
  };
  // optional string userName = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string nickName = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional string displayName = 3;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayname();
  PROTOBUF_NODISCARD std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // optional string bigHeadImgUrl = 4;
  bool has_bigheadimgurl() const;
  private:
  bool _internal_has_bigheadimgurl() const;
  public:
  void clear_bigheadimgurl();
  const std::string& bigheadimgurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bigheadimgurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bigheadimgurl();
  PROTOBUF_NODISCARD std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(std::string* bigheadimgurl);
  private:
  const std::string& _internal_bigheadimgurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bigheadimgurl(const std::string& value);
  std::string* _internal_mutable_bigheadimgurl();
  public:

  // optional string smallHeadImgUrl = 5;
  bool has_smallheadimgurl() const;
  private:
  bool _internal_has_smallheadimgurl() const;
  public:
  void clear_smallheadimgurl();
  const std::string& smallheadimgurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smallheadimgurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smallheadimgurl();
  PROTOBUF_NODISCARD std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(std::string* smallheadimgurl);
  private:
  const std::string& _internal_smallheadimgurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smallheadimgurl(const std::string& value);
  std::string* _internal_mutable_smallheadimgurl();
  public:

  // optional string inviterUserName = 7;
  bool has_inviterusername() const;
  private:
  bool _internal_has_inviterusername() const;
  public:
  void clear_inviterusername();
  const std::string& inviterusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inviterusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inviterusername();
  PROTOBUF_NODISCARD std::string* release_inviterusername();
  void set_allocated_inviterusername(std::string* inviterusername);
  private:
  const std::string& _internal_inviterusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inviterusername(const std::string& value);
  std::string* _internal_mutable_inviterusername();
  public:

  // optional string textStatus = 9;
  bool has_textstatus() const;
  private:
  bool _internal_has_textstatus() const;
  public:
  void clear_textstatus();
  const std::string& textstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textstatus();
  PROTOBUF_NODISCARD std::string* release_textstatus();
  void set_allocated_textstatus(std::string* textstatus);
  private:
  const std::string& _internal_textstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textstatus(const std::string& value);
  std::string* _internal_mutable_textstatus();
  public:

  // optional string associateOpenImappId = 10;
  bool has_associateopenimappid() const;
  private:
  bool _internal_has_associateopenimappid() const;
  public:
  void clear_associateopenimappid();
  const std::string& associateopenimappid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associateopenimappid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associateopenimappid();
  PROTOBUF_NODISCARD std::string* release_associateopenimappid();
  void set_allocated_associateopenimappid(std::string* associateopenimappid);
  private:
  const std::string& _internal_associateopenimappid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associateopenimappid(const std::string& value);
  std::string* _internal_mutable_associateopenimappid();
  public:

  // optional string associateOpenImdescId = 11;
  bool has_associateopenimdescid() const;
  private:
  bool _internal_has_associateopenimdescid() const;
  public:
  void clear_associateopenimdescid();
  const std::string& associateopenimdescid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associateopenimdescid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associateopenimdescid();
  PROTOBUF_NODISCARD std::string* release_associateopenimdescid();
  void set_allocated_associateopenimdescid(std::string* associateopenimdescid);
  private:
  const std::string& _internal_associateopenimdescid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associateopenimdescid(const std::string& value);
  std::string* _internal_mutable_associateopenimdescid();
  public:

  // optional string textStatusId = 17;
  bool has_textstatusid() const;
  private:
  bool _internal_has_textstatusid() const;
  public:
  void clear_textstatusid();
  const std::string& textstatusid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textstatusid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textstatusid();
  PROTOBUF_NODISCARD std::string* release_textstatusid();
  void set_allocated_textstatusid(std::string* textstatusid);
  private:
  const std::string& _internal_textstatusid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textstatusid(const std::string& value);
  std::string* _internal_mutable_textstatusid();
  public:

  // optional string textStatusExtInfo = 19;
  bool has_textstatusextinfo() const;
  private:
  bool _internal_has_textstatusextinfo() const;
  public:
  void clear_textstatusextinfo();
  const std::string& textstatusextinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textstatusextinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textstatusextinfo();
  PROTOBUF_NODISCARD std::string* release_textstatusextinfo();
  void set_allocated_textstatusextinfo(std::string* textstatusextinfo);
  private:
  const std::string& _internal_textstatusextinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textstatusextinfo(const std::string& value);
  std::string* _internal_mutable_textstatusextinfo();
  public:

  // required uint32 chatroomMemberFlag = 6;
  bool has_chatroommemberflag() const;
  private:
  bool _internal_has_chatroommemberflag() const;
  public:
  void clear_chatroommemberflag();
  uint32_t chatroommemberflag() const;
  void set_chatroommemberflag(uint32_t value);
  private:
  uint32_t _internal_chatroommemberflag() const;
  void _internal_set_chatroommemberflag(uint32_t value);
  public:

  // optional uint32 status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoomMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bigheadimgurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smallheadimgurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviterusername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textstatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associateopenimappid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associateopenimdescid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textstatusid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textstatusextinfo_;
    uint32_t chatroommemberflag_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatRoom_2eproto;
};
// -------------------------------------------------------------------

class ChatRoomMemberData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ChatRoomMemberData) */ {
 public:
  inline ChatRoomMemberData() : ChatRoomMemberData(nullptr) {}
  ~ChatRoomMemberData() override;
  explicit PROTOBUF_CONSTEXPR ChatRoomMemberData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRoomMemberData(const ChatRoomMemberData& from);
  ChatRoomMemberData(ChatRoomMemberData&& from) noexcept
    : ChatRoomMemberData() {
    *this = ::std::move(from);
  }

  inline ChatRoomMemberData& operator=(const ChatRoomMemberData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRoomMemberData& operator=(ChatRoomMemberData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChatRoomMemberData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRoomMemberData* internal_default_instance() {
    return reinterpret_cast<const ChatRoomMemberData*>(
               &_ChatRoomMemberData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatRoomMemberData& a, ChatRoomMemberData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRoomMemberData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRoomMemberData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRoomMemberData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatRoomMemberData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChatRoomMemberData& from);
  void MergeFrom(const ChatRoomMemberData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatRoomMemberData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoomMemberData";
  }
  protected:
  explicit ChatRoomMemberData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatRoomMemberFieldNumber = 2,
    kWatchMembersFieldNumber = 6,
    kChatRoomUserNameFieldNumber = 4,
    kMemberCountFieldNumber = 1,
    kInfoMaskFieldNumber = 3,
    kWatchMemberCountFieldNumber = 5,
  };
  // repeated .ChatRoomMemberInfo chatRoomMember = 2;
  int chatroommember_size() const;
  private:
  int _internal_chatroommember_size() const;
  public:
  void clear_chatroommember();
  ::ChatRoomMemberInfo* mutable_chatroommember(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomMemberInfo >*
      mutable_chatroommember();
  private:
  const ::ChatRoomMemberInfo& _internal_chatroommember(int index) const;
  ::ChatRoomMemberInfo* _internal_add_chatroommember();
  public:
  const ::ChatRoomMemberInfo& chatroommember(int index) const;
  ::ChatRoomMemberInfo* add_chatroommember();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomMemberInfo >&
      chatroommember() const;

  // repeated .ChatRoomWatchMember watchMembers = 6;
  int watchmembers_size() const;
  private:
  int _internal_watchmembers_size() const;
  public:
  void clear_watchmembers();
  ::ChatRoomWatchMember* mutable_watchmembers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomWatchMember >*
      mutable_watchmembers();
  private:
  const ::ChatRoomWatchMember& _internal_watchmembers(int index) const;
  ::ChatRoomWatchMember* _internal_add_watchmembers();
  public:
  const ::ChatRoomWatchMember& watchmembers(int index) const;
  ::ChatRoomWatchMember* add_watchmembers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomWatchMember >&
      watchmembers() const;

  // optional .SKBuiltinString_t chatRoomUserName = 4;
  bool has_chatroomusername() const;
  private:
  bool _internal_has_chatroomusername() const;
  public:
  void clear_chatroomusername();
  const ::SKBuiltinString_t& chatroomusername() const;
  PROTOBUF_NODISCARD ::SKBuiltinString_t* release_chatroomusername();
  ::SKBuiltinString_t* mutable_chatroomusername();
  void set_allocated_chatroomusername(::SKBuiltinString_t* chatroomusername);
  private:
  const ::SKBuiltinString_t& _internal_chatroomusername() const;
  ::SKBuiltinString_t* _internal_mutable_chatroomusername();
  public:
  void unsafe_arena_set_allocated_chatroomusername(
      ::SKBuiltinString_t* chatroomusername);
  ::SKBuiltinString_t* unsafe_arena_release_chatroomusername();

  // required uint32 memberCount = 1;
  bool has_membercount() const;
  private:
  bool _internal_has_membercount() const;
  public:
  void clear_membercount();
  uint32_t membercount() const;
  void set_membercount(uint32_t value);
  private:
  uint32_t _internal_membercount() const;
  void _internal_set_membercount(uint32_t value);
  public:

  // optional uint32 infoMask = 3;
  bool has_infomask() const;
  private:
  bool _internal_has_infomask() const;
  public:
  void clear_infomask();
  uint32_t infomask() const;
  void set_infomask(uint32_t value);
  private:
  uint32_t _internal_infomask() const;
  void _internal_set_infomask(uint32_t value);
  public:

  // optional uint32 watchMemberCount = 5;
  bool has_watchmembercount() const;
  private:
  bool _internal_has_watchmembercount() const;
  public:
  void clear_watchmembercount();
  uint32_t watchmembercount() const;
  void set_watchmembercount(uint32_t value);
  private:
  uint32_t _internal_watchmembercount() const;
  void _internal_set_watchmembercount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoomMemberData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomMemberInfo > chatroommember_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomWatchMember > watchmembers_;
    ::SKBuiltinString_t* chatroomusername_;
    uint32_t membercount_;
    uint32_t infomask_;
    uint32_t watchmembercount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatRoom_2eproto;
};
// -------------------------------------------------------------------

class GetChatroomMemberDetailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GetChatroomMemberDetailResponse) */ {
 public:
  inline GetChatroomMemberDetailResponse() : GetChatroomMemberDetailResponse(nullptr) {}
  ~GetChatroomMemberDetailResponse() override;
  explicit PROTOBUF_CONSTEXPR GetChatroomMemberDetailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatroomMemberDetailResponse(const GetChatroomMemberDetailResponse& from);
  GetChatroomMemberDetailResponse(GetChatroomMemberDetailResponse&& from) noexcept
    : GetChatroomMemberDetailResponse() {
    *this = ::std::move(from);
  }

  inline GetChatroomMemberDetailResponse& operator=(const GetChatroomMemberDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatroomMemberDetailResponse& operator=(GetChatroomMemberDetailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetChatroomMemberDetailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatroomMemberDetailResponse* internal_default_instance() {
    return reinterpret_cast<const GetChatroomMemberDetailResponse*>(
               &_GetChatroomMemberDetailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetChatroomMemberDetailResponse& a, GetChatroomMemberDetailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatroomMemberDetailResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatroomMemberDetailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatroomMemberDetailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatroomMemberDetailResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetChatroomMemberDetailResponse& from);
  void MergeFrom(const GetChatroomMemberDetailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChatroomMemberDetailResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetChatroomMemberDetailResponse";
  }
  protected:
  explicit GetChatroomMemberDetailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomUserNameFieldNumber = 2,
    kBaseResponseFieldNumber = 1,
    kNewChatroomDataFieldNumber = 4,
    kServerVersionFieldNumber = 3,
  };
  // optional string chatroomUserName = 2;
  bool has_chatroomusername() const;
  private:
  bool _internal_has_chatroomusername() const;
  public:
  void clear_chatroomusername();
  const std::string& chatroomusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroomusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroomusername();
  PROTOBUF_NODISCARD std::string* release_chatroomusername();
  void set_allocated_chatroomusername(std::string* chatroomusername);
  private:
  const std::string& _internal_chatroomusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroomusername(const std::string& value);
  std::string* _internal_mutable_chatroomusername();
  public:

  // required .BaseResponse baseResponse = 1;
  bool has_baseresponse() const;
  private:
  bool _internal_has_baseresponse() const;
  public:
  void clear_baseresponse();
  const ::BaseResponse& baseresponse() const;
  PROTOBUF_NODISCARD ::BaseResponse* release_baseresponse();
  ::BaseResponse* mutable_baseresponse();
  void set_allocated_baseresponse(::BaseResponse* baseresponse);
  private:
  const ::BaseResponse& _internal_baseresponse() const;
  ::BaseResponse* _internal_mutable_baseresponse();
  public:
  void unsafe_arena_set_allocated_baseresponse(
      ::BaseResponse* baseresponse);
  ::BaseResponse* unsafe_arena_release_baseresponse();

  // required .ChatRoomMemberData newChatroomData = 4;
  bool has_newchatroomdata() const;
  private:
  bool _internal_has_newchatroomdata() const;
  public:
  void clear_newchatroomdata();
  const ::ChatRoomMemberData& newchatroomdata() const;
  PROTOBUF_NODISCARD ::ChatRoomMemberData* release_newchatroomdata();
  ::ChatRoomMemberData* mutable_newchatroomdata();
  void set_allocated_newchatroomdata(::ChatRoomMemberData* newchatroomdata);
  private:
  const ::ChatRoomMemberData& _internal_newchatroomdata() const;
  ::ChatRoomMemberData* _internal_mutable_newchatroomdata();
  public:
  void unsafe_arena_set_allocated_newchatroomdata(
      ::ChatRoomMemberData* newchatroomdata);
  ::ChatRoomMemberData* unsafe_arena_release_newchatroomdata();

  // required uint32 serverVersion = 3;
  bool has_serverversion() const;
  private:
  bool _internal_has_serverversion() const;
  public:
  void clear_serverversion();
  uint32_t serverversion() const;
  void set_serverversion(uint32_t value);
  private:
  uint32_t _internal_serverversion() const;
  void _internal_set_serverversion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetChatroomMemberDetailResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroomusername_;
    ::BaseResponse* baseresponse_;
    ::ChatRoomMemberData* newchatroomdata_;
    uint32_t serverversion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatRoom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatRoomWatchMember

// optional string userName = 1;
inline bool ChatRoomWatchMember::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatRoomWatchMember::has_username() const {
  return _internal_has_username();
}
inline void ChatRoomWatchMember::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatRoomWatchMember::username() const {
  // @@protoc_insertion_point(field_get:ChatRoomWatchMember.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomWatchMember::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomWatchMember.userName)
}
inline std::string* ChatRoomWatchMember::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:ChatRoomWatchMember.userName)
  return _s;
}
inline const std::string& ChatRoomWatchMember::_internal_username() const {
  return _impl_.username_.Get();
}
inline void ChatRoomWatchMember::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomWatchMember::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomWatchMember::release_username() {
  // @@protoc_insertion_point(field_release:ChatRoomWatchMember.userName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomWatchMember::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomWatchMember.userName)
}

// -------------------------------------------------------------------

// ChatRoomMemberInfo

// optional string userName = 1;
inline bool ChatRoomMemberInfo::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_username() const {
  return _internal_has_username();
}
inline void ChatRoomMemberInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatRoomMemberInfo::username() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.userName)
}
inline std::string* ChatRoomMemberInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.userName)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_username() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.userName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.userName)
}

// optional string nickName = 2;
inline bool ChatRoomMemberInfo::_internal_has_nickname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void ChatRoomMemberInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatRoomMemberInfo::nickname() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.nickName)
}
inline std::string* ChatRoomMemberInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.nickName)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_nickname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_nickname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.nickName)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.nickname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.nickName)
}

// optional string displayName = 3;
inline bool ChatRoomMemberInfo::_internal_has_displayname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_displayname() const {
  return _internal_has_displayname();
}
inline void ChatRoomMemberInfo::clear_displayname() {
  _impl_.displayname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChatRoomMemberInfo::displayname() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.displayName)
  return _internal_displayname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_displayname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.displayname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.displayName)
}
inline std::string* ChatRoomMemberInfo::mutable_displayname() {
  std::string* _s = _internal_mutable_displayname();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.displayName)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_displayname() const {
  return _impl_.displayname_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_displayname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.displayname_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_displayname() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.displayname_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_displayname() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.displayName)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.displayname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.displayname_.IsDefault()) {
    _impl_.displayname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.displayname_.SetAllocated(displayname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.displayname_.IsDefault()) {
    _impl_.displayname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.displayName)
}

// optional string bigHeadImgUrl = 4;
inline bool ChatRoomMemberInfo::_internal_has_bigheadimgurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_bigheadimgurl() const {
  return _internal_has_bigheadimgurl();
}
inline void ChatRoomMemberInfo::clear_bigheadimgurl() {
  _impl_.bigheadimgurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChatRoomMemberInfo::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.bigHeadImgUrl)
  return _internal_bigheadimgurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_bigheadimgurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.bigheadimgurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.bigHeadImgUrl)
}
inline std::string* ChatRoomMemberInfo::mutable_bigheadimgurl() {
  std::string* _s = _internal_mutable_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.bigHeadImgUrl)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_bigheadimgurl() const {
  return _impl_.bigheadimgurl_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_bigheadimgurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bigheadimgurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_bigheadimgurl() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.bigheadimgurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.bigHeadImgUrl)
  if (!_internal_has_bigheadimgurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.bigheadimgurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bigheadimgurl_.IsDefault()) {
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_bigheadimgurl(std::string* bigheadimgurl) {
  if (bigheadimgurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bigheadimgurl_.SetAllocated(bigheadimgurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bigheadimgurl_.IsDefault()) {
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.bigHeadImgUrl)
}

// optional string smallHeadImgUrl = 5;
inline bool ChatRoomMemberInfo::_internal_has_smallheadimgurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_smallheadimgurl() const {
  return _internal_has_smallheadimgurl();
}
inline void ChatRoomMemberInfo::clear_smallheadimgurl() {
  _impl_.smallheadimgurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ChatRoomMemberInfo::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.smallHeadImgUrl)
  return _internal_smallheadimgurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_smallheadimgurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.smallheadimgurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.smallHeadImgUrl)
}
inline std::string* ChatRoomMemberInfo::mutable_smallheadimgurl() {
  std::string* _s = _internal_mutable_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.smallHeadImgUrl)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_smallheadimgurl() const {
  return _impl_.smallheadimgurl_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_smallheadimgurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.smallheadimgurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_smallheadimgurl() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.smallheadimgurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.smallHeadImgUrl)
  if (!_internal_has_smallheadimgurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.smallheadimgurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.smallheadimgurl_.IsDefault()) {
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_smallheadimgurl(std::string* smallheadimgurl) {
  if (smallheadimgurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.smallheadimgurl_.SetAllocated(smallheadimgurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.smallheadimgurl_.IsDefault()) {
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.smallHeadImgUrl)
}

// required uint32 chatroomMemberFlag = 6;
inline bool ChatRoomMemberInfo::_internal_has_chatroommemberflag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_chatroommemberflag() const {
  return _internal_has_chatroommemberflag();
}
inline void ChatRoomMemberInfo::clear_chatroommemberflag() {
  _impl_.chatroommemberflag_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ChatRoomMemberInfo::_internal_chatroommemberflag() const {
  return _impl_.chatroommemberflag_;
}
inline uint32_t ChatRoomMemberInfo::chatroommemberflag() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.chatroomMemberFlag)
  return _internal_chatroommemberflag();
}
inline void ChatRoomMemberInfo::_internal_set_chatroommemberflag(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.chatroommemberflag_ = value;
}
inline void ChatRoomMemberInfo::set_chatroommemberflag(uint32_t value) {
  _internal_set_chatroommemberflag(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.chatroomMemberFlag)
}

// optional string inviterUserName = 7;
inline bool ChatRoomMemberInfo::_internal_has_inviterusername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_inviterusername() const {
  return _internal_has_inviterusername();
}
inline void ChatRoomMemberInfo::clear_inviterusername() {
  _impl_.inviterusername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ChatRoomMemberInfo::inviterusername() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.inviterUserName)
  return _internal_inviterusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_inviterusername(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.inviterusername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.inviterUserName)
}
inline std::string* ChatRoomMemberInfo::mutable_inviterusername() {
  std::string* _s = _internal_mutable_inviterusername();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.inviterUserName)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_inviterusername() const {
  return _impl_.inviterusername_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_inviterusername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.inviterusername_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_inviterusername() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.inviterusername_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_inviterusername() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.inviterUserName)
  if (!_internal_has_inviterusername()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.inviterusername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inviterusername_.IsDefault()) {
    _impl_.inviterusername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_inviterusername(std::string* inviterusername) {
  if (inviterusername != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.inviterusername_.SetAllocated(inviterusername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inviterusername_.IsDefault()) {
    _impl_.inviterusername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.inviterUserName)
}

// optional uint32 status = 8;
inline bool ChatRoomMemberInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_status() const {
  return _internal_has_status();
}
inline void ChatRoomMemberInfo::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ChatRoomMemberInfo::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t ChatRoomMemberInfo::status() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.status)
  return _internal_status();
}
inline void ChatRoomMemberInfo::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.status_ = value;
}
inline void ChatRoomMemberInfo::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.status)
}

// optional string textStatus = 9;
inline bool ChatRoomMemberInfo::_internal_has_textstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_textstatus() const {
  return _internal_has_textstatus();
}
inline void ChatRoomMemberInfo::clear_textstatus() {
  _impl_.textstatus_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ChatRoomMemberInfo::textstatus() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.textStatus)
  return _internal_textstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_textstatus(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.textstatus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.textStatus)
}
inline std::string* ChatRoomMemberInfo::mutable_textstatus() {
  std::string* _s = _internal_mutable_textstatus();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.textStatus)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_textstatus() const {
  return _impl_.textstatus_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_textstatus(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.textstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_textstatus() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.textstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_textstatus() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.textStatus)
  if (!_internal_has_textstatus()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.textstatus_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstatus_.IsDefault()) {
    _impl_.textstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_textstatus(std::string* textstatus) {
  if (textstatus != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.textstatus_.SetAllocated(textstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstatus_.IsDefault()) {
    _impl_.textstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.textStatus)
}

// optional string associateOpenImappId = 10;
inline bool ChatRoomMemberInfo::_internal_has_associateopenimappid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_associateopenimappid() const {
  return _internal_has_associateopenimappid();
}
inline void ChatRoomMemberInfo::clear_associateopenimappid() {
  _impl_.associateopenimappid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ChatRoomMemberInfo::associateopenimappid() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.associateOpenImappId)
  return _internal_associateopenimappid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_associateopenimappid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.associateopenimappid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.associateOpenImappId)
}
inline std::string* ChatRoomMemberInfo::mutable_associateopenimappid() {
  std::string* _s = _internal_mutable_associateopenimappid();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.associateOpenImappId)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_associateopenimappid() const {
  return _impl_.associateopenimappid_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_associateopenimappid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.associateopenimappid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_associateopenimappid() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.associateopenimappid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_associateopenimappid() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.associateOpenImappId)
  if (!_internal_has_associateopenimappid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.associateopenimappid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associateopenimappid_.IsDefault()) {
    _impl_.associateopenimappid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_associateopenimappid(std::string* associateopenimappid) {
  if (associateopenimappid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.associateopenimappid_.SetAllocated(associateopenimappid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associateopenimappid_.IsDefault()) {
    _impl_.associateopenimappid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.associateOpenImappId)
}

// optional string associateOpenImdescId = 11;
inline bool ChatRoomMemberInfo::_internal_has_associateopenimdescid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_associateopenimdescid() const {
  return _internal_has_associateopenimdescid();
}
inline void ChatRoomMemberInfo::clear_associateopenimdescid() {
  _impl_.associateopenimdescid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ChatRoomMemberInfo::associateopenimdescid() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.associateOpenImdescId)
  return _internal_associateopenimdescid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_associateopenimdescid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.associateopenimdescid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.associateOpenImdescId)
}
inline std::string* ChatRoomMemberInfo::mutable_associateopenimdescid() {
  std::string* _s = _internal_mutable_associateopenimdescid();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.associateOpenImdescId)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_associateopenimdescid() const {
  return _impl_.associateopenimdescid_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_associateopenimdescid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.associateopenimdescid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_associateopenimdescid() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.associateopenimdescid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_associateopenimdescid() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.associateOpenImdescId)
  if (!_internal_has_associateopenimdescid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.associateopenimdescid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associateopenimdescid_.IsDefault()) {
    _impl_.associateopenimdescid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_associateopenimdescid(std::string* associateopenimdescid) {
  if (associateopenimdescid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.associateopenimdescid_.SetAllocated(associateopenimdescid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associateopenimdescid_.IsDefault()) {
    _impl_.associateopenimdescid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.associateOpenImdescId)
}

// optional string textStatusId = 17;
inline bool ChatRoomMemberInfo::_internal_has_textstatusid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_textstatusid() const {
  return _internal_has_textstatusid();
}
inline void ChatRoomMemberInfo::clear_textstatusid() {
  _impl_.textstatusid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& ChatRoomMemberInfo::textstatusid() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.textStatusId)
  return _internal_textstatusid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_textstatusid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.textstatusid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.textStatusId)
}
inline std::string* ChatRoomMemberInfo::mutable_textstatusid() {
  std::string* _s = _internal_mutable_textstatusid();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.textStatusId)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_textstatusid() const {
  return _impl_.textstatusid_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_textstatusid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.textstatusid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_textstatusid() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.textstatusid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_textstatusid() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.textStatusId)
  if (!_internal_has_textstatusid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.textstatusid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstatusid_.IsDefault()) {
    _impl_.textstatusid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_textstatusid(std::string* textstatusid) {
  if (textstatusid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.textstatusid_.SetAllocated(textstatusid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstatusid_.IsDefault()) {
    _impl_.textstatusid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.textStatusId)
}

// optional string textStatusExtInfo = 19;
inline bool ChatRoomMemberInfo::_internal_has_textstatusextinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChatRoomMemberInfo::has_textstatusextinfo() const {
  return _internal_has_textstatusextinfo();
}
inline void ChatRoomMemberInfo::clear_textstatusextinfo() {
  _impl_.textstatusextinfo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& ChatRoomMemberInfo::textstatusextinfo() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.textStatusExtInfo)
  return _internal_textstatusextinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_textstatusextinfo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000400u;
 _impl_.textstatusextinfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.textStatusExtInfo)
}
inline std::string* ChatRoomMemberInfo::mutable_textstatusextinfo() {
  std::string* _s = _internal_mutable_textstatusextinfo();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.textStatusExtInfo)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_textstatusextinfo() const {
  return _impl_.textstatusextinfo_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_textstatusextinfo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.textstatusextinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_textstatusextinfo() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.textstatusextinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_textstatusextinfo() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.textStatusExtInfo)
  if (!_internal_has_textstatusextinfo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* p = _impl_.textstatusextinfo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstatusextinfo_.IsDefault()) {
    _impl_.textstatusextinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatRoomMemberInfo::set_allocated_textstatusextinfo(std::string* textstatusextinfo) {
  if (textstatusextinfo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.textstatusextinfo_.SetAllocated(textstatusextinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstatusextinfo_.IsDefault()) {
    _impl_.textstatusextinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.textStatusExtInfo)
}

// -------------------------------------------------------------------

// ChatRoomMemberData

// required uint32 memberCount = 1;
inline bool ChatRoomMemberData::_internal_has_membercount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatRoomMemberData::has_membercount() const {
  return _internal_has_membercount();
}
inline void ChatRoomMemberData::clear_membercount() {
  _impl_.membercount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChatRoomMemberData::_internal_membercount() const {
  return _impl_.membercount_;
}
inline uint32_t ChatRoomMemberData::membercount() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberData.memberCount)
  return _internal_membercount();
}
inline void ChatRoomMemberData::_internal_set_membercount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.membercount_ = value;
}
inline void ChatRoomMemberData::set_membercount(uint32_t value) {
  _internal_set_membercount(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberData.memberCount)
}

// repeated .ChatRoomMemberInfo chatRoomMember = 2;
inline int ChatRoomMemberData::_internal_chatroommember_size() const {
  return _impl_.chatroommember_.size();
}
inline int ChatRoomMemberData::chatroommember_size() const {
  return _internal_chatroommember_size();
}
inline void ChatRoomMemberData::clear_chatroommember() {
  _impl_.chatroommember_.Clear();
}
inline ::ChatRoomMemberInfo* ChatRoomMemberData::mutable_chatroommember(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberData.chatRoomMember)
  return _impl_.chatroommember_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomMemberInfo >*
ChatRoomMemberData::mutable_chatroommember() {
  // @@protoc_insertion_point(field_mutable_list:ChatRoomMemberData.chatRoomMember)
  return &_impl_.chatroommember_;
}
inline const ::ChatRoomMemberInfo& ChatRoomMemberData::_internal_chatroommember(int index) const {
  return _impl_.chatroommember_.Get(index);
}
inline const ::ChatRoomMemberInfo& ChatRoomMemberData::chatroommember(int index) const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberData.chatRoomMember)
  return _internal_chatroommember(index);
}
inline ::ChatRoomMemberInfo* ChatRoomMemberData::_internal_add_chatroommember() {
  return _impl_.chatroommember_.Add();
}
inline ::ChatRoomMemberInfo* ChatRoomMemberData::add_chatroommember() {
  ::ChatRoomMemberInfo* _add = _internal_add_chatroommember();
  // @@protoc_insertion_point(field_add:ChatRoomMemberData.chatRoomMember)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomMemberInfo >&
ChatRoomMemberData::chatroommember() const {
  // @@protoc_insertion_point(field_list:ChatRoomMemberData.chatRoomMember)
  return _impl_.chatroommember_;
}

// optional uint32 infoMask = 3;
inline bool ChatRoomMemberData::_internal_has_infomask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChatRoomMemberData::has_infomask() const {
  return _internal_has_infomask();
}
inline void ChatRoomMemberData::clear_infomask() {
  _impl_.infomask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ChatRoomMemberData::_internal_infomask() const {
  return _impl_.infomask_;
}
inline uint32_t ChatRoomMemberData::infomask() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberData.infoMask)
  return _internal_infomask();
}
inline void ChatRoomMemberData::_internal_set_infomask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.infomask_ = value;
}
inline void ChatRoomMemberData::set_infomask(uint32_t value) {
  _internal_set_infomask(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberData.infoMask)
}

// optional .SKBuiltinString_t chatRoomUserName = 4;
inline bool ChatRoomMemberData::_internal_has_chatroomusername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chatroomusername_ != nullptr);
  return value;
}
inline bool ChatRoomMemberData::has_chatroomusername() const {
  return _internal_has_chatroomusername();
}
inline const ::SKBuiltinString_t& ChatRoomMemberData::_internal_chatroomusername() const {
  const ::SKBuiltinString_t* p = _impl_.chatroomusername_;
  return p != nullptr ? *p : reinterpret_cast<const ::SKBuiltinString_t&>(
      ::_SKBuiltinString_t_default_instance_);
}
inline const ::SKBuiltinString_t& ChatRoomMemberData::chatroomusername() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberData.chatRoomUserName)
  return _internal_chatroomusername();
}
inline void ChatRoomMemberData::unsafe_arena_set_allocated_chatroomusername(
    ::SKBuiltinString_t* chatroomusername) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatroomusername_);
  }
  _impl_.chatroomusername_ = chatroomusername;
  if (chatroomusername) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChatRoomMemberData.chatRoomUserName)
}
inline ::SKBuiltinString_t* ChatRoomMemberData::release_chatroomusername() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SKBuiltinString_t* temp = _impl_.chatroomusername_;
  _impl_.chatroomusername_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SKBuiltinString_t* ChatRoomMemberData::unsafe_arena_release_chatroomusername() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberData.chatRoomUserName)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SKBuiltinString_t* temp = _impl_.chatroomusername_;
  _impl_.chatroomusername_ = nullptr;
  return temp;
}
inline ::SKBuiltinString_t* ChatRoomMemberData::_internal_mutable_chatroomusername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chatroomusername_ == nullptr) {
    auto* p = CreateMaybeMessage<::SKBuiltinString_t>(GetArenaForAllocation());
    _impl_.chatroomusername_ = p;
  }
  return _impl_.chatroomusername_;
}
inline ::SKBuiltinString_t* ChatRoomMemberData::mutable_chatroomusername() {
  ::SKBuiltinString_t* _msg = _internal_mutable_chatroomusername();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberData.chatRoomUserName)
  return _msg;
}
inline void ChatRoomMemberData::set_allocated_chatroomusername(::SKBuiltinString_t* chatroomusername) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatroomusername_);
  }
  if (chatroomusername) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatroomusername));
    if (message_arena != submessage_arena) {
      chatroomusername = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatroomusername, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chatroomusername_ = chatroomusername;
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberData.chatRoomUserName)
}

// optional uint32 watchMemberCount = 5;
inline bool ChatRoomMemberData::_internal_has_watchmembercount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChatRoomMemberData::has_watchmembercount() const {
  return _internal_has_watchmembercount();
}
inline void ChatRoomMemberData::clear_watchmembercount() {
  _impl_.watchmembercount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ChatRoomMemberData::_internal_watchmembercount() const {
  return _impl_.watchmembercount_;
}
inline uint32_t ChatRoomMemberData::watchmembercount() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberData.watchMemberCount)
  return _internal_watchmembercount();
}
inline void ChatRoomMemberData::_internal_set_watchmembercount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.watchmembercount_ = value;
}
inline void ChatRoomMemberData::set_watchmembercount(uint32_t value) {
  _internal_set_watchmembercount(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberData.watchMemberCount)
}

// repeated .ChatRoomWatchMember watchMembers = 6;
inline int ChatRoomMemberData::_internal_watchmembers_size() const {
  return _impl_.watchmembers_.size();
}
inline int ChatRoomMemberData::watchmembers_size() const {
  return _internal_watchmembers_size();
}
inline void ChatRoomMemberData::clear_watchmembers() {
  _impl_.watchmembers_.Clear();
}
inline ::ChatRoomWatchMember* ChatRoomMemberData::mutable_watchmembers(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberData.watchMembers)
  return _impl_.watchmembers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomWatchMember >*
ChatRoomMemberData::mutable_watchmembers() {
  // @@protoc_insertion_point(field_mutable_list:ChatRoomMemberData.watchMembers)
  return &_impl_.watchmembers_;
}
inline const ::ChatRoomWatchMember& ChatRoomMemberData::_internal_watchmembers(int index) const {
  return _impl_.watchmembers_.Get(index);
}
inline const ::ChatRoomWatchMember& ChatRoomMemberData::watchmembers(int index) const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberData.watchMembers)
  return _internal_watchmembers(index);
}
inline ::ChatRoomWatchMember* ChatRoomMemberData::_internal_add_watchmembers() {
  return _impl_.watchmembers_.Add();
}
inline ::ChatRoomWatchMember* ChatRoomMemberData::add_watchmembers() {
  ::ChatRoomWatchMember* _add = _internal_add_watchmembers();
  // @@protoc_insertion_point(field_add:ChatRoomMemberData.watchMembers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatRoomWatchMember >&
ChatRoomMemberData::watchmembers() const {
  // @@protoc_insertion_point(field_list:ChatRoomMemberData.watchMembers)
  return _impl_.watchmembers_;
}

// -------------------------------------------------------------------

// GetChatroomMemberDetailResponse

// required .BaseResponse baseResponse = 1;
inline bool GetChatroomMemberDetailResponse::_internal_has_baseresponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.baseresponse_ != nullptr);
  return value;
}
inline bool GetChatroomMemberDetailResponse::has_baseresponse() const {
  return _internal_has_baseresponse();
}
inline const ::BaseResponse& GetChatroomMemberDetailResponse::_internal_baseresponse() const {
  const ::BaseResponse* p = _impl_.baseresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::BaseResponse&>(
      ::_BaseResponse_default_instance_);
}
inline const ::BaseResponse& GetChatroomMemberDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.baseResponse)
  return _internal_baseresponse();
}
inline void GetChatroomMemberDetailResponse::unsafe_arena_set_allocated_baseresponse(
    ::BaseResponse* baseresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseresponse_);
  }
  _impl_.baseresponse_ = baseresponse;
  if (baseresponse) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetChatroomMemberDetailResponse.baseResponse)
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::release_baseresponse() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::unsafe_arena_release_baseresponse() {
  // @@protoc_insertion_point(field_release:GetChatroomMemberDetailResponse.baseResponse)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
  return temp;
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::_internal_mutable_baseresponse() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.baseresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseResponse>(GetArenaForAllocation());
    _impl_.baseresponse_ = p;
  }
  return _impl_.baseresponse_;
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::mutable_baseresponse() {
  ::BaseResponse* _msg = _internal_mutable_baseresponse();
  // @@protoc_insertion_point(field_mutable:GetChatroomMemberDetailResponse.baseResponse)
  return _msg;
}
inline void GetChatroomMemberDetailResponse::set_allocated_baseresponse(::BaseResponse* baseresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseresponse_);
  }
  if (baseresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseresponse));
    if (message_arena != submessage_arena) {
      baseresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseresponse, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.baseresponse_ = baseresponse;
  // @@protoc_insertion_point(field_set_allocated:GetChatroomMemberDetailResponse.baseResponse)
}

// optional string chatroomUserName = 2;
inline bool GetChatroomMemberDetailResponse::_internal_has_chatroomusername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetChatroomMemberDetailResponse::has_chatroomusername() const {
  return _internal_has_chatroomusername();
}
inline void GetChatroomMemberDetailResponse::clear_chatroomusername() {
  _impl_.chatroomusername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetChatroomMemberDetailResponse::chatroomusername() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.chatroomUserName)
  return _internal_chatroomusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatroomMemberDetailResponse::set_chatroomusername(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chatroomusername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetChatroomMemberDetailResponse.chatroomUserName)
}
inline std::string* GetChatroomMemberDetailResponse::mutable_chatroomusername() {
  std::string* _s = _internal_mutable_chatroomusername();
  // @@protoc_insertion_point(field_mutable:GetChatroomMemberDetailResponse.chatroomUserName)
  return _s;
}
inline const std::string& GetChatroomMemberDetailResponse::_internal_chatroomusername() const {
  return _impl_.chatroomusername_.Get();
}
inline void GetChatroomMemberDetailResponse::_internal_set_chatroomusername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chatroomusername_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatroomMemberDetailResponse::_internal_mutable_chatroomusername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chatroomusername_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatroomMemberDetailResponse::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:GetChatroomMemberDetailResponse.chatroomUserName)
  if (!_internal_has_chatroomusername()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chatroomusername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatroomusername_.IsDefault()) {
    _impl_.chatroomusername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetChatroomMemberDetailResponse::set_allocated_chatroomusername(std::string* chatroomusername) {
  if (chatroomusername != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chatroomusername_.SetAllocated(chatroomusername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatroomusername_.IsDefault()) {
    _impl_.chatroomusername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetChatroomMemberDetailResponse.chatroomUserName)
}

// required uint32 serverVersion = 3;
inline bool GetChatroomMemberDetailResponse::_internal_has_serverversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetChatroomMemberDetailResponse::has_serverversion() const {
  return _internal_has_serverversion();
}
inline void GetChatroomMemberDetailResponse::clear_serverversion() {
  _impl_.serverversion_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GetChatroomMemberDetailResponse::_internal_serverversion() const {
  return _impl_.serverversion_;
}
inline uint32_t GetChatroomMemberDetailResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.serverVersion)
  return _internal_serverversion();
}
inline void GetChatroomMemberDetailResponse::_internal_set_serverversion(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.serverversion_ = value;
}
inline void GetChatroomMemberDetailResponse::set_serverversion(uint32_t value) {
  _internal_set_serverversion(value);
  // @@protoc_insertion_point(field_set:GetChatroomMemberDetailResponse.serverVersion)
}

// required .ChatRoomMemberData newChatroomData = 4;
inline bool GetChatroomMemberDetailResponse::_internal_has_newchatroomdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newchatroomdata_ != nullptr);
  return value;
}
inline bool GetChatroomMemberDetailResponse::has_newchatroomdata() const {
  return _internal_has_newchatroomdata();
}
inline void GetChatroomMemberDetailResponse::clear_newchatroomdata() {
  if (_impl_.newchatroomdata_ != nullptr) _impl_.newchatroomdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ChatRoomMemberData& GetChatroomMemberDetailResponse::_internal_newchatroomdata() const {
  const ::ChatRoomMemberData* p = _impl_.newchatroomdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChatRoomMemberData&>(
      ::_ChatRoomMemberData_default_instance_);
}
inline const ::ChatRoomMemberData& GetChatroomMemberDetailResponse::newchatroomdata() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.newChatroomData)
  return _internal_newchatroomdata();
}
inline void GetChatroomMemberDetailResponse::unsafe_arena_set_allocated_newchatroomdata(
    ::ChatRoomMemberData* newchatroomdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newchatroomdata_);
  }
  _impl_.newchatroomdata_ = newchatroomdata;
  if (newchatroomdata) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetChatroomMemberDetailResponse.newChatroomData)
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::release_newchatroomdata() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ChatRoomMemberData* temp = _impl_.newchatroomdata_;
  _impl_.newchatroomdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::unsafe_arena_release_newchatroomdata() {
  // @@protoc_insertion_point(field_release:GetChatroomMemberDetailResponse.newChatroomData)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ChatRoomMemberData* temp = _impl_.newchatroomdata_;
  _impl_.newchatroomdata_ = nullptr;
  return temp;
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::_internal_mutable_newchatroomdata() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newchatroomdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatRoomMemberData>(GetArenaForAllocation());
    _impl_.newchatroomdata_ = p;
  }
  return _impl_.newchatroomdata_;
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::mutable_newchatroomdata() {
  ::ChatRoomMemberData* _msg = _internal_mutable_newchatroomdata();
  // @@protoc_insertion_point(field_mutable:GetChatroomMemberDetailResponse.newChatroomData)
  return _msg;
}
inline void GetChatroomMemberDetailResponse::set_allocated_newchatroomdata(::ChatRoomMemberData* newchatroomdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newchatroomdata_;
  }
  if (newchatroomdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newchatroomdata);
    if (message_arena != submessage_arena) {
      newchatroomdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newchatroomdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.newchatroomdata_ = newchatroomdata;
  // @@protoc_insertion_point(field_set_allocated:GetChatroomMemberDetailResponse.newChatroomData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eproto
