// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A8Key.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_A8Key_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_A8Key_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_A8Key_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_A8Key_2eproto {
  static const uint32_t offsets[];
};
class GetA8KeyResp;
struct GetA8KeyRespDefaultTypeInternal;
extern GetA8KeyRespDefaultTypeInternal _GetA8KeyResp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetA8KeyResp* Arena::CreateMaybeMessage<::GetA8KeyResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GetA8KeyResp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GetA8KeyResp) */ {
 public:
  inline GetA8KeyResp() : GetA8KeyResp(nullptr) {}
  ~GetA8KeyResp() override;
  explicit PROTOBUF_CONSTEXPR GetA8KeyResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetA8KeyResp(const GetA8KeyResp& from);
  GetA8KeyResp(GetA8KeyResp&& from) noexcept
    : GetA8KeyResp() {
    *this = ::std::move(from);
  }

  inline GetA8KeyResp& operator=(const GetA8KeyResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetA8KeyResp& operator=(GetA8KeyResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetA8KeyResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetA8KeyResp* internal_default_instance() {
    return reinterpret_cast<const GetA8KeyResp*>(
               &_GetA8KeyResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetA8KeyResp& a, GetA8KeyResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetA8KeyResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetA8KeyResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetA8KeyResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetA8KeyResp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetA8KeyResp& from);
  void MergeFrom(const GetA8KeyResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetA8KeyResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetA8KeyResp";
  }
  protected:
  explicit GetA8KeyResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeListFieldNumber = 17,
    kHttpHeaderFieldNumber = 25,
    kFullUrlFieldNumber = 2,
    kA8KeyFieldNumber = 3,
    kTitleFieldNumber = 5,
    kContentFieldNumber = 6,
    kUserNameFieldNumber = 9,
    kShareUrlFieldNumber = 15,
    kAntispamTicketFieldNumber = 18,
    kSsidFieldNumber = 20,
    kMidFieldNumber = 21,
    kWordingFieldNumber = 26,
    kHeadImgFieldNumber = 27,
    kMenuWordingFieldNumber = 29,
    kBaseResponseFieldNumber = 1,
    kJsapipermissionFieldNumber = 7,
    kGeneralControlBitSetFieldNumber = 8,
    kDeepLinkBitSetFieldNumber = 22,
    kJsapicontrolBytesFieldNumber = 23,
    kCookieFieldNumber = 28,
    kVerifyPrefetchInfoFieldNumber = 30,
    kWebComponentInfoFieldNumber = 31,
    kActionCodeFieldNumber = 4,
    kScopeCountFieldNumber = 16,
    kHttpHeaderCountFieldNumber = 24,
  };
  // repeated .BizScopeInfo scopeList = 17;
  int scopelist_size() const;
  private:
  int _internal_scopelist_size() const;
  public:
  void clear_scopelist();
  ::BizScopeInfo* mutable_scopelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BizScopeInfo >*
      mutable_scopelist();
  private:
  const ::BizScopeInfo& _internal_scopelist(int index) const;
  ::BizScopeInfo* _internal_add_scopelist();
  public:
  const ::BizScopeInfo& scopelist(int index) const;
  ::BizScopeInfo* add_scopelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BizScopeInfo >&
      scopelist() const;

  // repeated .HttpHeader httpHeader = 25;
  int httpheader_size() const;
  private:
  int _internal_httpheader_size() const;
  public:
  void clear_httpheader();
  ::HttpHeader* mutable_httpheader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HttpHeader >*
      mutable_httpheader();
  private:
  const ::HttpHeader& _internal_httpheader(int index) const;
  ::HttpHeader* _internal_add_httpheader();
  public:
  const ::HttpHeader& httpheader(int index) const;
  ::HttpHeader* add_httpheader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HttpHeader >&
      httpheader() const;

  // optional string fullUrl = 2;
  bool has_fullurl() const;
  private:
  bool _internal_has_fullurl() const;
  public:
  void clear_fullurl();
  const std::string& fullurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fullurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fullurl();
  PROTOBUF_NODISCARD std::string* release_fullurl();
  void set_allocated_fullurl(std::string* fullurl);
  private:
  const std::string& _internal_fullurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullurl(const std::string& value);
  std::string* _internal_mutable_fullurl();
  public:

  // optional string a8Key = 3;
  bool has_a8key() const;
  private:
  bool _internal_has_a8key() const;
  public:
  void clear_a8key();
  const std::string& a8key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a8key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a8key();
  PROTOBUF_NODISCARD std::string* release_a8key();
  void set_allocated_a8key(std::string* a8key);
  private:
  const std::string& _internal_a8key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a8key(const std::string& value);
  std::string* _internal_mutable_a8key();
  public:

  // optional string title = 5;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string content = 6;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional string userName = 9;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string shareUrl = 15;
  bool has_shareurl() const;
  private:
  bool _internal_has_shareurl() const;
  public:
  void clear_shareurl();
  const std::string& shareurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shareurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shareurl();
  PROTOBUF_NODISCARD std::string* release_shareurl();
  void set_allocated_shareurl(std::string* shareurl);
  private:
  const std::string& _internal_shareurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shareurl(const std::string& value);
  std::string* _internal_mutable_shareurl();
  public:

  // optional string antispamTicket = 18;
  bool has_antispamticket() const;
  private:
  bool _internal_has_antispamticket() const;
  public:
  void clear_antispamticket();
  const std::string& antispamticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_antispamticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_antispamticket();
  PROTOBUF_NODISCARD std::string* release_antispamticket();
  void set_allocated_antispamticket(std::string* antispamticket);
  private:
  const std::string& _internal_antispamticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_antispamticket(const std::string& value);
  std::string* _internal_mutable_antispamticket();
  public:

  // optional string ssid = 20;
  bool has_ssid() const;
  private:
  bool _internal_has_ssid() const;
  public:
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // optional string mid = 21;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_NODISCARD std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // optional string wording = 26;
  bool has_wording() const;
  private:
  bool _internal_has_wording() const;
  public:
  void clear_wording();
  const std::string& wording() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wording(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wording();
  PROTOBUF_NODISCARD std::string* release_wording();
  void set_allocated_wording(std::string* wording);
  private:
  const std::string& _internal_wording() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wording(const std::string& value);
  std::string* _internal_mutable_wording();
  public:

  // optional string headImg = 27;
  bool has_headimg() const;
  private:
  bool _internal_has_headimg() const;
  public:
  void clear_headimg();
  const std::string& headimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headimg();
  PROTOBUF_NODISCARD std::string* release_headimg();
  void set_allocated_headimg(std::string* headimg);
  private:
  const std::string& _internal_headimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headimg(const std::string& value);
  std::string* _internal_mutable_headimg();
  public:

  // optional string menuWording = 29;
  bool has_menuwording() const;
  private:
  bool _internal_has_menuwording() const;
  public:
  void clear_menuwording();
  const std::string& menuwording() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_menuwording(ArgT0&& arg0, ArgT... args);
  std::string* mutable_menuwording();
  PROTOBUF_NODISCARD std::string* release_menuwording();
  void set_allocated_menuwording(std::string* menuwording);
  private:
  const std::string& _internal_menuwording() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_menuwording(const std::string& value);
  std::string* _internal_mutable_menuwording();
  public:

  // required .BaseResponse baseResponse = 1;
  bool has_baseresponse() const;
  private:
  bool _internal_has_baseresponse() const;
  public:
  void clear_baseresponse();
  const ::BaseResponse& baseresponse() const;
  PROTOBUF_NODISCARD ::BaseResponse* release_baseresponse();
  ::BaseResponse* mutable_baseresponse();
  void set_allocated_baseresponse(::BaseResponse* baseresponse);
  private:
  const ::BaseResponse& _internal_baseresponse() const;
  ::BaseResponse* _internal_mutable_baseresponse();
  public:
  void unsafe_arena_set_allocated_baseresponse(
      ::BaseResponse* baseresponse);
  ::BaseResponse* unsafe_arena_release_baseresponse();

  // optional .JSAPIPermissionBitSet jsapipermission = 7;
  bool has_jsapipermission() const;
  private:
  bool _internal_has_jsapipermission() const;
  public:
  void clear_jsapipermission();
  const ::JSAPIPermissionBitSet& jsapipermission() const;
  PROTOBUF_NODISCARD ::JSAPIPermissionBitSet* release_jsapipermission();
  ::JSAPIPermissionBitSet* mutable_jsapipermission();
  void set_allocated_jsapipermission(::JSAPIPermissionBitSet* jsapipermission);
  private:
  const ::JSAPIPermissionBitSet& _internal_jsapipermission() const;
  ::JSAPIPermissionBitSet* _internal_mutable_jsapipermission();
  public:
  void unsafe_arena_set_allocated_jsapipermission(
      ::JSAPIPermissionBitSet* jsapipermission);
  ::JSAPIPermissionBitSet* unsafe_arena_release_jsapipermission();

  // optional .GeneralControlBitSet generalControlBitSet = 8;
  bool has_generalcontrolbitset() const;
  private:
  bool _internal_has_generalcontrolbitset() const;
  public:
  void clear_generalcontrolbitset();
  const ::GeneralControlBitSet& generalcontrolbitset() const;
  PROTOBUF_NODISCARD ::GeneralControlBitSet* release_generalcontrolbitset();
  ::GeneralControlBitSet* mutable_generalcontrolbitset();
  void set_allocated_generalcontrolbitset(::GeneralControlBitSet* generalcontrolbitset);
  private:
  const ::GeneralControlBitSet& _internal_generalcontrolbitset() const;
  ::GeneralControlBitSet* _internal_mutable_generalcontrolbitset();
  public:
  void unsafe_arena_set_allocated_generalcontrolbitset(
      ::GeneralControlBitSet* generalcontrolbitset);
  ::GeneralControlBitSet* unsafe_arena_release_generalcontrolbitset();

  // optional .DeepLinkBitSet deepLinkBitSet = 22;
  bool has_deeplinkbitset() const;
  private:
  bool _internal_has_deeplinkbitset() const;
  public:
  void clear_deeplinkbitset();
  const ::DeepLinkBitSet& deeplinkbitset() const;
  PROTOBUF_NODISCARD ::DeepLinkBitSet* release_deeplinkbitset();
  ::DeepLinkBitSet* mutable_deeplinkbitset();
  void set_allocated_deeplinkbitset(::DeepLinkBitSet* deeplinkbitset);
  private:
  const ::DeepLinkBitSet& _internal_deeplinkbitset() const;
  ::DeepLinkBitSet* _internal_mutable_deeplinkbitset();
  public:
  void unsafe_arena_set_allocated_deeplinkbitset(
      ::DeepLinkBitSet* deeplinkbitset);
  ::DeepLinkBitSet* unsafe_arena_release_deeplinkbitset();

  // optional .SKBuiltinBuffer_t jsapicontrolBytes = 23;
  bool has_jsapicontrolbytes() const;
  private:
  bool _internal_has_jsapicontrolbytes() const;
  public:
  void clear_jsapicontrolbytes();
  const ::SKBuiltinBuffer_t& jsapicontrolbytes() const;
  PROTOBUF_NODISCARD ::SKBuiltinBuffer_t* release_jsapicontrolbytes();
  ::SKBuiltinBuffer_t* mutable_jsapicontrolbytes();
  void set_allocated_jsapicontrolbytes(::SKBuiltinBuffer_t* jsapicontrolbytes);
  private:
  const ::SKBuiltinBuffer_t& _internal_jsapicontrolbytes() const;
  ::SKBuiltinBuffer_t* _internal_mutable_jsapicontrolbytes();
  public:
  void unsafe_arena_set_allocated_jsapicontrolbytes(
      ::SKBuiltinBuffer_t* jsapicontrolbytes);
  ::SKBuiltinBuffer_t* unsafe_arena_release_jsapicontrolbytes();

  // optional .SKBuiltinBuffer_t cookie = 28;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  const ::SKBuiltinBuffer_t& cookie() const;
  PROTOBUF_NODISCARD ::SKBuiltinBuffer_t* release_cookie();
  ::SKBuiltinBuffer_t* mutable_cookie();
  void set_allocated_cookie(::SKBuiltinBuffer_t* cookie);
  private:
  const ::SKBuiltinBuffer_t& _internal_cookie() const;
  ::SKBuiltinBuffer_t* _internal_mutable_cookie();
  public:
  void unsafe_arena_set_allocated_cookie(
      ::SKBuiltinBuffer_t* cookie);
  ::SKBuiltinBuffer_t* unsafe_arena_release_cookie();

  // optional .SKBuiltinBuffer_t verifyPrefetchInfo = 30;
  bool has_verifyprefetchinfo() const;
  private:
  bool _internal_has_verifyprefetchinfo() const;
  public:
  void clear_verifyprefetchinfo();
  const ::SKBuiltinBuffer_t& verifyprefetchinfo() const;
  PROTOBUF_NODISCARD ::SKBuiltinBuffer_t* release_verifyprefetchinfo();
  ::SKBuiltinBuffer_t* mutable_verifyprefetchinfo();
  void set_allocated_verifyprefetchinfo(::SKBuiltinBuffer_t* verifyprefetchinfo);
  private:
  const ::SKBuiltinBuffer_t& _internal_verifyprefetchinfo() const;
  ::SKBuiltinBuffer_t* _internal_mutable_verifyprefetchinfo();
  public:
  void unsafe_arena_set_allocated_verifyprefetchinfo(
      ::SKBuiltinBuffer_t* verifyprefetchinfo);
  ::SKBuiltinBuffer_t* unsafe_arena_release_verifyprefetchinfo();

  // optional .SKBuiltinBuffer_t webComponentInfo = 31;
  bool has_webcomponentinfo() const;
  private:
  bool _internal_has_webcomponentinfo() const;
  public:
  void clear_webcomponentinfo();
  const ::SKBuiltinBuffer_t& webcomponentinfo() const;
  PROTOBUF_NODISCARD ::SKBuiltinBuffer_t* release_webcomponentinfo();
  ::SKBuiltinBuffer_t* mutable_webcomponentinfo();
  void set_allocated_webcomponentinfo(::SKBuiltinBuffer_t* webcomponentinfo);
  private:
  const ::SKBuiltinBuffer_t& _internal_webcomponentinfo() const;
  ::SKBuiltinBuffer_t* _internal_mutable_webcomponentinfo();
  public:
  void unsafe_arena_set_allocated_webcomponentinfo(
      ::SKBuiltinBuffer_t* webcomponentinfo);
  ::SKBuiltinBuffer_t* unsafe_arena_release_webcomponentinfo();

  // optional uint32 actionCode = 4;
  bool has_actioncode() const;
  private:
  bool _internal_has_actioncode() const;
  public:
  void clear_actioncode();
  uint32_t actioncode() const;
  void set_actioncode(uint32_t value);
  private:
  uint32_t _internal_actioncode() const;
  void _internal_set_actioncode(uint32_t value);
  public:

  // optional uint32 scopeCount = 16;
  bool has_scopecount() const;
  private:
  bool _internal_has_scopecount() const;
  public:
  void clear_scopecount();
  uint32_t scopecount() const;
  void set_scopecount(uint32_t value);
  private:
  uint32_t _internal_scopecount() const;
  void _internal_set_scopecount(uint32_t value);
  public:

  // optional uint32 httpHeaderCount = 24;
  bool has_httpheadercount() const;
  private:
  bool _internal_has_httpheadercount() const;
  public:
  void clear_httpheadercount();
  uint32_t httpheadercount() const;
  void set_httpheadercount(uint32_t value);
  private:
  uint32_t _internal_httpheadercount() const;
  void _internal_set_httpheadercount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetA8KeyResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BizScopeInfo > scopelist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HttpHeader > httpheader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a8key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shareurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr antispamticket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wording_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headimg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr menuwording_;
    ::BaseResponse* baseresponse_;
    ::JSAPIPermissionBitSet* jsapipermission_;
    ::GeneralControlBitSet* generalcontrolbitset_;
    ::DeepLinkBitSet* deeplinkbitset_;
    ::SKBuiltinBuffer_t* jsapicontrolbytes_;
    ::SKBuiltinBuffer_t* cookie_;
    ::SKBuiltinBuffer_t* verifyprefetchinfo_;
    ::SKBuiltinBuffer_t* webcomponentinfo_;
    uint32_t actioncode_;
    uint32_t scopecount_;
    uint32_t httpheadercount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_A8Key_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetA8KeyResp

// required .BaseResponse baseResponse = 1;
inline bool GetA8KeyResp::_internal_has_baseresponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.baseresponse_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_baseresponse() const {
  return _internal_has_baseresponse();
}
inline const ::BaseResponse& GetA8KeyResp::_internal_baseresponse() const {
  const ::BaseResponse* p = _impl_.baseresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::BaseResponse&>(
      ::_BaseResponse_default_instance_);
}
inline const ::BaseResponse& GetA8KeyResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.baseResponse)
  return _internal_baseresponse();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_baseresponse(
    ::BaseResponse* baseresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseresponse_);
  }
  _impl_.baseresponse_ = baseresponse;
  if (baseresponse) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.baseResponse)
}
inline ::BaseResponse* GetA8KeyResp::release_baseresponse() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BaseResponse* GetA8KeyResp::unsafe_arena_release_baseresponse() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.baseResponse)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
  return temp;
}
inline ::BaseResponse* GetA8KeyResp::_internal_mutable_baseresponse() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.baseresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseResponse>(GetArenaForAllocation());
    _impl_.baseresponse_ = p;
  }
  return _impl_.baseresponse_;
}
inline ::BaseResponse* GetA8KeyResp::mutable_baseresponse() {
  ::BaseResponse* _msg = _internal_mutable_baseresponse();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.baseResponse)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_baseresponse(::BaseResponse* baseresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseresponse_);
  }
  if (baseresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseresponse));
    if (message_arena != submessage_arena) {
      baseresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseresponse, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.baseresponse_ = baseresponse;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.baseResponse)
}

// optional string fullUrl = 2;
inline bool GetA8KeyResp::_internal_has_fullurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_fullurl() const {
  return _internal_has_fullurl();
}
inline void GetA8KeyResp::clear_fullurl() {
  _impl_.fullurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetA8KeyResp::fullurl() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.fullUrl)
  return _internal_fullurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_fullurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.fullurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.fullUrl)
}
inline std::string* GetA8KeyResp::mutable_fullurl() {
  std::string* _s = _internal_mutable_fullurl();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.fullUrl)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_fullurl() const {
  return _impl_.fullurl_.Get();
}
inline void GetA8KeyResp::_internal_set_fullurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fullurl_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_fullurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.fullurl_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_fullurl() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.fullUrl)
  if (!_internal_has_fullurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.fullurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fullurl_.IsDefault()) {
    _impl_.fullurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_fullurl(std::string* fullurl) {
  if (fullurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fullurl_.SetAllocated(fullurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fullurl_.IsDefault()) {
    _impl_.fullurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.fullUrl)
}

// optional string a8Key = 3;
inline bool GetA8KeyResp::_internal_has_a8key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_a8key() const {
  return _internal_has_a8key();
}
inline void GetA8KeyResp::clear_a8key() {
  _impl_.a8key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetA8KeyResp::a8key() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.a8Key)
  return _internal_a8key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_a8key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.a8key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.a8Key)
}
inline std::string* GetA8KeyResp::mutable_a8key() {
  std::string* _s = _internal_mutable_a8key();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.a8Key)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_a8key() const {
  return _impl_.a8key_.Get();
}
inline void GetA8KeyResp::_internal_set_a8key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.a8key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_a8key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.a8key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_a8key() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.a8Key)
  if (!_internal_has_a8key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.a8key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a8key_.IsDefault()) {
    _impl_.a8key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_a8key(std::string* a8key) {
  if (a8key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.a8key_.SetAllocated(a8key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a8key_.IsDefault()) {
    _impl_.a8key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.a8Key)
}

// optional uint32 actionCode = 4;
inline bool GetA8KeyResp::_internal_has_actioncode() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_actioncode() const {
  return _internal_has_actioncode();
}
inline void GetA8KeyResp::clear_actioncode() {
  _impl_.actioncode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t GetA8KeyResp::_internal_actioncode() const {
  return _impl_.actioncode_;
}
inline uint32_t GetA8KeyResp::actioncode() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.actionCode)
  return _internal_actioncode();
}
inline void GetA8KeyResp::_internal_set_actioncode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.actioncode_ = value;
}
inline void GetA8KeyResp::set_actioncode(uint32_t value) {
  _internal_set_actioncode(value);
  // @@protoc_insertion_point(field_set:GetA8KeyResp.actionCode)
}

// optional string title = 5;
inline bool GetA8KeyResp::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_title() const {
  return _internal_has_title();
}
inline void GetA8KeyResp::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetA8KeyResp::title() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.title)
}
inline std::string* GetA8KeyResp::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.title)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_title() const {
  return _impl_.title_.Get();
}
inline void GetA8KeyResp::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_title() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.title)
}

// optional string content = 6;
inline bool GetA8KeyResp::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_content() const {
  return _internal_has_content();
}
inline void GetA8KeyResp::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GetA8KeyResp::content() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.content)
}
inline std::string* GetA8KeyResp::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.content)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GetA8KeyResp::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_content() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.content)
}

// optional .JSAPIPermissionBitSet jsapipermission = 7;
inline bool GetA8KeyResp::_internal_has_jsapipermission() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.jsapipermission_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_jsapipermission() const {
  return _internal_has_jsapipermission();
}
inline const ::JSAPIPermissionBitSet& GetA8KeyResp::_internal_jsapipermission() const {
  const ::JSAPIPermissionBitSet* p = _impl_.jsapipermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSAPIPermissionBitSet&>(
      ::_JSAPIPermissionBitSet_default_instance_);
}
inline const ::JSAPIPermissionBitSet& GetA8KeyResp::jsapipermission() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.jsapipermission)
  return _internal_jsapipermission();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_jsapipermission(
    ::JSAPIPermissionBitSet* jsapipermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jsapipermission_);
  }
  _impl_.jsapipermission_ = jsapipermission;
  if (jsapipermission) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.jsapipermission)
}
inline ::JSAPIPermissionBitSet* GetA8KeyResp::release_jsapipermission() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::JSAPIPermissionBitSet* temp = _impl_.jsapipermission_;
  _impl_.jsapipermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JSAPIPermissionBitSet* GetA8KeyResp::unsafe_arena_release_jsapipermission() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.jsapipermission)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::JSAPIPermissionBitSet* temp = _impl_.jsapipermission_;
  _impl_.jsapipermission_ = nullptr;
  return temp;
}
inline ::JSAPIPermissionBitSet* GetA8KeyResp::_internal_mutable_jsapipermission() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.jsapipermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSAPIPermissionBitSet>(GetArenaForAllocation());
    _impl_.jsapipermission_ = p;
  }
  return _impl_.jsapipermission_;
}
inline ::JSAPIPermissionBitSet* GetA8KeyResp::mutable_jsapipermission() {
  ::JSAPIPermissionBitSet* _msg = _internal_mutable_jsapipermission();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.jsapipermission)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_jsapipermission(::JSAPIPermissionBitSet* jsapipermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jsapipermission_);
  }
  if (jsapipermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jsapipermission));
    if (message_arena != submessage_arena) {
      jsapipermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jsapipermission, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.jsapipermission_ = jsapipermission;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.jsapipermission)
}

// optional .GeneralControlBitSet generalControlBitSet = 8;
inline bool GetA8KeyResp::_internal_has_generalcontrolbitset() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generalcontrolbitset_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_generalcontrolbitset() const {
  return _internal_has_generalcontrolbitset();
}
inline const ::GeneralControlBitSet& GetA8KeyResp::_internal_generalcontrolbitset() const {
  const ::GeneralControlBitSet* p = _impl_.generalcontrolbitset_;
  return p != nullptr ? *p : reinterpret_cast<const ::GeneralControlBitSet&>(
      ::_GeneralControlBitSet_default_instance_);
}
inline const ::GeneralControlBitSet& GetA8KeyResp::generalcontrolbitset() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.generalControlBitSet)
  return _internal_generalcontrolbitset();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_generalcontrolbitset(
    ::GeneralControlBitSet* generalcontrolbitset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generalcontrolbitset_);
  }
  _impl_.generalcontrolbitset_ = generalcontrolbitset;
  if (generalcontrolbitset) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.generalControlBitSet)
}
inline ::GeneralControlBitSet* GetA8KeyResp::release_generalcontrolbitset() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::GeneralControlBitSet* temp = _impl_.generalcontrolbitset_;
  _impl_.generalcontrolbitset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GeneralControlBitSet* GetA8KeyResp::unsafe_arena_release_generalcontrolbitset() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.generalControlBitSet)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::GeneralControlBitSet* temp = _impl_.generalcontrolbitset_;
  _impl_.generalcontrolbitset_ = nullptr;
  return temp;
}
inline ::GeneralControlBitSet* GetA8KeyResp::_internal_mutable_generalcontrolbitset() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.generalcontrolbitset_ == nullptr) {
    auto* p = CreateMaybeMessage<::GeneralControlBitSet>(GetArenaForAllocation());
    _impl_.generalcontrolbitset_ = p;
  }
  return _impl_.generalcontrolbitset_;
}
inline ::GeneralControlBitSet* GetA8KeyResp::mutable_generalcontrolbitset() {
  ::GeneralControlBitSet* _msg = _internal_mutable_generalcontrolbitset();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.generalControlBitSet)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_generalcontrolbitset(::GeneralControlBitSet* generalcontrolbitset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generalcontrolbitset_);
  }
  if (generalcontrolbitset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generalcontrolbitset));
    if (message_arena != submessage_arena) {
      generalcontrolbitset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalcontrolbitset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.generalcontrolbitset_ = generalcontrolbitset;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.generalControlBitSet)
}

// optional string userName = 9;
inline bool GetA8KeyResp::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_username() const {
  return _internal_has_username();
}
inline void GetA8KeyResp::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GetA8KeyResp::username() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.userName)
}
inline std::string* GetA8KeyResp::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.userName)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_username() const {
  return _impl_.username_.Get();
}
inline void GetA8KeyResp::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_username() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.userName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.userName)
}

// optional string shareUrl = 15;
inline bool GetA8KeyResp::_internal_has_shareurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_shareurl() const {
  return _internal_has_shareurl();
}
inline void GetA8KeyResp::clear_shareurl() {
  _impl_.shareurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& GetA8KeyResp::shareurl() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.shareUrl)
  return _internal_shareurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_shareurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.shareurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.shareUrl)
}
inline std::string* GetA8KeyResp::mutable_shareurl() {
  std::string* _s = _internal_mutable_shareurl();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.shareUrl)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_shareurl() const {
  return _impl_.shareurl_.Get();
}
inline void GetA8KeyResp::_internal_set_shareurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.shareurl_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_shareurl() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.shareurl_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_shareurl() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.shareUrl)
  if (!_internal_has_shareurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.shareurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shareurl_.IsDefault()) {
    _impl_.shareurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_shareurl(std::string* shareurl) {
  if (shareurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.shareurl_.SetAllocated(shareurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shareurl_.IsDefault()) {
    _impl_.shareurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.shareUrl)
}

// optional uint32 scopeCount = 16;
inline bool GetA8KeyResp::_internal_has_scopecount() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_scopecount() const {
  return _internal_has_scopecount();
}
inline void GetA8KeyResp::clear_scopecount() {
  _impl_.scopecount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t GetA8KeyResp::_internal_scopecount() const {
  return _impl_.scopecount_;
}
inline uint32_t GetA8KeyResp::scopecount() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.scopeCount)
  return _internal_scopecount();
}
inline void GetA8KeyResp::_internal_set_scopecount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.scopecount_ = value;
}
inline void GetA8KeyResp::set_scopecount(uint32_t value) {
  _internal_set_scopecount(value);
  // @@protoc_insertion_point(field_set:GetA8KeyResp.scopeCount)
}

// repeated .BizScopeInfo scopeList = 17;
inline int GetA8KeyResp::_internal_scopelist_size() const {
  return _impl_.scopelist_.size();
}
inline int GetA8KeyResp::scopelist_size() const {
  return _internal_scopelist_size();
}
inline ::BizScopeInfo* GetA8KeyResp::mutable_scopelist(int index) {
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.scopeList)
  return _impl_.scopelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BizScopeInfo >*
GetA8KeyResp::mutable_scopelist() {
  // @@protoc_insertion_point(field_mutable_list:GetA8KeyResp.scopeList)
  return &_impl_.scopelist_;
}
inline const ::BizScopeInfo& GetA8KeyResp::_internal_scopelist(int index) const {
  return _impl_.scopelist_.Get(index);
}
inline const ::BizScopeInfo& GetA8KeyResp::scopelist(int index) const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.scopeList)
  return _internal_scopelist(index);
}
inline ::BizScopeInfo* GetA8KeyResp::_internal_add_scopelist() {
  return _impl_.scopelist_.Add();
}
inline ::BizScopeInfo* GetA8KeyResp::add_scopelist() {
  ::BizScopeInfo* _add = _internal_add_scopelist();
  // @@protoc_insertion_point(field_add:GetA8KeyResp.scopeList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BizScopeInfo >&
GetA8KeyResp::scopelist() const {
  // @@protoc_insertion_point(field_list:GetA8KeyResp.scopeList)
  return _impl_.scopelist_;
}

// optional string antispamTicket = 18;
inline bool GetA8KeyResp::_internal_has_antispamticket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_antispamticket() const {
  return _internal_has_antispamticket();
}
inline void GetA8KeyResp::clear_antispamticket() {
  _impl_.antispamticket_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& GetA8KeyResp::antispamticket() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.antispamTicket)
  return _internal_antispamticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_antispamticket(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.antispamticket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.antispamTicket)
}
inline std::string* GetA8KeyResp::mutable_antispamticket() {
  std::string* _s = _internal_mutable_antispamticket();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.antispamTicket)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_antispamticket() const {
  return _impl_.antispamticket_.Get();
}
inline void GetA8KeyResp::_internal_set_antispamticket(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.antispamticket_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_antispamticket() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.antispamticket_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_antispamticket() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.antispamTicket)
  if (!_internal_has_antispamticket()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.antispamticket_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.antispamticket_.IsDefault()) {
    _impl_.antispamticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_antispamticket(std::string* antispamticket) {
  if (antispamticket != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.antispamticket_.SetAllocated(antispamticket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.antispamticket_.IsDefault()) {
    _impl_.antispamticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.antispamTicket)
}

// optional string ssid = 20;
inline bool GetA8KeyResp::_internal_has_ssid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_ssid() const {
  return _internal_has_ssid();
}
inline void GetA8KeyResp::clear_ssid() {
  _impl_.ssid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& GetA8KeyResp::ssid() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_ssid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.ssid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.ssid)
}
inline std::string* GetA8KeyResp::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.ssid)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_ssid() const {
  return _impl_.ssid_.Get();
}
inline void GetA8KeyResp::_internal_set_ssid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_ssid() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_ssid() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.ssid)
  if (!_internal_has_ssid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.ssid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssid_.IsDefault()) {
    _impl_.ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssid_.IsDefault()) {
    _impl_.ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.ssid)
}

// optional string mid = 21;
inline bool GetA8KeyResp::_internal_has_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_mid() const {
  return _internal_has_mid();
}
inline void GetA8KeyResp::clear_mid() {
  _impl_.mid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& GetA8KeyResp::mid() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.mid)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_mid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.mid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.mid)
}
inline std::string* GetA8KeyResp::mutable_mid() {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.mid)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_mid() const {
  return _impl_.mid_.Get();
}
inline void GetA8KeyResp::_internal_set_mid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.mid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_mid() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.mid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_mid() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.mid)
  if (!_internal_has_mid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.mid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.mid_.SetAllocated(mid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.mid)
}

// optional .DeepLinkBitSet deepLinkBitSet = 22;
inline bool GetA8KeyResp::_internal_has_deeplinkbitset() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deeplinkbitset_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_deeplinkbitset() const {
  return _internal_has_deeplinkbitset();
}
inline const ::DeepLinkBitSet& GetA8KeyResp::_internal_deeplinkbitset() const {
  const ::DeepLinkBitSet* p = _impl_.deeplinkbitset_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeepLinkBitSet&>(
      ::_DeepLinkBitSet_default_instance_);
}
inline const ::DeepLinkBitSet& GetA8KeyResp::deeplinkbitset() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.deepLinkBitSet)
  return _internal_deeplinkbitset();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_deeplinkbitset(
    ::DeepLinkBitSet* deeplinkbitset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deeplinkbitset_);
  }
  _impl_.deeplinkbitset_ = deeplinkbitset;
  if (deeplinkbitset) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.deepLinkBitSet)
}
inline ::DeepLinkBitSet* GetA8KeyResp::release_deeplinkbitset() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::DeepLinkBitSet* temp = _impl_.deeplinkbitset_;
  _impl_.deeplinkbitset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeepLinkBitSet* GetA8KeyResp::unsafe_arena_release_deeplinkbitset() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.deepLinkBitSet)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::DeepLinkBitSet* temp = _impl_.deeplinkbitset_;
  _impl_.deeplinkbitset_ = nullptr;
  return temp;
}
inline ::DeepLinkBitSet* GetA8KeyResp::_internal_mutable_deeplinkbitset() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.deeplinkbitset_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeepLinkBitSet>(GetArenaForAllocation());
    _impl_.deeplinkbitset_ = p;
  }
  return _impl_.deeplinkbitset_;
}
inline ::DeepLinkBitSet* GetA8KeyResp::mutable_deeplinkbitset() {
  ::DeepLinkBitSet* _msg = _internal_mutable_deeplinkbitset();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.deepLinkBitSet)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_deeplinkbitset(::DeepLinkBitSet* deeplinkbitset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deeplinkbitset_);
  }
  if (deeplinkbitset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deeplinkbitset));
    if (message_arena != submessage_arena) {
      deeplinkbitset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deeplinkbitset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.deeplinkbitset_ = deeplinkbitset;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.deepLinkBitSet)
}

// optional .SKBuiltinBuffer_t jsapicontrolBytes = 23;
inline bool GetA8KeyResp::_internal_has_jsapicontrolbytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.jsapicontrolbytes_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_jsapicontrolbytes() const {
  return _internal_has_jsapicontrolbytes();
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::_internal_jsapicontrolbytes() const {
  const ::SKBuiltinBuffer_t* p = _impl_.jsapicontrolbytes_;
  return p != nullptr ? *p : reinterpret_cast<const ::SKBuiltinBuffer_t&>(
      ::_SKBuiltinBuffer_t_default_instance_);
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::jsapicontrolbytes() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.jsapicontrolBytes)
  return _internal_jsapicontrolbytes();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_jsapicontrolbytes(
    ::SKBuiltinBuffer_t* jsapicontrolbytes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jsapicontrolbytes_);
  }
  _impl_.jsapicontrolbytes_ = jsapicontrolbytes;
  if (jsapicontrolbytes) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.jsapicontrolBytes)
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::release_jsapicontrolbytes() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::SKBuiltinBuffer_t* temp = _impl_.jsapicontrolbytes_;
  _impl_.jsapicontrolbytes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::unsafe_arena_release_jsapicontrolbytes() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.jsapicontrolBytes)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::SKBuiltinBuffer_t* temp = _impl_.jsapicontrolbytes_;
  _impl_.jsapicontrolbytes_ = nullptr;
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::_internal_mutable_jsapicontrolbytes() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.jsapicontrolbytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::SKBuiltinBuffer_t>(GetArenaForAllocation());
    _impl_.jsapicontrolbytes_ = p;
  }
  return _impl_.jsapicontrolbytes_;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::mutable_jsapicontrolbytes() {
  ::SKBuiltinBuffer_t* _msg = _internal_mutable_jsapicontrolbytes();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.jsapicontrolBytes)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_jsapicontrolbytes(::SKBuiltinBuffer_t* jsapicontrolbytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jsapicontrolbytes_);
  }
  if (jsapicontrolbytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jsapicontrolbytes));
    if (message_arena != submessage_arena) {
      jsapicontrolbytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jsapicontrolbytes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.jsapicontrolbytes_ = jsapicontrolbytes;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.jsapicontrolBytes)
}

// optional uint32 httpHeaderCount = 24;
inline bool GetA8KeyResp::_internal_has_httpheadercount() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_httpheadercount() const {
  return _internal_has_httpheadercount();
}
inline void GetA8KeyResp::clear_httpheadercount() {
  _impl_.httpheadercount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t GetA8KeyResp::_internal_httpheadercount() const {
  return _impl_.httpheadercount_;
}
inline uint32_t GetA8KeyResp::httpheadercount() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.httpHeaderCount)
  return _internal_httpheadercount();
}
inline void GetA8KeyResp::_internal_set_httpheadercount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.httpheadercount_ = value;
}
inline void GetA8KeyResp::set_httpheadercount(uint32_t value) {
  _internal_set_httpheadercount(value);
  // @@protoc_insertion_point(field_set:GetA8KeyResp.httpHeaderCount)
}

// repeated .HttpHeader httpHeader = 25;
inline int GetA8KeyResp::_internal_httpheader_size() const {
  return _impl_.httpheader_.size();
}
inline int GetA8KeyResp::httpheader_size() const {
  return _internal_httpheader_size();
}
inline ::HttpHeader* GetA8KeyResp::mutable_httpheader(int index) {
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.httpHeader)
  return _impl_.httpheader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HttpHeader >*
GetA8KeyResp::mutable_httpheader() {
  // @@protoc_insertion_point(field_mutable_list:GetA8KeyResp.httpHeader)
  return &_impl_.httpheader_;
}
inline const ::HttpHeader& GetA8KeyResp::_internal_httpheader(int index) const {
  return _impl_.httpheader_.Get(index);
}
inline const ::HttpHeader& GetA8KeyResp::httpheader(int index) const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.httpHeader)
  return _internal_httpheader(index);
}
inline ::HttpHeader* GetA8KeyResp::_internal_add_httpheader() {
  return _impl_.httpheader_.Add();
}
inline ::HttpHeader* GetA8KeyResp::add_httpheader() {
  ::HttpHeader* _add = _internal_add_httpheader();
  // @@protoc_insertion_point(field_add:GetA8KeyResp.httpHeader)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HttpHeader >&
GetA8KeyResp::httpheader() const {
  // @@protoc_insertion_point(field_list:GetA8KeyResp.httpHeader)
  return _impl_.httpheader_;
}

// optional string wording = 26;
inline bool GetA8KeyResp::_internal_has_wording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_wording() const {
  return _internal_has_wording();
}
inline void GetA8KeyResp::clear_wording() {
  _impl_.wording_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& GetA8KeyResp::wording() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.wording)
  return _internal_wording();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_wording(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.wording_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.wording)
}
inline std::string* GetA8KeyResp::mutable_wording() {
  std::string* _s = _internal_mutable_wording();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.wording)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_wording() const {
  return _impl_.wording_.Get();
}
inline void GetA8KeyResp::_internal_set_wording(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.wording_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_wording() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.wording_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_wording() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.wording)
  if (!_internal_has_wording()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.wording_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wording_.IsDefault()) {
    _impl_.wording_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_wording(std::string* wording) {
  if (wording != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.wording_.SetAllocated(wording, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wording_.IsDefault()) {
    _impl_.wording_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.wording)
}

// optional string headImg = 27;
inline bool GetA8KeyResp::_internal_has_headimg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_headimg() const {
  return _internal_has_headimg();
}
inline void GetA8KeyResp::clear_headimg() {
  _impl_.headimg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& GetA8KeyResp::headimg() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.headImg)
  return _internal_headimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_headimg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000400u;
 _impl_.headimg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.headImg)
}
inline std::string* GetA8KeyResp::mutable_headimg() {
  std::string* _s = _internal_mutable_headimg();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.headImg)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_headimg() const {
  return _impl_.headimg_.Get();
}
inline void GetA8KeyResp::_internal_set_headimg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.headimg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_headimg() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.headimg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_headimg() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.headImg)
  if (!_internal_has_headimg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* p = _impl_.headimg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headimg_.IsDefault()) {
    _impl_.headimg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_headimg(std::string* headimg) {
  if (headimg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.headimg_.SetAllocated(headimg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headimg_.IsDefault()) {
    _impl_.headimg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.headImg)
}

// optional .SKBuiltinBuffer_t cookie = 28;
inline bool GetA8KeyResp::_internal_has_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cookie_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_cookie() const {
  return _internal_has_cookie();
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::_internal_cookie() const {
  const ::SKBuiltinBuffer_t* p = _impl_.cookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::SKBuiltinBuffer_t&>(
      ::_SKBuiltinBuffer_t_default_instance_);
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::cookie() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.cookie)
  return _internal_cookie();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_cookie(
    ::SKBuiltinBuffer_t* cookie) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cookie_);
  }
  _impl_.cookie_ = cookie;
  if (cookie) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.cookie)
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::release_cookie() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::SKBuiltinBuffer_t* temp = _impl_.cookie_;
  _impl_.cookie_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::unsafe_arena_release_cookie() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.cookie)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::SKBuiltinBuffer_t* temp = _impl_.cookie_;
  _impl_.cookie_ = nullptr;
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::_internal_mutable_cookie() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.cookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::SKBuiltinBuffer_t>(GetArenaForAllocation());
    _impl_.cookie_ = p;
  }
  return _impl_.cookie_;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::mutable_cookie() {
  ::SKBuiltinBuffer_t* _msg = _internal_mutable_cookie();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.cookie)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_cookie(::SKBuiltinBuffer_t* cookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cookie_);
  }
  if (cookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cookie));
    if (message_arena != submessage_arena) {
      cookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cookie, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.cookie_ = cookie;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.cookie)
}

// optional string menuWording = 29;
inline bool GetA8KeyResp::_internal_has_menuwording() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GetA8KeyResp::has_menuwording() const {
  return _internal_has_menuwording();
}
inline void GetA8KeyResp::clear_menuwording() {
  _impl_.menuwording_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& GetA8KeyResp::menuwording() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.menuWording)
  return _internal_menuwording();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetA8KeyResp::set_menuwording(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000800u;
 _impl_.menuwording_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetA8KeyResp.menuWording)
}
inline std::string* GetA8KeyResp::mutable_menuwording() {
  std::string* _s = _internal_mutable_menuwording();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.menuWording)
  return _s;
}
inline const std::string& GetA8KeyResp::_internal_menuwording() const {
  return _impl_.menuwording_.Get();
}
inline void GetA8KeyResp::_internal_set_menuwording(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.menuwording_.Set(value, GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::_internal_mutable_menuwording() {
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.menuwording_.Mutable(GetArenaForAllocation());
}
inline std::string* GetA8KeyResp::release_menuwording() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.menuWording)
  if (!_internal_has_menuwording()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* p = _impl_.menuwording_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.menuwording_.IsDefault()) {
    _impl_.menuwording_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetA8KeyResp::set_allocated_menuwording(std::string* menuwording) {
  if (menuwording != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.menuwording_.SetAllocated(menuwording, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.menuwording_.IsDefault()) {
    _impl_.menuwording_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.menuWording)
}

// optional .SKBuiltinBuffer_t verifyPrefetchInfo = 30;
inline bool GetA8KeyResp::_internal_has_verifyprefetchinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verifyprefetchinfo_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_verifyprefetchinfo() const {
  return _internal_has_verifyprefetchinfo();
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::_internal_verifyprefetchinfo() const {
  const ::SKBuiltinBuffer_t* p = _impl_.verifyprefetchinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SKBuiltinBuffer_t&>(
      ::_SKBuiltinBuffer_t_default_instance_);
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::verifyprefetchinfo() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.verifyPrefetchInfo)
  return _internal_verifyprefetchinfo();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_verifyprefetchinfo(
    ::SKBuiltinBuffer_t* verifyprefetchinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyprefetchinfo_);
  }
  _impl_.verifyprefetchinfo_ = verifyprefetchinfo;
  if (verifyprefetchinfo) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.verifyPrefetchInfo)
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::release_verifyprefetchinfo() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::SKBuiltinBuffer_t* temp = _impl_.verifyprefetchinfo_;
  _impl_.verifyprefetchinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::unsafe_arena_release_verifyprefetchinfo() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.verifyPrefetchInfo)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::SKBuiltinBuffer_t* temp = _impl_.verifyprefetchinfo_;
  _impl_.verifyprefetchinfo_ = nullptr;
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::_internal_mutable_verifyprefetchinfo() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.verifyprefetchinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SKBuiltinBuffer_t>(GetArenaForAllocation());
    _impl_.verifyprefetchinfo_ = p;
  }
  return _impl_.verifyprefetchinfo_;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::mutable_verifyprefetchinfo() {
  ::SKBuiltinBuffer_t* _msg = _internal_mutable_verifyprefetchinfo();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.verifyPrefetchInfo)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_verifyprefetchinfo(::SKBuiltinBuffer_t* verifyprefetchinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyprefetchinfo_);
  }
  if (verifyprefetchinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verifyprefetchinfo));
    if (message_arena != submessage_arena) {
      verifyprefetchinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verifyprefetchinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.verifyprefetchinfo_ = verifyprefetchinfo;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.verifyPrefetchInfo)
}

// optional .SKBuiltinBuffer_t webComponentInfo = 31;
inline bool GetA8KeyResp::_internal_has_webcomponentinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.webcomponentinfo_ != nullptr);
  return value;
}
inline bool GetA8KeyResp::has_webcomponentinfo() const {
  return _internal_has_webcomponentinfo();
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::_internal_webcomponentinfo() const {
  const ::SKBuiltinBuffer_t* p = _impl_.webcomponentinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SKBuiltinBuffer_t&>(
      ::_SKBuiltinBuffer_t_default_instance_);
}
inline const ::SKBuiltinBuffer_t& GetA8KeyResp::webcomponentinfo() const {
  // @@protoc_insertion_point(field_get:GetA8KeyResp.webComponentInfo)
  return _internal_webcomponentinfo();
}
inline void GetA8KeyResp::unsafe_arena_set_allocated_webcomponentinfo(
    ::SKBuiltinBuffer_t* webcomponentinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.webcomponentinfo_);
  }
  _impl_.webcomponentinfo_ = webcomponentinfo;
  if (webcomponentinfo) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetA8KeyResp.webComponentInfo)
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::release_webcomponentinfo() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::SKBuiltinBuffer_t* temp = _impl_.webcomponentinfo_;
  _impl_.webcomponentinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::unsafe_arena_release_webcomponentinfo() {
  // @@protoc_insertion_point(field_release:GetA8KeyResp.webComponentInfo)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::SKBuiltinBuffer_t* temp = _impl_.webcomponentinfo_;
  _impl_.webcomponentinfo_ = nullptr;
  return temp;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::_internal_mutable_webcomponentinfo() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.webcomponentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SKBuiltinBuffer_t>(GetArenaForAllocation());
    _impl_.webcomponentinfo_ = p;
  }
  return _impl_.webcomponentinfo_;
}
inline ::SKBuiltinBuffer_t* GetA8KeyResp::mutable_webcomponentinfo() {
  ::SKBuiltinBuffer_t* _msg = _internal_mutable_webcomponentinfo();
  // @@protoc_insertion_point(field_mutable:GetA8KeyResp.webComponentInfo)
  return _msg;
}
inline void GetA8KeyResp::set_allocated_webcomponentinfo(::SKBuiltinBuffer_t* webcomponentinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.webcomponentinfo_);
  }
  if (webcomponentinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webcomponentinfo));
    if (message_arena != submessage_arena) {
      webcomponentinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webcomponentinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.webcomponentinfo_ = webcomponentinfo;
  // @@protoc_insertion_point(field_set_allocated:GetA8KeyResp.webComponentInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_A8Key_2eproto
