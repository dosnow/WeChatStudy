// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A8Key.proto

#include "A8Key.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GetA8KeyResp::GetA8KeyResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scopelist_)*/{}
  , /*decltype(_impl_.httpheader_)*/{}
  , /*decltype(_impl_.fullurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.a8key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shareurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.antispamticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ssid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wording_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.headimg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.menuwording_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baseresponse_)*/nullptr
  , /*decltype(_impl_.jsapipermission_)*/nullptr
  , /*decltype(_impl_.generalcontrolbitset_)*/nullptr
  , /*decltype(_impl_.deeplinkbitset_)*/nullptr
  , /*decltype(_impl_.jsapicontrolbytes_)*/nullptr
  , /*decltype(_impl_.cookie_)*/nullptr
  , /*decltype(_impl_.verifyprefetchinfo_)*/nullptr
  , /*decltype(_impl_.webcomponentinfo_)*/nullptr
  , /*decltype(_impl_.actioncode_)*/0u
  , /*decltype(_impl_.scopecount_)*/0u
  , /*decltype(_impl_.httpheadercount_)*/0u} {}
struct GetA8KeyRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetA8KeyRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetA8KeyRespDefaultTypeInternal() {}
  union {
    GetA8KeyResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetA8KeyRespDefaultTypeInternal _GetA8KeyResp_default_instance_;

// ===================================================================

class GetA8KeyResp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetA8KeyResp>()._impl_._has_bits_);
  static const ::BaseResponse& baseresponse(const GetA8KeyResp* msg);
  static void set_has_baseresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fullurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a8key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_actioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::JSAPIPermissionBitSet& jsapipermission(const GetA8KeyResp* msg);
  static void set_has_jsapipermission(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::GeneralControlBitSet& generalcontrolbitset(const GetA8KeyResp* msg);
  static void set_has_generalcontrolbitset(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shareurl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scopecount(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_antispamticket(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ssid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::DeepLinkBitSet& deeplinkbitset(const GetA8KeyResp* msg);
  static void set_has_deeplinkbitset(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::SKBuiltinBuffer_t& jsapicontrolbytes(const GetA8KeyResp* msg);
  static void set_has_jsapicontrolbytes(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_httpheadercount(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_wording(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_headimg(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::SKBuiltinBuffer_t& cookie(const GetA8KeyResp* msg);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_menuwording(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::SKBuiltinBuffer_t& verifyprefetchinfo(const GetA8KeyResp* msg);
  static void set_has_verifyprefetchinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::SKBuiltinBuffer_t& webcomponentinfo(const GetA8KeyResp* msg);
  static void set_has_webcomponentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001000) ^ 0x00001000) != 0;
  }
};

const ::BaseResponse&
GetA8KeyResp::_Internal::baseresponse(const GetA8KeyResp* msg) {
  return *msg->_impl_.baseresponse_;
}
const ::JSAPIPermissionBitSet&
GetA8KeyResp::_Internal::jsapipermission(const GetA8KeyResp* msg) {
  return *msg->_impl_.jsapipermission_;
}
const ::GeneralControlBitSet&
GetA8KeyResp::_Internal::generalcontrolbitset(const GetA8KeyResp* msg) {
  return *msg->_impl_.generalcontrolbitset_;
}
const ::DeepLinkBitSet&
GetA8KeyResp::_Internal::deeplinkbitset(const GetA8KeyResp* msg) {
  return *msg->_impl_.deeplinkbitset_;
}
const ::SKBuiltinBuffer_t&
GetA8KeyResp::_Internal::jsapicontrolbytes(const GetA8KeyResp* msg) {
  return *msg->_impl_.jsapicontrolbytes_;
}
const ::SKBuiltinBuffer_t&
GetA8KeyResp::_Internal::cookie(const GetA8KeyResp* msg) {
  return *msg->_impl_.cookie_;
}
const ::SKBuiltinBuffer_t&
GetA8KeyResp::_Internal::verifyprefetchinfo(const GetA8KeyResp* msg) {
  return *msg->_impl_.verifyprefetchinfo_;
}
const ::SKBuiltinBuffer_t&
GetA8KeyResp::_Internal::webcomponentinfo(const GetA8KeyResp* msg) {
  return *msg->_impl_.webcomponentinfo_;
}
void GetA8KeyResp::clear_baseresponse() {
  if (_impl_.baseresponse_ != nullptr) _impl_.baseresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void GetA8KeyResp::clear_jsapipermission() {
  if (_impl_.jsapipermission_ != nullptr) _impl_.jsapipermission_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void GetA8KeyResp::clear_generalcontrolbitset() {
  if (_impl_.generalcontrolbitset_ != nullptr) _impl_.generalcontrolbitset_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void GetA8KeyResp::clear_scopelist() {
  _impl_.scopelist_.Clear();
}
void GetA8KeyResp::clear_deeplinkbitset() {
  if (_impl_.deeplinkbitset_ != nullptr) _impl_.deeplinkbitset_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void GetA8KeyResp::clear_jsapicontrolbytes() {
  if (_impl_.jsapicontrolbytes_ != nullptr) _impl_.jsapicontrolbytes_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void GetA8KeyResp::clear_httpheader() {
  _impl_.httpheader_.Clear();
}
void GetA8KeyResp::clear_cookie() {
  if (_impl_.cookie_ != nullptr) _impl_.cookie_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void GetA8KeyResp::clear_verifyprefetchinfo() {
  if (_impl_.verifyprefetchinfo_ != nullptr) _impl_.verifyprefetchinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void GetA8KeyResp::clear_webcomponentinfo() {
  if (_impl_.webcomponentinfo_ != nullptr) _impl_.webcomponentinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
GetA8KeyResp::GetA8KeyResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetA8KeyResp)
}
GetA8KeyResp::GetA8KeyResp(const GetA8KeyResp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetA8KeyResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scopelist_){from._impl_.scopelist_}
    , decltype(_impl_.httpheader_){from._impl_.httpheader_}
    , decltype(_impl_.fullurl_){}
    , decltype(_impl_.a8key_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.shareurl_){}
    , decltype(_impl_.antispamticket_){}
    , decltype(_impl_.ssid_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.wording_){}
    , decltype(_impl_.headimg_){}
    , decltype(_impl_.menuwording_){}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.jsapipermission_){nullptr}
    , decltype(_impl_.generalcontrolbitset_){nullptr}
    , decltype(_impl_.deeplinkbitset_){nullptr}
    , decltype(_impl_.jsapicontrolbytes_){nullptr}
    , decltype(_impl_.cookie_){nullptr}
    , decltype(_impl_.verifyprefetchinfo_){nullptr}
    , decltype(_impl_.webcomponentinfo_){nullptr}
    , decltype(_impl_.actioncode_){}
    , decltype(_impl_.scopecount_){}
    , decltype(_impl_.httpheadercount_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.fullurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fullurl()) {
    _this->_impl_.fullurl_.Set(from._internal_fullurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.a8key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a8key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_a8key()) {
    _this->_impl_.a8key_.Set(from._internal_a8key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shareurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shareurl()) {
    _this->_impl_.shareurl_.Set(from._internal_shareurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.antispamticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.antispamticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_antispamticket()) {
    _this->_impl_.antispamticket_.Set(from._internal_antispamticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ssid()) {
    _this->_impl_.ssid_.Set(from._internal_ssid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mid()) {
    _this->_impl_.mid_.Set(from._internal_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wording_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wording_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wording()) {
    _this->_impl_.wording_.Set(from._internal_wording(), 
      _this->GetArenaForAllocation());
  }
  _impl_.headimg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.headimg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_headimg()) {
    _this->_impl_.headimg_.Set(from._internal_headimg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.menuwording_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.menuwording_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_menuwording()) {
    _this->_impl_.menuwording_.Set(from._internal_menuwording(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_baseresponse()) {
    _this->_impl_.baseresponse_ = new ::BaseResponse(*from._impl_.baseresponse_);
  }
  if (from._internal_has_jsapipermission()) {
    _this->_impl_.jsapipermission_ = new ::JSAPIPermissionBitSet(*from._impl_.jsapipermission_);
  }
  if (from._internal_has_generalcontrolbitset()) {
    _this->_impl_.generalcontrolbitset_ = new ::GeneralControlBitSet(*from._impl_.generalcontrolbitset_);
  }
  if (from._internal_has_deeplinkbitset()) {
    _this->_impl_.deeplinkbitset_ = new ::DeepLinkBitSet(*from._impl_.deeplinkbitset_);
  }
  if (from._internal_has_jsapicontrolbytes()) {
    _this->_impl_.jsapicontrolbytes_ = new ::SKBuiltinBuffer_t(*from._impl_.jsapicontrolbytes_);
  }
  if (from._internal_has_cookie()) {
    _this->_impl_.cookie_ = new ::SKBuiltinBuffer_t(*from._impl_.cookie_);
  }
  if (from._internal_has_verifyprefetchinfo()) {
    _this->_impl_.verifyprefetchinfo_ = new ::SKBuiltinBuffer_t(*from._impl_.verifyprefetchinfo_);
  }
  if (from._internal_has_webcomponentinfo()) {
    _this->_impl_.webcomponentinfo_ = new ::SKBuiltinBuffer_t(*from._impl_.webcomponentinfo_);
  }
  ::memcpy(&_impl_.actioncode_, &from._impl_.actioncode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.httpheadercount_) -
    reinterpret_cast<char*>(&_impl_.actioncode_)) + sizeof(_impl_.httpheadercount_));
  // @@protoc_insertion_point(copy_constructor:GetA8KeyResp)
}

inline void GetA8KeyResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scopelist_){arena}
    , decltype(_impl_.httpheader_){arena}
    , decltype(_impl_.fullurl_){}
    , decltype(_impl_.a8key_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.shareurl_){}
    , decltype(_impl_.antispamticket_){}
    , decltype(_impl_.ssid_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.wording_){}
    , decltype(_impl_.headimg_){}
    , decltype(_impl_.menuwording_){}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.jsapipermission_){nullptr}
    , decltype(_impl_.generalcontrolbitset_){nullptr}
    , decltype(_impl_.deeplinkbitset_){nullptr}
    , decltype(_impl_.jsapicontrolbytes_){nullptr}
    , decltype(_impl_.cookie_){nullptr}
    , decltype(_impl_.verifyprefetchinfo_){nullptr}
    , decltype(_impl_.webcomponentinfo_){nullptr}
    , decltype(_impl_.actioncode_){0u}
    , decltype(_impl_.scopecount_){0u}
    , decltype(_impl_.httpheadercount_){0u}
  };
  _impl_.fullurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.a8key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a8key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shareurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shareurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.antispamticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.antispamticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wording_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wording_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.headimg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.headimg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.menuwording_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.menuwording_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetA8KeyResp::~GetA8KeyResp() {
  // @@protoc_insertion_point(destructor:GetA8KeyResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetA8KeyResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopelist_.~RepeatedPtrField();
  _impl_.httpheader_.~RepeatedPtrField();
  _impl_.fullurl_.Destroy();
  _impl_.a8key_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_.Destroy();
  _impl_.username_.Destroy();
  _impl_.shareurl_.Destroy();
  _impl_.antispamticket_.Destroy();
  _impl_.ssid_.Destroy();
  _impl_.mid_.Destroy();
  _impl_.wording_.Destroy();
  _impl_.headimg_.Destroy();
  _impl_.menuwording_.Destroy();
  if (this != internal_default_instance()) delete _impl_.baseresponse_;
  if (this != internal_default_instance()) delete _impl_.jsapipermission_;
  if (this != internal_default_instance()) delete _impl_.generalcontrolbitset_;
  if (this != internal_default_instance()) delete _impl_.deeplinkbitset_;
  if (this != internal_default_instance()) delete _impl_.jsapicontrolbytes_;
  if (this != internal_default_instance()) delete _impl_.cookie_;
  if (this != internal_default_instance()) delete _impl_.verifyprefetchinfo_;
  if (this != internal_default_instance()) delete _impl_.webcomponentinfo_;
}

void GetA8KeyResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetA8KeyResp::Clear() {
// @@protoc_insertion_point(message_clear_start:GetA8KeyResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopelist_.Clear();
  _impl_.httpheader_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fullurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.a8key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.shareurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.antispamticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ssid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.mid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.wording_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.headimg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.menuwording_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.baseresponse_ != nullptr);
      _impl_.baseresponse_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.jsapipermission_ != nullptr);
      _impl_.jsapipermission_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.generalcontrolbitset_ != nullptr);
      _impl_.generalcontrolbitset_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.deeplinkbitset_ != nullptr);
      _impl_.deeplinkbitset_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.jsapicontrolbytes_ != nullptr);
      _impl_.jsapicontrolbytes_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.cookie_ != nullptr);
      _impl_.cookie_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.verifyprefetchinfo_ != nullptr);
      _impl_.verifyprefetchinfo_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.webcomponentinfo_ != nullptr);
      _impl_.webcomponentinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00700000u) {
    ::memset(&_impl_.actioncode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.httpheadercount_) -
        reinterpret_cast<char*>(&_impl_.actioncode_)) + sizeof(_impl_.httpheadercount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetA8KeyResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .BaseResponse baseResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fullUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fullurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string a8Key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_a8key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 actionCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_actioncode(&has_bits);
          _impl_.actioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .JSAPIPermissionBitSet jsapipermission = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_jsapipermission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GeneralControlBitSet generalControlBitSet = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_generalcontrolbitset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string userName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string shareUrl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_shareurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scopeCount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_scopecount(&has_bits);
          _impl_.scopecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .BizScopeInfo scopeList = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_scopelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string antispamTicket = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_antispamticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ssid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DeepLinkBitSet deepLinkBitSet = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_deeplinkbitset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinBuffer_t jsapicontrolBytes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_jsapicontrolbytes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 httpHeaderCount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_httpheadercount(&has_bits);
          _impl_.httpheadercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .HttpHeader httpHeader = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_httpheader(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string wording = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_wording();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string headImg = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_headimg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinBuffer_t cookie = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_cookie(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string menuWording = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_menuwording();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinBuffer_t verifyPrefetchInfo = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_verifyprefetchinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinBuffer_t webComponentInfo = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_webcomponentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetA8KeyResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetA8KeyResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .BaseResponse baseResponse = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseresponse(this),
        _Internal::baseresponse(this).GetCachedSize(), target, stream);
  }

  // optional string fullUrl = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fullurl(), target);
  }

  // optional string a8Key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_a8key(), target);
  }

  // optional uint32 actionCode = 4;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_actioncode(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional string content = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  // optional .JSAPIPermissionBitSet jsapipermission = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::jsapipermission(this),
        _Internal::jsapipermission(this).GetCachedSize(), target, stream);
  }

  // optional .GeneralControlBitSet generalControlBitSet = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::generalcontrolbitset(this),
        _Internal::generalcontrolbitset(this).GetCachedSize(), target, stream);
  }

  // optional string userName = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_username(), target);
  }

  // optional string shareUrl = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_shareurl(), target);
  }

  // optional uint32 scopeCount = 16;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_scopecount(), target);
  }

  // repeated .BizScopeInfo scopeList = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scopelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_scopelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string antispamTicket = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_antispamticket(), target);
  }

  // optional string ssid = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_ssid(), target);
  }

  // optional string mid = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_mid(), target);
  }

  // optional .DeepLinkBitSet deepLinkBitSet = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::deeplinkbitset(this),
        _Internal::deeplinkbitset(this).GetCachedSize(), target, stream);
  }

  // optional .SKBuiltinBuffer_t jsapicontrolBytes = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::jsapicontrolbytes(this),
        _Internal::jsapicontrolbytes(this).GetCachedSize(), target, stream);
  }

  // optional uint32 httpHeaderCount = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_httpheadercount(), target);
  }

  // repeated .HttpHeader httpHeader = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_httpheader_size()); i < n; i++) {
    const auto& repfield = this->_internal_httpheader(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string wording = 26;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_wording(), target);
  }

  // optional string headImg = 27;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_headimg(), target);
  }

  // optional .SKBuiltinBuffer_t cookie = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::cookie(this),
        _Internal::cookie(this).GetCachedSize(), target, stream);
  }

  // optional string menuWording = 29;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_menuwording(), target);
  }

  // optional .SKBuiltinBuffer_t verifyPrefetchInfo = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::verifyprefetchinfo(this),
        _Internal::verifyprefetchinfo(this).GetCachedSize(), target, stream);
  }

  // optional .SKBuiltinBuffer_t webComponentInfo = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::webcomponentinfo(this),
        _Internal::webcomponentinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetA8KeyResp)
  return target;
}

size_t GetA8KeyResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetA8KeyResp)
  size_t total_size = 0;

  // required .BaseResponse baseResponse = 1;
  if (_internal_has_baseresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseresponse_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BizScopeInfo scopeList = 17;
  total_size += 2UL * this->_internal_scopelist_size();
  for (const auto& msg : this->_impl_.scopelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HttpHeader httpHeader = 25;
  total_size += 2UL * this->_internal_httpheader_size();
  for (const auto& msg : this->_impl_.httpheader_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fullUrl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fullurl());
    }

    // optional string a8Key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_a8key());
    }

    // optional string title = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string content = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional string userName = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string shareUrl = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shareurl());
    }

    // optional string antispamTicket = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_antispamticket());
    }

    // optional string ssid = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ssid());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string mid = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mid());
    }

    // optional string wording = 26;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wording());
    }

    // optional string headImg = 27;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headimg());
    }

    // optional string menuWording = 29;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_menuwording());
    }

  }
  if (cached_has_bits & 0x0000e000u) {
    // optional .JSAPIPermissionBitSet jsapipermission = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.jsapipermission_);
    }

    // optional .GeneralControlBitSet generalControlBitSet = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.generalcontrolbitset_);
    }

    // optional .DeepLinkBitSet deepLinkBitSet = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deeplinkbitset_);
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional .SKBuiltinBuffer_t jsapicontrolBytes = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.jsapicontrolbytes_);
    }

    // optional .SKBuiltinBuffer_t cookie = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cookie_);
    }

    // optional .SKBuiltinBuffer_t verifyPrefetchInfo = 30;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.verifyprefetchinfo_);
    }

    // optional .SKBuiltinBuffer_t webComponentInfo = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.webcomponentinfo_);
    }

    // optional uint32 actionCode = 4;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actioncode());
    }

    // optional uint32 scopeCount = 16;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_scopecount());
    }

    // optional uint32 httpHeaderCount = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_httpheadercount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetA8KeyResp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetA8KeyResp*>(
      &from));
}

void GetA8KeyResp::MergeFrom(const GetA8KeyResp& from) {
  GetA8KeyResp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GetA8KeyResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopelist_.MergeFrom(from._impl_.scopelist_);
  _this->_impl_.httpheader_.MergeFrom(from._impl_.httpheader_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fullurl(from._internal_fullurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_a8key(from._internal_a8key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_shareurl(from._internal_shareurl());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_antispamticket(from._internal_antispamticket());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_ssid(from._internal_ssid());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_mid(from._internal_mid());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_wording(from._internal_wording());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_headimg(from._internal_headimg());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_menuwording(from._internal_menuwording());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_baseresponse()->::BaseResponse::MergeFrom(
          from._internal_baseresponse());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_jsapipermission()->::JSAPIPermissionBitSet::MergeFrom(
          from._internal_jsapipermission());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_generalcontrolbitset()->::GeneralControlBitSet::MergeFrom(
          from._internal_generalcontrolbitset());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_deeplinkbitset()->::DeepLinkBitSet::MergeFrom(
          from._internal_deeplinkbitset());
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_jsapicontrolbytes()->::SKBuiltinBuffer_t::MergeFrom(
          from._internal_jsapicontrolbytes());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_cookie()->::SKBuiltinBuffer_t::MergeFrom(
          from._internal_cookie());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_verifyprefetchinfo()->::SKBuiltinBuffer_t::MergeFrom(
          from._internal_verifyprefetchinfo());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_webcomponentinfo()->::SKBuiltinBuffer_t::MergeFrom(
          from._internal_webcomponentinfo());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.actioncode_ = from._impl_.actioncode_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.scopecount_ = from._impl_.scopecount_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.httpheadercount_ = from._impl_.httpheadercount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetA8KeyResp::CopyFrom(const GetA8KeyResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetA8KeyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetA8KeyResp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.scopelist_))
    return false;
  if (_internal_has_baseresponse()) {
    if (!_impl_.baseresponse_->IsInitialized()) return false;
  }
  if (_internal_has_jsapipermission()) {
    if (!_impl_.jsapipermission_->IsInitialized()) return false;
  }
  if (_internal_has_generalcontrolbitset()) {
    if (!_impl_.generalcontrolbitset_->IsInitialized()) return false;
  }
  if (_internal_has_deeplinkbitset()) {
    if (!_impl_.deeplinkbitset_->IsInitialized()) return false;
  }
  if (_internal_has_jsapicontrolbytes()) {
    if (!_impl_.jsapicontrolbytes_->IsInitialized()) return false;
  }
  if (_internal_has_cookie()) {
    if (!_impl_.cookie_->IsInitialized()) return false;
  }
  if (_internal_has_verifyprefetchinfo()) {
    if (!_impl_.verifyprefetchinfo_->IsInitialized()) return false;
  }
  if (_internal_has_webcomponentinfo()) {
    if (!_impl_.webcomponentinfo_->IsInitialized()) return false;
  }
  return true;
}

void GetA8KeyResp::InternalSwap(GetA8KeyResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.scopelist_.InternalSwap(&other->_impl_.scopelist_);
  _impl_.httpheader_.InternalSwap(&other->_impl_.httpheader_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fullurl_, lhs_arena,
      &other->_impl_.fullurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.a8key_, lhs_arena,
      &other->_impl_.a8key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shareurl_, lhs_arena,
      &other->_impl_.shareurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.antispamticket_, lhs_arena,
      &other->_impl_.antispamticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ssid_, lhs_arena,
      &other->_impl_.ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mid_, lhs_arena,
      &other->_impl_.mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wording_, lhs_arena,
      &other->_impl_.wording_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.headimg_, lhs_arena,
      &other->_impl_.headimg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.menuwording_, lhs_arena,
      &other->_impl_.menuwording_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetA8KeyResp, _impl_.httpheadercount_)
      + sizeof(GetA8KeyResp::_impl_.httpheadercount_)
      - PROTOBUF_FIELD_OFFSET(GetA8KeyResp, _impl_.baseresponse_)>(
          reinterpret_cast<char*>(&_impl_.baseresponse_),
          reinterpret_cast<char*>(&other->_impl_.baseresponse_));
}

std::string GetA8KeyResp::GetTypeName() const {
  return "GetA8KeyResp";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GetA8KeyResp*
Arena::CreateMaybeMessage< ::GetA8KeyResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetA8KeyResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
