// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfo.proto

#include "UserInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GmailList::GmailList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.count_)*/0u} {}
struct GmailListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GmailListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GmailListDefaultTypeInternal() {}
  union {
    GmailList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GmailListDefaultTypeInternal _GmailList_default_instance_;
PROTOBUF_CONSTEXPR MusicRingBackSetting::MusicRingBackSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sid_)*/0u} {}
struct MusicRingBackSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MusicRingBackSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MusicRingBackSettingDefaultTypeInternal() {}
  union {
    MusicRingBackSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MusicRingBackSettingDefaultTypeInternal _MusicRingBackSetting_default_instance_;
PROTOBUF_CONSTEXPR FinderRingBackSetting::FinderRingBackSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.findernonceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.finderobjectid_)*/uint64_t{0u}} {}
struct FinderRingBackSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FinderRingBackSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FinderRingBackSettingDefaultTypeInternal() {}
  union {
    FinderRingBackSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FinderRingBackSettingDefaultTypeInternal _FinderRingBackSetting_default_instance_;
PROTOBUF_CONSTEXPR NewRingBackSetting::NewRingBackSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.music_)*/nullptr
  , /*decltype(_impl_.finder_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.starttime_)*/0u
  , /*decltype(_impl_.endtime_)*/0u} {}
struct NewRingBackSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewRingBackSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewRingBackSettingDefaultTypeInternal() {}
  union {
    NewRingBackSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewRingBackSettingDefaultTypeInternal _NewRingBackSetting_default_instance_;
PROTOBUF_CONSTEXPR RingBackSetting::RingBackSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.findernonceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.finderobjectid_)*/uint64_t{0u}
  , /*decltype(_impl_.startts_)*/0u
  , /*decltype(_impl_.endts_)*/0u} {}
struct RingBackSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RingBackSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RingBackSettingDefaultTypeInternal() {}
  union {
    RingBackSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RingBackSettingDefaultTypeInternal _RingBackSetting_default_instance_;
PROTOBUF_CONSTEXPR XAgreementInfo::XAgreementInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funcsswitch_)*/uint64_t{0u}
  , /*decltype(_impl_.funcsuserchoiceswitch_)*/uint64_t{0u}} {}
struct XAgreementInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XAgreementInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XAgreementInfoDefaultTypeInternal() {}
  union {
    XAgreementInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XAgreementInfoDefaultTypeInternal _XAgreementInfo_default_instance_;
PROTOBUF_CONSTEXPR LinkedinContactItem::LinkedinContactItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.linkedinname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkedinmemberid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkedinpublicurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LinkedinContactItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkedinContactItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkedinContactItemDefaultTypeInternal() {}
  union {
    LinkedinContactItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
PROTOBUF_CONSTEXPR PatternLockInfo::PatternLockInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sign_)*/nullptr
  , /*decltype(_impl_.patternversion_)*/0u
  , /*decltype(_impl_.lockstatus_)*/0u} {}
struct PatternLockInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatternLockInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatternLockInfoDefaultTypeInternal() {}
  union {
    PatternLockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
PROTOBUF_CONSTEXPR SafeDevice::SafeDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createtime_)*/0u} {}
struct SafeDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafeDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafeDeviceDefaultTypeInternal() {}
  union {
    SafeDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
PROTOBUF_CONSTEXPR SafeDeviceList::SafeDeviceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.count_)*/0u} {}
struct SafeDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafeDeviceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafeDeviceListDefaultTypeInternal() {}
  union {
    SafeDeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
PROTOBUF_CONSTEXPR SnsUserInfo::SnsUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.snsbgimgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.snsflag_)*/0u
  , /*decltype(_impl_.snsflagex_)*/0u
  , /*decltype(_impl_.snsbgobjectid_)*/uint64_t{0u}
  , /*decltype(_impl_.snsprivacyrecent_)*/0u} {}
struct SnsUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnsUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnsUserInfoDefaultTypeInternal() {}
  union {
    SnsUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
PROTOBUF_CONSTEXPR GmailInfo::GmailInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gmailacct_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gmailswitch_)*/0u
  , /*decltype(_impl_.gmailerrcode_)*/0u} {}
struct GmailInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GmailInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GmailInfoDefaultTypeInternal() {}
  union {
    GmailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
PROTOBUF_CONSTEXPR DisturbTimeSpan::DisturbTimeSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begintime_)*/0u
  , /*decltype(_impl_.endtime_)*/0u} {}
struct DisturbTimeSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisturbTimeSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisturbTimeSpanDefaultTypeInternal() {}
  union {
    DisturbTimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
PROTOBUF_CONSTEXPR DisturbSetting::DisturbSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nighttime_)*/nullptr
  , /*decltype(_impl_.alldaytime_)*/nullptr
  , /*decltype(_impl_.nightsetting_)*/0u
  , /*decltype(_impl_.alldaysetting_)*/0u} {}
struct DisturbSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisturbSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisturbSettingDefaultTypeInternal() {}
  union {
    DisturbSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
PROTOBUF_CONSTEXPR ModUserInfo::ModUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imgbuf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.province_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verifyinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weibo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weibonickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fbusername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.albumbgimgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fbtoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/nullptr
  , /*decltype(_impl_.nickname_)*/nullptr
  , /*decltype(_impl_.bindemail_)*/nullptr
  , /*decltype(_impl_.bindmobile_)*/nullptr
  , /*decltype(_impl_.disturbsetting_)*/nullptr
  , /*decltype(_impl_.gmaillist_)*/nullptr
  , /*decltype(_impl_.bitflag_)*/0u
  , /*decltype(_impl_.binduin_)*/0u
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_.imglen_)*/0u
  , /*decltype(_impl_.sex_)*/0
  , /*decltype(_impl_.personalcard_)*/0u
  , /*decltype(_impl_.pluginflag_)*/0u
  , /*decltype(_impl_.verifyflag_)*/0u
  , /*decltype(_impl_.point_)*/0
  , /*decltype(_impl_.experience_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.levellowexp_)*/0
  , /*decltype(_impl_.levelhighexp_)*/0
  , /*decltype(_impl_.pluginswitch_)*/0u
  , /*decltype(_impl_.weiboflag_)*/0u
  , /*decltype(_impl_.facebookflag_)*/0u
  , /*decltype(_impl_.fbuserid_)*/uint64_t{0u}
  , /*decltype(_impl_.albumstyle_)*/0
  , /*decltype(_impl_.albumflag_)*/0
  , /*decltype(_impl_.txnewscategory_)*/0u} {}
struct ModUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModUserInfoDefaultTypeInternal() {}
  union {
    ModUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
PROTOBUF_CONSTEXPR UserInfoExt::UserInfoExt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mybrandlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgpushsound_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.voippushsound_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.safemobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bigheadimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.smallheadimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.googlecontactname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idcardnum_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.realname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.regcountry_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bbppid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bbpin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bbmnickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kfinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.securitydeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weidianinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f2fpushsound_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bindxmail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.patsuffix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textstatusid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textstatusextinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.snsuserinfo_)*/nullptr
  , /*decltype(_impl_.extxml_)*/nullptr
  , /*decltype(_impl_.safedevicelist_)*/nullptr
  , /*decltype(_impl_.linkedincontactitem_)*/nullptr
  , /*decltype(_impl_.patternlockinfo_)*/nullptr
  , /*decltype(_impl_.xagreementinfo_)*/nullptr
  , /*decltype(_impl_.ringbacksetting_)*/nullptr
  , /*decltype(_impl_.globalringbacksetting_)*/nullptr
  , /*decltype(_impl_.bigchatroomsize_)*/0u
  , /*decltype(_impl_.bigchatroomquota_)*/0u
  , /*decltype(_impl_.bigchatroominvite_)*/0u
  , /*decltype(_impl_.mainaccttype_)*/0u
  , /*decltype(_impl_.safedevice_)*/0u
  , /*decltype(_impl_.grayscaleflag_)*/0u
  , /*decltype(_impl_.paywallettype_)*/0u
  , /*decltype(_impl_.walletregion_)*/0u
  , /*decltype(_impl_.extstatus_)*/uint64_t{0u}
  , /*decltype(_impl_.paysetting_)*/uint64_t{0u}
  , /*decltype(_impl_.userstatus_)*/0u
  , /*decltype(_impl_.patsuffixversion_)*/0u
  , /*decltype(_impl_.teenagermodefindersetting_)*/0u
  , /*decltype(_impl_.teenagermodebizacctsetting_)*/0u
  , /*decltype(_impl_.teenagermodeminiprogramsetting_)*/0u
  , /*decltype(_impl_.smcryptoflag_)*/0u
  , /*decltype(_impl_.findersetting_)*/uint64_t{0u}
  , /*decltype(_impl_.discoverypagectrlflag_)*/uint64_t{0u}
  , /*decltype(_impl_.newcomemsgdefaultvoicenumber_)*/0u} {}
struct UserInfoExtDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoExtDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoExtDefaultTypeInternal() {}
  union {
    UserInfoExt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
PROTOBUF_CONSTEXPR GetProfileResponse::GetProfileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.baseresponse_)*/nullptr
  , /*decltype(_impl_.userinfo_)*/nullptr
  , /*decltype(_impl_.userinfoext_)*/nullptr} {}
struct GetProfileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetProfileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetProfileResponseDefaultTypeInternal() {}
  union {
    GetProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetProfileResponseDefaultTypeInternal _GetProfileResponse_default_instance_;

// ===================================================================

class GmailList::_Internal {
 public:
  using HasBits = decltype(std::declval<GmailList>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GmailList::GmailList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GmailList)
}
GmailList::GmailList(const GmailList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GmailList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:GmailList)
}

inline void GmailList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_){arena}
    , decltype(_impl_.count_){0u}
  };
}

GmailList::~GmailList() {
  // @@protoc_insertion_point(destructor:GmailList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GmailList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void GmailList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GmailList::Clear() {
// @@protoc_insertion_point(message_clear_start:GmailList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GmailList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .GmailInfo list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GmailList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GmailList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .GmailInfo list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GmailList)
  return target;
}

size_t GmailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GmailList)
  size_t total_size = 0;

  // required uint32 count = 1;
  if (_internal_has_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GmailInfo list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GmailList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GmailList*>(
      &from));
}

void GmailList::MergeFrom(const GmailList& from) {
  GmailList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GmailList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_has_count()) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GmailList::CopyFrom(const GmailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GmailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmailList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.list_))
    return false;
  return true;
}

void GmailList::InternalSwap(GmailList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.count_, other->_impl_.count_);
}

std::string GmailList::GetTypeName() const {
  return "GmailList";
}


// ===================================================================

class MusicRingBackSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<MusicRingBackSetting>()._impl_._has_bits_);
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MusicRingBackSetting::MusicRingBackSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MusicRingBackSetting)
}
MusicRingBackSetting::MusicRingBackSetting(const MusicRingBackSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MusicRingBackSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.sid_ = from._impl_.sid_;
  // @@protoc_insertion_point(copy_constructor:MusicRingBackSetting)
}

inline void MusicRingBackSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sid_){0u}
  };
}

MusicRingBackSetting::~MusicRingBackSetting() {
  // @@protoc_insertion_point(destructor:MusicRingBackSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MusicRingBackSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MusicRingBackSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MusicRingBackSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:MusicRingBackSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MusicRingBackSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sid(&has_bits);
          _impl_.sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MusicRingBackSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MusicRingBackSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MusicRingBackSetting)
  return target;
}

size_t MusicRingBackSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MusicRingBackSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MusicRingBackSetting::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MusicRingBackSetting*>(
      &from));
}

void MusicRingBackSetting::MergeFrom(const MusicRingBackSetting& from) {
  MusicRingBackSetting* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:MusicRingBackSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sid()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MusicRingBackSetting::CopyFrom(const MusicRingBackSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MusicRingBackSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicRingBackSetting::IsInitialized() const {
  return true;
}

void MusicRingBackSetting::InternalSwap(MusicRingBackSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.sid_, other->_impl_.sid_);
}

std::string MusicRingBackSetting::GetTypeName() const {
  return "MusicRingBackSetting";
}


// ===================================================================

class FinderRingBackSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<FinderRingBackSetting>()._impl_._has_bits_);
  static void set_has_finderobjectid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_findernonceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FinderRingBackSetting::FinderRingBackSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FinderRingBackSetting)
}
FinderRingBackSetting::FinderRingBackSetting(const FinderRingBackSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FinderRingBackSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.findernonceid_){}
    , decltype(_impl_.finderobjectid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.findernonceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.findernonceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_findernonceid()) {
    _this->_impl_.findernonceid_.Set(from._internal_findernonceid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.finderobjectid_ = from._impl_.finderobjectid_;
  // @@protoc_insertion_point(copy_constructor:FinderRingBackSetting)
}

inline void FinderRingBackSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.findernonceid_){}
    , decltype(_impl_.finderobjectid_){uint64_t{0u}}
  };
  _impl_.findernonceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.findernonceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FinderRingBackSetting::~FinderRingBackSetting() {
  // @@protoc_insertion_point(destructor:FinderRingBackSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FinderRingBackSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.findernonceid_.Destroy();
}

void FinderRingBackSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FinderRingBackSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:FinderRingBackSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.findernonceid_.ClearNonDefaultToEmpty();
  }
  _impl_.finderobjectid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FinderRingBackSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 finderObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_finderobjectid(&has_bits);
          _impl_.finderobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string finderNonceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_findernonceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FinderRingBackSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FinderRingBackSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 finderObjectId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_finderobjectid(), target);
  }

  // optional string finderNonceId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_findernonceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FinderRingBackSetting)
  return target;
}

size_t FinderRingBackSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FinderRingBackSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string finderNonceId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_findernonceid());
    }

    // optional uint64 finderObjectId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_finderobjectid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinderRingBackSetting::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FinderRingBackSetting*>(
      &from));
}

void FinderRingBackSetting::MergeFrom(const FinderRingBackSetting& from) {
  FinderRingBackSetting* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:FinderRingBackSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_findernonceid(from._internal_findernonceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.finderobjectid_ = from._impl_.finderobjectid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FinderRingBackSetting::CopyFrom(const FinderRingBackSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FinderRingBackSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinderRingBackSetting::IsInitialized() const {
  return true;
}

void FinderRingBackSetting::InternalSwap(FinderRingBackSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.findernonceid_, lhs_arena,
      &other->_impl_.findernonceid_, rhs_arena
  );
  swap(_impl_.finderobjectid_, other->_impl_.finderobjectid_);
}

std::string FinderRingBackSetting::GetTypeName() const {
  return "FinderRingBackSetting";
}


// ===================================================================

class NewRingBackSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<NewRingBackSetting>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::MusicRingBackSetting& music(const NewRingBackSetting* msg);
  static void set_has_music(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::FinderRingBackSetting& finder(const NewRingBackSetting* msg);
  static void set_has_finder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::MusicRingBackSetting&
NewRingBackSetting::_Internal::music(const NewRingBackSetting* msg) {
  return *msg->_impl_.music_;
}
const ::FinderRingBackSetting&
NewRingBackSetting::_Internal::finder(const NewRingBackSetting* msg) {
  return *msg->_impl_.finder_;
}
NewRingBackSetting::NewRingBackSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NewRingBackSetting)
}
NewRingBackSetting::NewRingBackSetting(const NewRingBackSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NewRingBackSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.music_){nullptr}
    , decltype(_impl_.finder_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_music()) {
    _this->_impl_.music_ = new ::MusicRingBackSetting(*from._impl_.music_);
  }
  if (from._internal_has_finder()) {
    _this->_impl_.finder_ = new ::FinderRingBackSetting(*from._impl_.finder_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtime_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.endtime_));
  // @@protoc_insertion_point(copy_constructor:NewRingBackSetting)
}

inline void NewRingBackSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.music_){nullptr}
    , decltype(_impl_.finder_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.starttime_){0u}
    , decltype(_impl_.endtime_){0u}
  };
}

NewRingBackSetting::~NewRingBackSetting() {
  // @@protoc_insertion_point(destructor:NewRingBackSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewRingBackSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.music_;
  if (this != internal_default_instance()) delete _impl_.finder_;
}

void NewRingBackSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewRingBackSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:NewRingBackSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.music_ != nullptr);
      _impl_.music_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.finder_ != nullptr);
      _impl_.finder_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.endtime_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.endtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NewRingBackSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_starttime(&has_bits);
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 endTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_endtime(&has_bits);
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MusicRingBackSetting music = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_music(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .FinderRingBackSetting finder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_finder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewRingBackSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewRingBackSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 startTime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_starttime(), target);
  }

  // optional uint32 endTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_endtime(), target);
  }

  // optional .MusicRingBackSetting music = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::music(this),
        _Internal::music(this).GetCachedSize(), target, stream);
  }

  // optional .FinderRingBackSetting finder = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::finder(this),
        _Internal::finder(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewRingBackSetting)
  return target;
}

size_t NewRingBackSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewRingBackSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .MusicRingBackSetting music = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.music_);
    }

    // optional .FinderRingBackSetting finder = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.finder_);
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 startTime = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starttime());
    }

    // optional uint32 endTime = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewRingBackSetting::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NewRingBackSetting*>(
      &from));
}

void NewRingBackSetting::MergeFrom(const NewRingBackSetting& from) {
  NewRingBackSetting* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:NewRingBackSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_music()->::MusicRingBackSetting::MergeFrom(
          from._internal_music());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_finder()->::FinderRingBackSetting::MergeFrom(
          from._internal_finder());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.starttime_ = from._impl_.starttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.endtime_ = from._impl_.endtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NewRingBackSetting::CopyFrom(const NewRingBackSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewRingBackSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRingBackSetting::IsInitialized() const {
  return true;
}

void NewRingBackSetting::InternalSwap(NewRingBackSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewRingBackSetting, _impl_.endtime_)
      + sizeof(NewRingBackSetting::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(NewRingBackSetting, _impl_.music_)>(
          reinterpret_cast<char*>(&_impl_.music_),
          reinterpret_cast<char*>(&other->_impl_.music_));
}

std::string NewRingBackSetting::GetTypeName() const {
  return "NewRingBackSetting";
}


// ===================================================================

class RingBackSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<RingBackSetting>()._impl_._has_bits_);
  static void set_has_finderobjectid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_findernonceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RingBackSetting::RingBackSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RingBackSetting)
}
RingBackSetting::RingBackSetting(const RingBackSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RingBackSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.findernonceid_){}
    , decltype(_impl_.finderobjectid_){}
    , decltype(_impl_.startts_){}
    , decltype(_impl_.endts_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.findernonceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.findernonceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_findernonceid()) {
    _this->_impl_.findernonceid_.Set(from._internal_findernonceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.finderobjectid_, &from._impl_.finderobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endts_) -
    reinterpret_cast<char*>(&_impl_.finderobjectid_)) + sizeof(_impl_.endts_));
  // @@protoc_insertion_point(copy_constructor:RingBackSetting)
}

inline void RingBackSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.findernonceid_){}
    , decltype(_impl_.finderobjectid_){uint64_t{0u}}
    , decltype(_impl_.startts_){0u}
    , decltype(_impl_.endts_){0u}
  };
  _impl_.findernonceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.findernonceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RingBackSetting::~RingBackSetting() {
  // @@protoc_insertion_point(destructor:RingBackSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RingBackSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.findernonceid_.Destroy();
}

void RingBackSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RingBackSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:RingBackSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.findernonceid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.finderobjectid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.endts_) -
        reinterpret_cast<char*>(&_impl_.finderobjectid_)) + sizeof(_impl_.endts_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RingBackSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 finderObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_finderobjectid(&has_bits);
          _impl_.finderobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string finderNonceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_findernonceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 startTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_startts(&has_bits);
          _impl_.startts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 endTs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_endts(&has_bits);
          _impl_.endts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RingBackSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RingBackSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 finderObjectId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_finderobjectid(), target);
  }

  // required string finderNonceId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_findernonceid(), target);
  }

  // required uint32 startTs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_startts(), target);
  }

  // required uint32 endTs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_endts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RingBackSetting)
  return target;
}

size_t RingBackSetting::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RingBackSetting)
  size_t total_size = 0;

  if (_internal_has_findernonceid()) {
    // required string finderNonceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_findernonceid());
  }

  if (_internal_has_finderobjectid()) {
    // required uint64 finderObjectId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_finderobjectid());
  }

  if (_internal_has_startts()) {
    // required uint32 startTs = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startts());
  }

  if (_internal_has_endts()) {
    // required uint32 endTs = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endts());
  }

  return total_size;
}
size_t RingBackSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RingBackSetting)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string finderNonceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_findernonceid());

    // required uint64 finderObjectId = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_finderobjectid());

    // required uint32 startTs = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startts());

    // required uint32 endTs = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RingBackSetting::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RingBackSetting*>(
      &from));
}

void RingBackSetting::MergeFrom(const RingBackSetting& from) {
  RingBackSetting* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:RingBackSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_findernonceid(from._internal_findernonceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.finderobjectid_ = from._impl_.finderobjectid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.startts_ = from._impl_.startts_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.endts_ = from._impl_.endts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RingBackSetting::CopyFrom(const RingBackSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RingBackSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingBackSetting::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RingBackSetting::InternalSwap(RingBackSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.findernonceid_, lhs_arena,
      &other->_impl_.findernonceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RingBackSetting, _impl_.endts_)
      + sizeof(RingBackSetting::_impl_.endts_)
      - PROTOBUF_FIELD_OFFSET(RingBackSetting, _impl_.finderobjectid_)>(
          reinterpret_cast<char*>(&_impl_.finderobjectid_),
          reinterpret_cast<char*>(&other->_impl_.finderobjectid_));
}

std::string RingBackSetting::GetTypeName() const {
  return "RingBackSetting";
}


// ===================================================================

class XAgreementInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<XAgreementInfo>()._impl_._has_bits_);
  static void set_has_funcsswitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_funcsuserchoiceswitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

XAgreementInfo::XAgreementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:XAgreementInfo)
}
XAgreementInfo::XAgreementInfo(const XAgreementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  XAgreementInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funcsswitch_){}
    , decltype(_impl_.funcsuserchoiceswitch_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.funcsswitch_, &from._impl_.funcsswitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.funcsuserchoiceswitch_) -
    reinterpret_cast<char*>(&_impl_.funcsswitch_)) + sizeof(_impl_.funcsuserchoiceswitch_));
  // @@protoc_insertion_point(copy_constructor:XAgreementInfo)
}

inline void XAgreementInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funcsswitch_){uint64_t{0u}}
    , decltype(_impl_.funcsuserchoiceswitch_){uint64_t{0u}}
  };
}

XAgreementInfo::~XAgreementInfo() {
  // @@protoc_insertion_point(destructor:XAgreementInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XAgreementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XAgreementInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XAgreementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XAgreementInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.funcsswitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.funcsuserchoiceswitch_) -
        reinterpret_cast<char*>(&_impl_.funcsswitch_)) + sizeof(_impl_.funcsuserchoiceswitch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* XAgreementInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 funcsSwitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_funcsswitch(&has_bits);
          _impl_.funcsswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 funcsUserChoiceSwitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_funcsuserchoiceswitch(&has_bits);
          _impl_.funcsuserchoiceswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XAgreementInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XAgreementInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 funcsSwitch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_funcsswitch(), target);
  }

  // optional uint64 funcsUserChoiceSwitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_funcsuserchoiceswitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XAgreementInfo)
  return target;
}

size_t XAgreementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XAgreementInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 funcsSwitch = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_funcsswitch());
    }

    // optional uint64 funcsUserChoiceSwitch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_funcsuserchoiceswitch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XAgreementInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const XAgreementInfo*>(
      &from));
}

void XAgreementInfo::MergeFrom(const XAgreementInfo& from) {
  XAgreementInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:XAgreementInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.funcsswitch_ = from._impl_.funcsswitch_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.funcsuserchoiceswitch_ = from._impl_.funcsuserchoiceswitch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void XAgreementInfo::CopyFrom(const XAgreementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XAgreementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XAgreementInfo::IsInitialized() const {
  return true;
}

void XAgreementInfo::InternalSwap(XAgreementInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XAgreementInfo, _impl_.funcsuserchoiceswitch_)
      + sizeof(XAgreementInfo::_impl_.funcsuserchoiceswitch_)
      - PROTOBUF_FIELD_OFFSET(XAgreementInfo, _impl_.funcsswitch_)>(
          reinterpret_cast<char*>(&_impl_.funcsswitch_),
          reinterpret_cast<char*>(&other->_impl_.funcsswitch_));
}

std::string XAgreementInfo::GetTypeName() const {
  return "XAgreementInfo";
}


// ===================================================================

class LinkedinContactItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkedinContactItem>()._impl_._has_bits_);
  static void set_has_linkedinname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linkedinmemberid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linkedinpublicurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LinkedinContactItem::LinkedinContactItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LinkedinContactItem)
}
LinkedinContactItem::LinkedinContactItem(const LinkedinContactItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LinkedinContactItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linkedinname_){}
    , decltype(_impl_.linkedinmemberid_){}
    , decltype(_impl_.linkedinpublicurl_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.linkedinname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedinname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linkedinname()) {
    _this->_impl_.linkedinname_.Set(from._internal_linkedinname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkedinmemberid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedinmemberid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linkedinmemberid()) {
    _this->_impl_.linkedinmemberid_.Set(from._internal_linkedinmemberid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkedinpublicurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedinpublicurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linkedinpublicurl()) {
    _this->_impl_.linkedinpublicurl_.Set(from._internal_linkedinpublicurl(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:LinkedinContactItem)
}

inline void LinkedinContactItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linkedinname_){}
    , decltype(_impl_.linkedinmemberid_){}
    , decltype(_impl_.linkedinpublicurl_){}
  };
  _impl_.linkedinname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedinname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkedinmemberid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedinmemberid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkedinpublicurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkedinpublicurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkedinContactItem::~LinkedinContactItem() {
  // @@protoc_insertion_point(destructor:LinkedinContactItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkedinContactItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.linkedinname_.Destroy();
  _impl_.linkedinmemberid_.Destroy();
  _impl_.linkedinpublicurl_.Destroy();
}

void LinkedinContactItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkedinContactItem::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkedinContactItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.linkedinname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.linkedinmemberid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.linkedinpublicurl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LinkedinContactItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string linkedinName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_linkedinname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string linkedinMemberId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_linkedinmemberid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string linkedinPublicUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_linkedinpublicurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedinContactItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkedinContactItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string linkedinName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_linkedinname(), target);
  }

  // optional string linkedinMemberId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_linkedinmemberid(), target);
  }

  // optional string linkedinPublicUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_linkedinpublicurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkedinContactItem)
  return target;
}

size_t LinkedinContactItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkedinContactItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string linkedinName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linkedinname());
    }

    // optional string linkedinMemberId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linkedinmemberid());
    }

    // optional string linkedinPublicUrl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linkedinpublicurl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkedinContactItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LinkedinContactItem*>(
      &from));
}

void LinkedinContactItem::MergeFrom(const LinkedinContactItem& from) {
  LinkedinContactItem* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:LinkedinContactItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_linkedinname(from._internal_linkedinname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_linkedinmemberid(from._internal_linkedinmemberid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_linkedinpublicurl(from._internal_linkedinpublicurl());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LinkedinContactItem::CopyFrom(const LinkedinContactItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkedinContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedinContactItem::IsInitialized() const {
  return true;
}

void LinkedinContactItem::InternalSwap(LinkedinContactItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkedinname_, lhs_arena,
      &other->_impl_.linkedinname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkedinmemberid_, lhs_arena,
      &other->_impl_.linkedinmemberid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkedinpublicurl_, lhs_arena,
      &other->_impl_.linkedinpublicurl_, rhs_arena
  );
}

std::string LinkedinContactItem::GetTypeName() const {
  return "LinkedinContactItem";
}


// ===================================================================

class PatternLockInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PatternLockInfo>()._impl_._has_bits_);
  static void set_has_patternversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SKBuiltinBuffer_t& sign(const PatternLockInfo* msg);
  static void set_has_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lockstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::SKBuiltinBuffer_t&
PatternLockInfo::_Internal::sign(const PatternLockInfo* msg) {
  return *msg->_impl_.sign_;
}
void PatternLockInfo::clear_sign() {
  if (_impl_.sign_ != nullptr) _impl_.sign_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PatternLockInfo::PatternLockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PatternLockInfo)
}
PatternLockInfo::PatternLockInfo(const PatternLockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PatternLockInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.patternversion_){}
    , decltype(_impl_.lockstatus_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sign()) {
    _this->_impl_.sign_ = new ::SKBuiltinBuffer_t(*from._impl_.sign_);
  }
  ::memcpy(&_impl_.patternversion_, &from._impl_.patternversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lockstatus_) -
    reinterpret_cast<char*>(&_impl_.patternversion_)) + sizeof(_impl_.lockstatus_));
  // @@protoc_insertion_point(copy_constructor:PatternLockInfo)
}

inline void PatternLockInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sign_){nullptr}
    , decltype(_impl_.patternversion_){0u}
    , decltype(_impl_.lockstatus_){0u}
  };
}

PatternLockInfo::~PatternLockInfo() {
  // @@protoc_insertion_point(destructor:PatternLockInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatternLockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sign_;
}

void PatternLockInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatternLockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PatternLockInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.sign_ != nullptr);
    _impl_.sign_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.patternversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lockstatus_) -
        reinterpret_cast<char*>(&_impl_.patternversion_)) + sizeof(_impl_.lockstatus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PatternLockInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 patternVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_patternversion(&has_bits);
          _impl_.patternversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinBuffer_t sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lockStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lockstatus(&has_bits);
          _impl_.lockstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatternLockInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PatternLockInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 patternVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_patternversion(), target);
  }

  // optional .SKBuiltinBuffer_t sign = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sign(this),
        _Internal::sign(this).GetCachedSize(), target, stream);
  }

  // optional uint32 lockStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lockstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PatternLockInfo)
  return target;
}

size_t PatternLockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PatternLockInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .SKBuiltinBuffer_t sign = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sign_);
    }

    // optional uint32 patternVersion = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patternversion());
    }

    // optional uint32 lockStatus = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lockstatus());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatternLockInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PatternLockInfo*>(
      &from));
}

void PatternLockInfo::MergeFrom(const PatternLockInfo& from) {
  PatternLockInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PatternLockInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sign()->::SKBuiltinBuffer_t::MergeFrom(
          from._internal_sign());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.patternversion_ = from._impl_.patternversion_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lockstatus_ = from._impl_.lockstatus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PatternLockInfo::CopyFrom(const PatternLockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PatternLockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternLockInfo::IsInitialized() const {
  if (_internal_has_sign()) {
    if (!_impl_.sign_->IsInitialized()) return false;
  }
  return true;
}

void PatternLockInfo::InternalSwap(PatternLockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatternLockInfo, _impl_.lockstatus_)
      + sizeof(PatternLockInfo::_impl_.lockstatus_)
      - PROTOBUF_FIELD_OFFSET(PatternLockInfo, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

std::string PatternLockInfo::GetTypeName() const {
  return "PatternLockInfo";
}


// ===================================================================

class SafeDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<SafeDevice>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_createtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

SafeDevice::SafeDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SafeDevice)
}
SafeDevice::SafeDevice(const SafeDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SafeDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.createtime_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicetype()) {
    _this->_impl_.devicetype_.Set(from._internal_devicetype(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.createtime_ = from._impl_.createtime_;
  // @@protoc_insertion_point(copy_constructor:SafeDevice)
}

inline void SafeDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.createtime_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SafeDevice::~SafeDevice() {
  // @@protoc_insertion_point(destructor:SafeDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SafeDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.devicetype_.Destroy();
}

void SafeDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SafeDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:SafeDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.devicetype_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.createtime_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SafeDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deviceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_devicetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 createTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_createtime(&has_bits);
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SafeDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SafeDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // optional string deviceType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devicetype(), target);
  }

  // required uint32 createTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SafeDevice)
  return target;
}

size_t SafeDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SafeDevice)
  size_t total_size = 0;

  // required uint32 createTime = 4;
  if (_internal_has_createtime()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_createtime());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string uuid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional string deviceType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafeDevice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SafeDevice*>(
      &from));
}

void SafeDevice::MergeFrom(const SafeDevice& from) {
  SafeDevice* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:SafeDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_devicetype(from._internal_devicetype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.createtime_ = from._impl_.createtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SafeDevice::CopyFrom(const SafeDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SafeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeDevice::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SafeDevice::InternalSwap(SafeDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicetype_, lhs_arena,
      &other->_impl_.devicetype_, rhs_arena
  );
  swap(_impl_.createtime_, other->_impl_.createtime_);
}

std::string SafeDevice::GetTypeName() const {
  return "SafeDevice";
}


// ===================================================================

class SafeDeviceList::_Internal {
 public:
  using HasBits = decltype(std::declval<SafeDeviceList>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SafeDeviceList::SafeDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SafeDeviceList)
}
SafeDeviceList::SafeDeviceList(const SafeDeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SafeDeviceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:SafeDeviceList)
}

inline void SafeDeviceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_){arena}
    , decltype(_impl_.count_){0u}
  };
}

SafeDeviceList::~SafeDeviceList() {
  // @@protoc_insertion_point(destructor:SafeDeviceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SafeDeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void SafeDeviceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SafeDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:SafeDeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SafeDeviceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SafeDevice list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SafeDeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SafeDeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .SafeDevice list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SafeDeviceList)
  return target;
}

size_t SafeDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SafeDeviceList)
  size_t total_size = 0;

  // required uint32 count = 1;
  if (_internal_has_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SafeDevice list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafeDeviceList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SafeDeviceList*>(
      &from));
}

void SafeDeviceList::MergeFrom(const SafeDeviceList& from) {
  SafeDeviceList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:SafeDeviceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_has_count()) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SafeDeviceList::CopyFrom(const SafeDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SafeDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeDeviceList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.list_))
    return false;
  return true;
}

void SafeDeviceList::InternalSwap(SafeDeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.count_, other->_impl_.count_);
}

std::string SafeDeviceList::GetTypeName() const {
  return "SafeDeviceList";
}


// ===================================================================

class SnsUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SnsUserInfo>()._impl_._has_bits_);
  static void set_has_snsflag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snsbgimgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_snsbgobjectid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_snsflagex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_snsprivacyrecent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SnsUserInfo::SnsUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SnsUserInfo)
}
SnsUserInfo::SnsUserInfo(const SnsUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SnsUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snsbgimgid_){}
    , decltype(_impl_.snsflag_){}
    , decltype(_impl_.snsflagex_){}
    , decltype(_impl_.snsbgobjectid_){}
    , decltype(_impl_.snsprivacyrecent_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.snsbgimgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snsbgimgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_snsbgimgid()) {
    _this->_impl_.snsbgimgid_.Set(from._internal_snsbgimgid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.snsflag_, &from._impl_.snsflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.snsprivacyrecent_) -
    reinterpret_cast<char*>(&_impl_.snsflag_)) + sizeof(_impl_.snsprivacyrecent_));
  // @@protoc_insertion_point(copy_constructor:SnsUserInfo)
}

inline void SnsUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snsbgimgid_){}
    , decltype(_impl_.snsflag_){0u}
    , decltype(_impl_.snsflagex_){0u}
    , decltype(_impl_.snsbgobjectid_){uint64_t{0u}}
    , decltype(_impl_.snsprivacyrecent_){0u}
  };
  _impl_.snsbgimgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snsbgimgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnsUserInfo::~SnsUserInfo() {
  // @@protoc_insertion_point(destructor:SnsUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnsUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snsbgimgid_.Destroy();
}

void SnsUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnsUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SnsUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.snsbgimgid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.snsflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.snsprivacyrecent_) -
        reinterpret_cast<char*>(&_impl_.snsflag_)) + sizeof(_impl_.snsprivacyrecent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SnsUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 snsFlag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_snsflag(&has_bits);
          _impl_.snsflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string snsBgimgId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_snsbgimgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 snsBgobjectId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_snsbgobjectid(&has_bits);
          _impl_.snsbgobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 snsFlagEx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_snsflagex(&has_bits);
          _impl_.snsflagex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 snsPrivacyRecent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_snsprivacyrecent(&has_bits);
          _impl_.snsprivacyrecent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnsUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SnsUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 snsFlag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_snsflag(), target);
  }

  // optional string snsBgimgId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snsbgimgid(), target);
  }

  // optional uint64 snsBgobjectId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_snsbgobjectid(), target);
  }

  // optional uint32 snsFlagEx = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_snsflagex(), target);
  }

  // optional uint32 snsPrivacyRecent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_snsprivacyrecent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SnsUserInfo)
  return target;
}

size_t SnsUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnsUserInfo)
  size_t total_size = 0;

  // required uint32 snsFlag = 1;
  if (_internal_has_snsflag()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_snsflag());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string snsBgimgId = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snsbgimgid());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 snsFlagEx = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_snsflagex());
    }

    // optional uint64 snsBgobjectId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_snsbgobjectid());
    }

    // optional uint32 snsPrivacyRecent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_snsprivacyrecent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnsUserInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SnsUserInfo*>(
      &from));
}

void SnsUserInfo::MergeFrom(const SnsUserInfo& from) {
  SnsUserInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:SnsUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_snsbgimgid(from._internal_snsbgimgid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.snsflag_ = from._impl_.snsflag_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.snsflagex_ = from._impl_.snsflagex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.snsbgobjectid_ = from._impl_.snsbgobjectid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.snsprivacyrecent_ = from._impl_.snsprivacyrecent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SnsUserInfo::CopyFrom(const SnsUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnsUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsUserInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SnsUserInfo::InternalSwap(SnsUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snsbgimgid_, lhs_arena,
      &other->_impl_.snsbgimgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnsUserInfo, _impl_.snsprivacyrecent_)
      + sizeof(SnsUserInfo::_impl_.snsprivacyrecent_)
      - PROTOBUF_FIELD_OFFSET(SnsUserInfo, _impl_.snsflag_)>(
          reinterpret_cast<char*>(&_impl_.snsflag_),
          reinterpret_cast<char*>(&other->_impl_.snsflag_));
}

std::string SnsUserInfo::GetTypeName() const {
  return "SnsUserInfo";
}


// ===================================================================

class GmailInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GmailInfo>()._impl_._has_bits_);
  static void set_has_gmailacct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gmailswitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gmailerrcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

GmailInfo::GmailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GmailInfo)
}
GmailInfo::GmailInfo(const GmailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GmailInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gmailacct_){}
    , decltype(_impl_.gmailswitch_){}
    , decltype(_impl_.gmailerrcode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.gmailacct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gmailacct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gmailacct()) {
    _this->_impl_.gmailacct_.Set(from._internal_gmailacct(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gmailswitch_, &from._impl_.gmailswitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gmailerrcode_) -
    reinterpret_cast<char*>(&_impl_.gmailswitch_)) + sizeof(_impl_.gmailerrcode_));
  // @@protoc_insertion_point(copy_constructor:GmailInfo)
}

inline void GmailInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gmailacct_){}
    , decltype(_impl_.gmailswitch_){0u}
    , decltype(_impl_.gmailerrcode_){0u}
  };
  _impl_.gmailacct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gmailacct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GmailInfo::~GmailInfo() {
  // @@protoc_insertion_point(destructor:GmailInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GmailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gmailacct_.Destroy();
}

void GmailInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GmailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GmailInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.gmailacct_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.gmailswitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gmailerrcode_) -
        reinterpret_cast<char*>(&_impl_.gmailswitch_)) + sizeof(_impl_.gmailerrcode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GmailInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string gmailAcct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gmailacct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 gmailSwitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gmailswitch(&has_bits);
          _impl_.gmailswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 gmailErrCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gmailerrcode(&has_bits);
          _impl_.gmailerrcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GmailInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GmailInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string gmailAcct = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gmailacct(), target);
  }

  // required uint32 gmailSwitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gmailswitch(), target);
  }

  // required uint32 gmailErrCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gmailerrcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GmailInfo)
  return target;
}

size_t GmailInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GmailInfo)
  size_t total_size = 0;

  if (_internal_has_gmailswitch()) {
    // required uint32 gmailSwitch = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gmailswitch());
  }

  if (_internal_has_gmailerrcode()) {
    // required uint32 gmailErrCode = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gmailerrcode());
  }

  return total_size;
}
size_t GmailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GmailInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 gmailSwitch = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gmailswitch());

    // required uint32 gmailErrCode = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gmailerrcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string gmailAcct = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gmailacct());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GmailInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GmailInfo*>(
      &from));
}

void GmailInfo::MergeFrom(const GmailInfo& from) {
  GmailInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GmailInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gmailacct(from._internal_gmailacct());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gmailswitch_ = from._impl_.gmailswitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gmailerrcode_ = from._impl_.gmailerrcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GmailInfo::CopyFrom(const GmailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GmailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmailInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GmailInfo::InternalSwap(GmailInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gmailacct_, lhs_arena,
      &other->_impl_.gmailacct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GmailInfo, _impl_.gmailerrcode_)
      + sizeof(GmailInfo::_impl_.gmailerrcode_)
      - PROTOBUF_FIELD_OFFSET(GmailInfo, _impl_.gmailswitch_)>(
          reinterpret_cast<char*>(&_impl_.gmailswitch_),
          reinterpret_cast<char*>(&other->_impl_.gmailswitch_));
}

std::string GmailInfo::GetTypeName() const {
  return "GmailInfo";
}


// ===================================================================

class DisturbTimeSpan::_Internal {
 public:
  using HasBits = decltype(std::declval<DisturbTimeSpan>()._impl_._has_bits_);
  static void set_has_begintime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DisturbTimeSpan::DisturbTimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DisturbTimeSpan)
}
DisturbTimeSpan::DisturbTimeSpan(const DisturbTimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DisturbTimeSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begintime_){}
    , decltype(_impl_.endtime_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.begintime_, &from._impl_.begintime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtime_) -
    reinterpret_cast<char*>(&_impl_.begintime_)) + sizeof(_impl_.endtime_));
  // @@protoc_insertion_point(copy_constructor:DisturbTimeSpan)
}

inline void DisturbTimeSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begintime_){0u}
    , decltype(_impl_.endtime_){0u}
  };
}

DisturbTimeSpan::~DisturbTimeSpan() {
  // @@protoc_insertion_point(destructor:DisturbTimeSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisturbTimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisturbTimeSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisturbTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:DisturbTimeSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.begintime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.endtime_) -
        reinterpret_cast<char*>(&_impl_.begintime_)) + sizeof(_impl_.endtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisturbTimeSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 beginTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begintime(&has_bits);
          _impl_.begintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 endTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_endtime(&has_bits);
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisturbTimeSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DisturbTimeSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 beginTime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_begintime(), target);
  }

  // required uint32 endTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DisturbTimeSpan)
  return target;
}

size_t DisturbTimeSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DisturbTimeSpan)
  size_t total_size = 0;

  if (_internal_has_begintime()) {
    // required uint32 beginTime = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_begintime());
  }

  if (_internal_has_endtime()) {
    // required uint32 endTime = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endtime());
  }

  return total_size;
}
size_t DisturbTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DisturbTimeSpan)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 beginTime = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_begintime());

    // required uint32 endTime = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisturbTimeSpan::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisturbTimeSpan*>(
      &from));
}

void DisturbTimeSpan::MergeFrom(const DisturbTimeSpan& from) {
  DisturbTimeSpan* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DisturbTimeSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begintime_ = from._impl_.begintime_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.endtime_ = from._impl_.endtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisturbTimeSpan::CopyFrom(const DisturbTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DisturbTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisturbTimeSpan::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DisturbTimeSpan::InternalSwap(DisturbTimeSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisturbTimeSpan, _impl_.endtime_)
      + sizeof(DisturbTimeSpan::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(DisturbTimeSpan, _impl_.begintime_)>(
          reinterpret_cast<char*>(&_impl_.begintime_),
          reinterpret_cast<char*>(&other->_impl_.begintime_));
}

std::string DisturbTimeSpan::GetTypeName() const {
  return "DisturbTimeSpan";
}


// ===================================================================

class DisturbSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<DisturbSetting>()._impl_._has_bits_);
  static void set_has_nightsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::DisturbTimeSpan& nighttime(const DisturbSetting* msg);
  static void set_has_nighttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_alldaysetting(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DisturbTimeSpan& alldaytime(const DisturbSetting* msg);
  static void set_has_alldaytime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::DisturbTimeSpan&
DisturbSetting::_Internal::nighttime(const DisturbSetting* msg) {
  return *msg->_impl_.nighttime_;
}
const ::DisturbTimeSpan&
DisturbSetting::_Internal::alldaytime(const DisturbSetting* msg) {
  return *msg->_impl_.alldaytime_;
}
DisturbSetting::DisturbSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DisturbSetting)
}
DisturbSetting::DisturbSetting(const DisturbSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DisturbSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nighttime_){nullptr}
    , decltype(_impl_.alldaytime_){nullptr}
    , decltype(_impl_.nightsetting_){}
    , decltype(_impl_.alldaysetting_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nighttime()) {
    _this->_impl_.nighttime_ = new ::DisturbTimeSpan(*from._impl_.nighttime_);
  }
  if (from._internal_has_alldaytime()) {
    _this->_impl_.alldaytime_ = new ::DisturbTimeSpan(*from._impl_.alldaytime_);
  }
  ::memcpy(&_impl_.nightsetting_, &from._impl_.nightsetting_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alldaysetting_) -
    reinterpret_cast<char*>(&_impl_.nightsetting_)) + sizeof(_impl_.alldaysetting_));
  // @@protoc_insertion_point(copy_constructor:DisturbSetting)
}

inline void DisturbSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nighttime_){nullptr}
    , decltype(_impl_.alldaytime_){nullptr}
    , decltype(_impl_.nightsetting_){0u}
    , decltype(_impl_.alldaysetting_){0u}
  };
}

DisturbSetting::~DisturbSetting() {
  // @@protoc_insertion_point(destructor:DisturbSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisturbSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nighttime_;
  if (this != internal_default_instance()) delete _impl_.alldaytime_;
}

void DisturbSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisturbSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:DisturbSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.nighttime_ != nullptr);
      _impl_.nighttime_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.alldaytime_ != nullptr);
      _impl_.alldaytime_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.nightsetting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.alldaysetting_) -
        reinterpret_cast<char*>(&_impl_.nightsetting_)) + sizeof(_impl_.alldaysetting_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisturbSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 nightSetting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nightsetting(&has_bits);
          _impl_.nightsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .DisturbTimeSpan nightTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nighttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 allDaySetting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_alldaysetting(&has_bits);
          _impl_.alldaysetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .DisturbTimeSpan allDayTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alldaytime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisturbSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DisturbSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 nightSetting = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nightsetting(), target);
  }

  // required .DisturbTimeSpan nightTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nighttime(this),
        _Internal::nighttime(this).GetCachedSize(), target, stream);
  }

  // required uint32 allDaySetting = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_alldaysetting(), target);
  }

  // required .DisturbTimeSpan allDayTime = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::alldaytime(this),
        _Internal::alldaytime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DisturbSetting)
  return target;
}

size_t DisturbSetting::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DisturbSetting)
  size_t total_size = 0;

  if (_internal_has_nighttime()) {
    // required .DisturbTimeSpan nightTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nighttime_);
  }

  if (_internal_has_alldaytime()) {
    // required .DisturbTimeSpan allDayTime = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alldaytime_);
  }

  if (_internal_has_nightsetting()) {
    // required uint32 nightSetting = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nightsetting());
  }

  if (_internal_has_alldaysetting()) {
    // required uint32 allDaySetting = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_alldaysetting());
  }

  return total_size;
}
size_t DisturbSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DisturbSetting)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .DisturbTimeSpan nightTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nighttime_);

    // required .DisturbTimeSpan allDayTime = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alldaytime_);

    // required uint32 nightSetting = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nightsetting());

    // required uint32 allDaySetting = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_alldaysetting());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisturbSetting::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisturbSetting*>(
      &from));
}

void DisturbSetting::MergeFrom(const DisturbSetting& from) {
  DisturbSetting* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DisturbSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_nighttime()->::DisturbTimeSpan::MergeFrom(
          from._internal_nighttime());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_alldaytime()->::DisturbTimeSpan::MergeFrom(
          from._internal_alldaytime());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.nightsetting_ = from._impl_.nightsetting_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.alldaysetting_ = from._impl_.alldaysetting_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisturbSetting::CopyFrom(const DisturbSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DisturbSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisturbSetting::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_nighttime()) {
    if (!_impl_.nighttime_->IsInitialized()) return false;
  }
  if (_internal_has_alldaytime()) {
    if (!_impl_.alldaytime_->IsInitialized()) return false;
  }
  return true;
}

void DisturbSetting::InternalSwap(DisturbSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisturbSetting, _impl_.alldaysetting_)
      + sizeof(DisturbSetting::_impl_.alldaysetting_)
      - PROTOBUF_FIELD_OFFSET(DisturbSetting, _impl_.nighttime_)>(
          reinterpret_cast<char*>(&_impl_.nighttime_),
          reinterpret_cast<char*>(&other->_impl_.nighttime_));
}

std::string DisturbSetting::GetTypeName() const {
  return "DisturbSetting";
}


// ===================================================================

class ModUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ModUserInfo>()._impl_._has_bits_);
  static void set_has_bitflag(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::SKBuiltinString_t& username(const ModUserInfo* msg);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::SKBuiltinString_t& nickname(const ModUserInfo* msg);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_binduin(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::SKBuiltinString_t& bindemail(const ModUserInfo* msg);
  static void set_has_bindemail(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::SKBuiltinString_t& bindmobile(const ModUserInfo* msg);
  static void set_has_bindmobile(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_imglen(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_imgbuf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_province(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_personalcard(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::DisturbSetting& disturbsetting(const ModUserInfo* msg);
  static void set_has_disturbsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pluginflag(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_verifyflag(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_verifyinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_experience(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_levellowexp(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_levelhighexp(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_weibo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pluginswitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::GmailList& gmaillist(const ModUserInfo* msg);
  static void set_has_gmaillist(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weibonickname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weiboflag(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_facebookflag(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_fbuserid(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_fbusername(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_albumstyle(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_albumflag(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_albumbgimgid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_txnewscategory(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_fbtoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x003cf000) ^ 0x003cf000) != 0;
  }
};

const ::SKBuiltinString_t&
ModUserInfo::_Internal::username(const ModUserInfo* msg) {
  return *msg->_impl_.username_;
}
const ::SKBuiltinString_t&
ModUserInfo::_Internal::nickname(const ModUserInfo* msg) {
  return *msg->_impl_.nickname_;
}
const ::SKBuiltinString_t&
ModUserInfo::_Internal::bindemail(const ModUserInfo* msg) {
  return *msg->_impl_.bindemail_;
}
const ::SKBuiltinString_t&
ModUserInfo::_Internal::bindmobile(const ModUserInfo* msg) {
  return *msg->_impl_.bindmobile_;
}
const ::DisturbSetting&
ModUserInfo::_Internal::disturbsetting(const ModUserInfo* msg) {
  return *msg->_impl_.disturbsetting_;
}
const ::GmailList&
ModUserInfo::_Internal::gmaillist(const ModUserInfo* msg) {
  return *msg->_impl_.gmaillist_;
}
void ModUserInfo::clear_username() {
  if (_impl_.username_ != nullptr) _impl_.username_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ModUserInfo::clear_nickname() {
  if (_impl_.nickname_ != nullptr) _impl_.nickname_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ModUserInfo::clear_bindemail() {
  if (_impl_.bindemail_ != nullptr) _impl_.bindemail_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ModUserInfo::clear_bindmobile() {
  if (_impl_.bindmobile_ != nullptr) _impl_.bindmobile_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
ModUserInfo::ModUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ModUserInfo)
}
ModUserInfo::ModUserInfo(const ModUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ModUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imgbuf_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.verifyinfo_){}
    , decltype(_impl_.weibo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.weibonickname_){}
    , decltype(_impl_.fbusername_){}
    , decltype(_impl_.albumbgimgid_){}
    , decltype(_impl_.fbtoken_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.username_){nullptr}
    , decltype(_impl_.nickname_){nullptr}
    , decltype(_impl_.bindemail_){nullptr}
    , decltype(_impl_.bindmobile_){nullptr}
    , decltype(_impl_.disturbsetting_){nullptr}
    , decltype(_impl_.gmaillist_){nullptr}
    , decltype(_impl_.bitflag_){}
    , decltype(_impl_.binduin_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.imglen_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.personalcard_){}
    , decltype(_impl_.pluginflag_){}
    , decltype(_impl_.verifyflag_){}
    , decltype(_impl_.point_){}
    , decltype(_impl_.experience_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.levellowexp_){}
    , decltype(_impl_.levelhighexp_){}
    , decltype(_impl_.pluginswitch_){}
    , decltype(_impl_.weiboflag_){}
    , decltype(_impl_.facebookflag_){}
    , decltype(_impl_.fbuserid_){}
    , decltype(_impl_.albumstyle_){}
    , decltype(_impl_.albumflag_){}
    , decltype(_impl_.txnewscategory_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.imgbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imgbuf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imgbuf()) {
    _this->_impl_.imgbuf_.Set(from._internal_imgbuf(), 
      _this->GetArenaForAllocation());
  }
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_province()) {
    _this->_impl_.province_.Set(from._internal_province(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_city()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verifyinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifyinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verifyinfo()) {
    _this->_impl_.verifyinfo_.Set(from._internal_verifyinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weibo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weibo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_weibo()) {
    _this->_impl_.weibo_.Set(from._internal_weibo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weibonickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weibonickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_weibonickname()) {
    _this->_impl_.weibonickname_.Set(from._internal_weibonickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fbusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fbusername()) {
    _this->_impl_.fbusername_.Set(from._internal_fbusername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.albumbgimgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.albumbgimgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_albumbgimgid()) {
    _this->_impl_.albumbgimgid_.Set(from._internal_albumbgimgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fbtoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbtoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fbtoken()) {
    _this->_impl_.fbtoken_.Set(from._internal_fbtoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_username()) {
    _this->_impl_.username_ = new ::SKBuiltinString_t(*from._impl_.username_);
  }
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_ = new ::SKBuiltinString_t(*from._impl_.nickname_);
  }
  if (from._internal_has_bindemail()) {
    _this->_impl_.bindemail_ = new ::SKBuiltinString_t(*from._impl_.bindemail_);
  }
  if (from._internal_has_bindmobile()) {
    _this->_impl_.bindmobile_ = new ::SKBuiltinString_t(*from._impl_.bindmobile_);
  }
  if (from._internal_has_disturbsetting()) {
    _this->_impl_.disturbsetting_ = new ::DisturbSetting(*from._impl_.disturbsetting_);
  }
  if (from._internal_has_gmaillist()) {
    _this->_impl_.gmaillist_ = new ::GmailList(*from._impl_.gmaillist_);
  }
  ::memcpy(&_impl_.bitflag_, &from._impl_.bitflag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.txnewscategory_) -
    reinterpret_cast<char*>(&_impl_.bitflag_)) + sizeof(_impl_.txnewscategory_));
  // @@protoc_insertion_point(copy_constructor:ModUserInfo)
}

inline void ModUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imgbuf_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.verifyinfo_){}
    , decltype(_impl_.weibo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.weibonickname_){}
    , decltype(_impl_.fbusername_){}
    , decltype(_impl_.albumbgimgid_){}
    , decltype(_impl_.fbtoken_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.username_){nullptr}
    , decltype(_impl_.nickname_){nullptr}
    , decltype(_impl_.bindemail_){nullptr}
    , decltype(_impl_.bindmobile_){nullptr}
    , decltype(_impl_.disturbsetting_){nullptr}
    , decltype(_impl_.gmaillist_){nullptr}
    , decltype(_impl_.bitflag_){0u}
    , decltype(_impl_.binduin_){0u}
    , decltype(_impl_.status_){0u}
    , decltype(_impl_.imglen_){0u}
    , decltype(_impl_.sex_){0}
    , decltype(_impl_.personalcard_){0u}
    , decltype(_impl_.pluginflag_){0u}
    , decltype(_impl_.verifyflag_){0u}
    , decltype(_impl_.point_){0}
    , decltype(_impl_.experience_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.levellowexp_){0}
    , decltype(_impl_.levelhighexp_){0}
    , decltype(_impl_.pluginswitch_){0u}
    , decltype(_impl_.weiboflag_){0u}
    , decltype(_impl_.facebookflag_){0u}
    , decltype(_impl_.fbuserid_){uint64_t{0u}}
    , decltype(_impl_.albumstyle_){0}
    , decltype(_impl_.albumflag_){0}
    , decltype(_impl_.txnewscategory_){0u}
  };
  _impl_.imgbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imgbuf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verifyinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifyinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weibo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weibo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weibonickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weibonickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fbusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.albumbgimgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.albumbgimgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fbtoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbtoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModUserInfo::~ModUserInfo() {
  // @@protoc_insertion_point(destructor:ModUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imgbuf_.Destroy();
  _impl_.province_.Destroy();
  _impl_.city_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.verifyinfo_.Destroy();
  _impl_.weibo_.Destroy();
  _impl_.alias_.Destroy();
  _impl_.weibonickname_.Destroy();
  _impl_.fbusername_.Destroy();
  _impl_.albumbgimgid_.Destroy();
  _impl_.fbtoken_.Destroy();
  _impl_.country_.Destroy();
  if (this != internal_default_instance()) delete _impl_.username_;
  if (this != internal_default_instance()) delete _impl_.nickname_;
  if (this != internal_default_instance()) delete _impl_.bindemail_;
  if (this != internal_default_instance()) delete _impl_.bindmobile_;
  if (this != internal_default_instance()) delete _impl_.disturbsetting_;
  if (this != internal_default_instance()) delete _impl_.gmaillist_;
}

void ModUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ModUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.imgbuf_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.province_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.city_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.verifyinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.weibo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.alias_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.weibonickname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.fbusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.albumbgimgid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.fbtoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.username_ != nullptr);
      _impl_.username_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.nickname_ != nullptr);
      _impl_.nickname_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.bindemail_ != nullptr);
      _impl_.bindemail_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.bindmobile_ != nullptr);
      _impl_.bindmobile_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.disturbsetting_ != nullptr);
      _impl_.disturbsetting_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.gmaillist_ != nullptr);
      _impl_.gmaillist_->Clear();
    }
  }
  if (cached_has_bits & 0x00fc0000u) {
    ::memset(&_impl_.bitflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.personalcard_) -
        reinterpret_cast<char*>(&_impl_.bitflag_)) + sizeof(_impl_.personalcard_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.pluginflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pluginswitch_) -
        reinterpret_cast<char*>(&_impl_.pluginflag_)) + sizeof(_impl_.pluginswitch_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.weiboflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.txnewscategory_) -
        reinterpret_cast<char*>(&_impl_.weiboflag_)) + sizeof(_impl_.txnewscategory_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 bitFlag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bitflag(&_impl_._has_bits_);
          _impl_.bitflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .SKBuiltinString_t userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_username(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .SKBuiltinString_t nickName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nickname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bindUin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_binduin(&_impl_._has_bits_);
          _impl_.binduin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .SKBuiltinString_t bindEmail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindemail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .SKBuiltinString_t bindMobile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindmobile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_status(&_impl_._has_bits_);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 imgLen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_imglen(&_impl_._has_bits_);
          _impl_.imglen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes imgBuf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_imgbuf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_sex(&_impl_._has_bits_);
          _impl_.sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string province = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_province();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string city = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string signature = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 personalCard = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_personalcard(&_impl_._has_bits_);
          _impl_.personalcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DisturbSetting disturbSetting = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_disturbsetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pluginFlag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_pluginflag(&_impl_._has_bits_);
          _impl_.pluginflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 verifyFlag = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_verifyflag(&_impl_._has_bits_);
          _impl_.verifyflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string verifyInfo = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_verifyinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 point = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_point(&_impl_._has_bits_);
          _impl_.point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 experience = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_experience(&_impl_._has_bits_);
          _impl_.experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_level(&_impl_._has_bits_);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 levelLowExp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_levellowexp(&_impl_._has_bits_);
          _impl_.levellowexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 levelHighExp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_levelhighexp(&_impl_._has_bits_);
          _impl_.levelhighexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string weibo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_weibo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pluginSwitch = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_pluginswitch(&_impl_._has_bits_);
          _impl_.pluginswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GmailList gmailList = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_gmaillist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string alias = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string weiboNickname = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_weibonickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weiboFlag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_weiboflag(&_impl_._has_bits_);
          _impl_.weiboflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 faceBookFlag = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_facebookflag(&_impl_._has_bits_);
          _impl_.facebookflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fbuserId = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_fbuserid(&_impl_._has_bits_);
          _impl_.fbuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fbuserName = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_fbusername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 albumStyle = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_albumstyle(&_impl_._has_bits_);
          _impl_.albumstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 albumFlag = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_albumflag(&_impl_._has_bits_);
          _impl_.albumflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string albumBgimgId = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_albumbgimgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 txnewsCategory = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_txnewscategory(&_impl_._has_bits_);
          _impl_.txnewscategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fbtoken = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fbtoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 bitFlag = 1;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bitflag(), target);
  }

  // required .SKBuiltinString_t userName = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::username(this),
        _Internal::username(this).GetCachedSize(), target, stream);
  }

  // required .SKBuiltinString_t nickName = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nickname(this),
        _Internal::nickname(this).GetCachedSize(), target, stream);
  }

  // required uint32 bindUin = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_binduin(), target);
  }

  // required .SKBuiltinString_t bindEmail = 5;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bindemail(this),
        _Internal::bindemail(this).GetCachedSize(), target, stream);
  }

  // required .SKBuiltinString_t bindMobile = 6;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::bindmobile(this),
        _Internal::bindmobile(this).GetCachedSize(), target, stream);
  }

  // required uint32 status = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_status(), target);
  }

  // required uint32 imgLen = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_imglen(), target);
  }

  // optional bytes imgBuf = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_imgbuf(), target);
  }

  // optional int32 sex = 10;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_sex(), target);
  }

  // optional string province = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_province(), target);
  }

  // optional string city = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_city(), target);
  }

  // optional string signature = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_signature(), target);
  }

  // optional uint32 personalCard = 14;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_personalcard(), target);
  }

  // optional .DisturbSetting disturbSetting = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::disturbsetting(this),
        _Internal::disturbsetting(this).GetCachedSize(), target, stream);
  }

  // optional uint32 pluginFlag = 16;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_pluginflag(), target);
  }

  // optional uint32 verifyFlag = 17;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_verifyflag(), target);
  }

  // optional string verifyInfo = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_verifyinfo(), target);
  }

  // optional int32 point = 19;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_point(), target);
  }

  // optional int32 experience = 20;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_experience(), target);
  }

  // optional int32 level = 21;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_level(), target);
  }

  // optional int32 levelLowExp = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_levellowexp(), target);
  }

  // optional int32 levelHighExp = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_levelhighexp(), target);
  }

  // optional string weibo = 24;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_weibo(), target);
  }

  // optional uint32 pluginSwitch = 25;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_pluginswitch(), target);
  }

  // optional .GmailList gmailList = 26;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::gmaillist(this),
        _Internal::gmaillist(this).GetCachedSize(), target, stream);
  }

  // optional string alias = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_alias(), target);
  }

  // optional string weiboNickname = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_weibonickname(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 weiboFlag = 29;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_weiboflag(), target);
  }

  // optional uint32 faceBookFlag = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_facebookflag(), target);
  }

  // optional uint64 fbuserId = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_fbuserid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string fbuserName = 32;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_fbusername(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 albumStyle = 33;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_albumstyle(), target);
  }

  // optional int32 albumFlag = 34;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_albumflag(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string albumBgimgId = 35;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_albumbgimgid(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 txnewsCategory = 36;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_txnewscategory(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string fbtoken = 37;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_fbtoken(), target);
  }

  // optional string country = 38;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModUserInfo)
  return target;
}

size_t ModUserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ModUserInfo)
  size_t total_size = 0;

  if (_internal_has_username()) {
    // required .SKBuiltinString_t userName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.username_);
  }

  if (_internal_has_nickname()) {
    // required .SKBuiltinString_t nickName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nickname_);
  }

  if (_internal_has_bindemail()) {
    // required .SKBuiltinString_t bindEmail = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindemail_);
  }

  if (_internal_has_bindmobile()) {
    // required .SKBuiltinString_t bindMobile = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindmobile_);
  }

  if (_internal_has_bitflag()) {
    // required uint32 bitFlag = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bitflag());
  }

  if (_internal_has_binduin()) {
    // required uint32 bindUin = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_binduin());
  }

  if (_internal_has_status()) {
    // required uint32 status = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  if (_internal_has_imglen()) {
    // required uint32 imgLen = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_imglen());
  }

  return total_size;
}
size_t ModUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModUserInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x003cf000) ^ 0x003cf000) == 0) {  // All required fields are present.
    // required .SKBuiltinString_t userName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.username_);

    // required .SKBuiltinString_t nickName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nickname_);

    // required .SKBuiltinString_t bindEmail = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindemail_);

    // required .SKBuiltinString_t bindMobile = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindmobile_);

    // required uint32 bitFlag = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bitflag());

    // required uint32 bindUin = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_binduin());

    // required uint32 status = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());

    // required uint32 imgLen = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_imglen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes imgBuf = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_imgbuf());
    }

    // optional string province = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_province());
    }

    // optional string city = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // optional string signature = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional string verifyInfo = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verifyinfo());
    }

    // optional string weibo = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weibo());
    }

    // optional string alias = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alias());
    }

    // optional string weiboNickname = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weibonickname());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string fbuserName = 32;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fbusername());
    }

    // optional string albumBgimgId = 35;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_albumbgimgid());
    }

    // optional string fbtoken = 37;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fbtoken());
    }

    // optional string country = 38;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .DisturbSetting disturbSetting = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.disturbsetting_);
    }

    // optional .GmailList gmailList = 26;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gmaillist_);
    }

  }
  if (cached_has_bits & 0x00c00000u) {
    // optional int32 sex = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
    }

    // optional uint32 personalCard = 14;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_personalcard());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 pluginFlag = 16;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pluginflag());
    }

    // optional uint32 verifyFlag = 17;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_verifyflag());
    }

    // optional int32 point = 19;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_point());
    }

    // optional int32 experience = 20;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_experience());
    }

    // optional int32 level = 21;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional int32 levelLowExp = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_levellowexp());
    }

    // optional int32 levelHighExp = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_levelhighexp());
    }

    // optional uint32 pluginSwitch = 25;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pluginswitch());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 weiboFlag = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weiboflag());
    }

    // optional uint32 faceBookFlag = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_facebookflag());
    }

    // optional uint64 fbuserId = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_fbuserid());
    }

    // optional int32 albumStyle = 33;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_albumstyle());
    }

    // optional int32 albumFlag = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_albumflag());
    }

    // optional uint32 txnewsCategory = 36;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_txnewscategory());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModUserInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModUserInfo*>(
      &from));
}

void ModUserInfo::MergeFrom(const ModUserInfo& from) {
  ModUserInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ModUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_imgbuf(from._internal_imgbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_province(from._internal_province());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_verifyinfo(from._internal_verifyinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_weibo(from._internal_weibo());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_alias(from._internal_alias());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_weibonickname(from._internal_weibonickname());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_fbusername(from._internal_fbusername());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_albumbgimgid(from._internal_albumbgimgid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_fbtoken(from._internal_fbtoken());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_username()->::SKBuiltinString_t::MergeFrom(
          from._internal_username());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_nickname()->::SKBuiltinString_t::MergeFrom(
          from._internal_nickname());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_bindemail()->::SKBuiltinString_t::MergeFrom(
          from._internal_bindemail());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_bindmobile()->::SKBuiltinString_t::MergeFrom(
          from._internal_bindmobile());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_disturbsetting()->::DisturbSetting::MergeFrom(
          from._internal_disturbsetting());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_gmaillist()->::GmailList::MergeFrom(
          from._internal_gmaillist());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.bitflag_ = from._impl_.bitflag_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.binduin_ = from._impl_.binduin_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.imglen_ = from._impl_.imglen_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.sex_ = from._impl_.sex_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.personalcard_ = from._impl_.personalcard_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.pluginflag_ = from._impl_.pluginflag_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.verifyflag_ = from._impl_.verifyflag_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.point_ = from._impl_.point_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.experience_ = from._impl_.experience_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.levellowexp_ = from._impl_.levellowexp_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.levelhighexp_ = from._impl_.levelhighexp_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.pluginswitch_ = from._impl_.pluginswitch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.weiboflag_ = from._impl_.weiboflag_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.facebookflag_ = from._impl_.facebookflag_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fbuserid_ = from._impl_.fbuserid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.albumstyle_ = from._impl_.albumstyle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.albumflag_ = from._impl_.albumflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.txnewscategory_ = from._impl_.txnewscategory_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModUserInfo::CopyFrom(const ModUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModUserInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_disturbsetting()) {
    if (!_impl_.disturbsetting_->IsInitialized()) return false;
  }
  if (_internal_has_gmaillist()) {
    if (!_impl_.gmaillist_->IsInitialized()) return false;
  }
  return true;
}

void ModUserInfo::InternalSwap(ModUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imgbuf_, lhs_arena,
      &other->_impl_.imgbuf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.province_, lhs_arena,
      &other->_impl_.province_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verifyinfo_, lhs_arena,
      &other->_impl_.verifyinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weibo_, lhs_arena,
      &other->_impl_.weibo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weibonickname_, lhs_arena,
      &other->_impl_.weibonickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fbusername_, lhs_arena,
      &other->_impl_.fbusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.albumbgimgid_, lhs_arena,
      &other->_impl_.albumbgimgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fbtoken_, lhs_arena,
      &other->_impl_.fbtoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModUserInfo, _impl_.txnewscategory_)
      + sizeof(ModUserInfo::_impl_.txnewscategory_)
      - PROTOBUF_FIELD_OFFSET(ModUserInfo, _impl_.username_)>(
          reinterpret_cast<char*>(&_impl_.username_),
          reinterpret_cast<char*>(&other->_impl_.username_));
}

std::string ModUserInfo::GetTypeName() const {
  return "ModUserInfo";
}


// ===================================================================

class UserInfoExt::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfoExt>()._impl_._has_bits_);
  static const ::SnsUserInfo& snsuserinfo(const UserInfoExt* msg);
  static void set_has_snsuserinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_mybrandlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msgpushsound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_voippushsound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bigchatroomsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_bigchatroomquota(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_bigchatroominvite(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_safemobile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bigheadimgurl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_smallheadimgurl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mainaccttype(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::SKBuiltinString_t& extxml(const UserInfoExt* msg);
  static void set_has_extxml(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::SafeDeviceList& safedevicelist(const UserInfoExt* msg);
  static void set_has_safedevicelist(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_safedevice(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_grayscaleflag(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_googlecontactname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_idcardnum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_realname(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_regcountry(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bbppid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bbpin(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bbmnickname(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::LinkedinContactItem& linkedincontactitem(const UserInfoExt* msg);
  static void set_has_linkedincontactitem(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_kfinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::PatternLockInfo& patternlockinfo(const UserInfoExt* msg);
  static void set_has_patternlockinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_securitydeviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_paywallettype(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_weidianinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_walletregion(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_extstatus(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_f2fpushsound(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_userstatus(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_paysetting(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_bindxmail(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_patsuffix(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_patsuffixversion(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_teenagermodefindersetting(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_teenagermodebizacctsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_teenagermodeminiprogramsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::XAgreementInfo& xagreementinfo(const UserInfoExt* msg);
  static void set_has_xagreementinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_textstatusid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_textstatusextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_findersetting(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::RingBackSetting& ringbacksetting(const UserInfoExt* msg);
  static void set_has_ringbacksetting(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_smcryptoflag(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::NewRingBackSetting& globalringbacksetting(const UserInfoExt* msg);
  static void set_has_globalringbacksetting(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_newcomemsgdefaultvoicenumber(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_discoverypagectrlflag(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00400000) ^ 0x00400000) != 0;
  }
};

const ::SnsUserInfo&
UserInfoExt::_Internal::snsuserinfo(const UserInfoExt* msg) {
  return *msg->_impl_.snsuserinfo_;
}
const ::SKBuiltinString_t&
UserInfoExt::_Internal::extxml(const UserInfoExt* msg) {
  return *msg->_impl_.extxml_;
}
const ::SafeDeviceList&
UserInfoExt::_Internal::safedevicelist(const UserInfoExt* msg) {
  return *msg->_impl_.safedevicelist_;
}
const ::LinkedinContactItem&
UserInfoExt::_Internal::linkedincontactitem(const UserInfoExt* msg) {
  return *msg->_impl_.linkedincontactitem_;
}
const ::PatternLockInfo&
UserInfoExt::_Internal::patternlockinfo(const UserInfoExt* msg) {
  return *msg->_impl_.patternlockinfo_;
}
const ::XAgreementInfo&
UserInfoExt::_Internal::xagreementinfo(const UserInfoExt* msg) {
  return *msg->_impl_.xagreementinfo_;
}
const ::RingBackSetting&
UserInfoExt::_Internal::ringbacksetting(const UserInfoExt* msg) {
  return *msg->_impl_.ringbacksetting_;
}
const ::NewRingBackSetting&
UserInfoExt::_Internal::globalringbacksetting(const UserInfoExt* msg) {
  return *msg->_impl_.globalringbacksetting_;
}
void UserInfoExt::clear_extxml() {
  if (_impl_.extxml_ != nullptr) _impl_.extxml_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
UserInfoExt::UserInfoExt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UserInfoExt)
}
UserInfoExt::UserInfoExt(const UserInfoExt& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UserInfoExt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mybrandlist_){}
    , decltype(_impl_.msgpushsound_){}
    , decltype(_impl_.voippushsound_){}
    , decltype(_impl_.safemobile_){}
    , decltype(_impl_.bigheadimgurl_){}
    , decltype(_impl_.smallheadimgurl_){}
    , decltype(_impl_.googlecontactname_){}
    , decltype(_impl_.idcardnum_){}
    , decltype(_impl_.realname_){}
    , decltype(_impl_.regcountry_){}
    , decltype(_impl_.bbppid_){}
    , decltype(_impl_.bbpin_){}
    , decltype(_impl_.bbmnickname_){}
    , decltype(_impl_.kfinfo_){}
    , decltype(_impl_.securitydeviceid_){}
    , decltype(_impl_.weidianinfo_){}
    , decltype(_impl_.f2fpushsound_){}
    , decltype(_impl_.bindxmail_){}
    , decltype(_impl_.patsuffix_){}
    , decltype(_impl_.textstatusid_){}
    , decltype(_impl_.textstatusextinfo_){}
    , decltype(_impl_.salt_){}
    , decltype(_impl_.snsuserinfo_){nullptr}
    , decltype(_impl_.extxml_){nullptr}
    , decltype(_impl_.safedevicelist_){nullptr}
    , decltype(_impl_.linkedincontactitem_){nullptr}
    , decltype(_impl_.patternlockinfo_){nullptr}
    , decltype(_impl_.xagreementinfo_){nullptr}
    , decltype(_impl_.ringbacksetting_){nullptr}
    , decltype(_impl_.globalringbacksetting_){nullptr}
    , decltype(_impl_.bigchatroomsize_){}
    , decltype(_impl_.bigchatroomquota_){}
    , decltype(_impl_.bigchatroominvite_){}
    , decltype(_impl_.mainaccttype_){}
    , decltype(_impl_.safedevice_){}
    , decltype(_impl_.grayscaleflag_){}
    , decltype(_impl_.paywallettype_){}
    , decltype(_impl_.walletregion_){}
    , decltype(_impl_.extstatus_){}
    , decltype(_impl_.paysetting_){}
    , decltype(_impl_.userstatus_){}
    , decltype(_impl_.patsuffixversion_){}
    , decltype(_impl_.teenagermodefindersetting_){}
    , decltype(_impl_.teenagermodebizacctsetting_){}
    , decltype(_impl_.teenagermodeminiprogramsetting_){}
    , decltype(_impl_.smcryptoflag_){}
    , decltype(_impl_.findersetting_){}
    , decltype(_impl_.discoverypagectrlflag_){}
    , decltype(_impl_.newcomemsgdefaultvoicenumber_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.mybrandlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mybrandlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mybrandlist()) {
    _this->_impl_.mybrandlist_.Set(from._internal_mybrandlist(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msgpushsound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgpushsound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msgpushsound()) {
    _this->_impl_.msgpushsound_.Set(from._internal_msgpushsound(), 
      _this->GetArenaForAllocation());
  }
  _impl_.voippushsound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voippushsound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_voippushsound()) {
    _this->_impl_.voippushsound_.Set(from._internal_voippushsound(), 
      _this->GetArenaForAllocation());
  }
  _impl_.safemobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.safemobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_safemobile()) {
    _this->_impl_.safemobile_.Set(from._internal_safemobile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bigheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bigheadimgurl()) {
    _this->_impl_.bigheadimgurl_.Set(from._internal_bigheadimgurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.smallheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smallheadimgurl()) {
    _this->_impl_.smallheadimgurl_.Set(from._internal_smallheadimgurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.googlecontactname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.googlecontactname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_googlecontactname()) {
    _this->_impl_.googlecontactname_.Set(from._internal_googlecontactname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idcardnum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idcardnum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idcardnum()) {
    _this->_impl_.idcardnum_.Set(from._internal_idcardnum(), 
      _this->GetArenaForAllocation());
  }
  _impl_.realname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_realname()) {
    _this->_impl_.realname_.Set(from._internal_realname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.regcountry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regcountry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_regcountry()) {
    _this->_impl_.regcountry_.Set(from._internal_regcountry(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bbppid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bbppid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bbppid()) {
    _this->_impl_.bbppid_.Set(from._internal_bbppid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bbpin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bbpin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bbpin()) {
    _this->_impl_.bbpin_.Set(from._internal_bbpin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bbmnickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bbmnickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bbmnickname()) {
    _this->_impl_.bbmnickname_.Set(from._internal_bbmnickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kfinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kfinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kfinfo()) {
    _this->_impl_.kfinfo_.Set(from._internal_kfinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.securitydeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitydeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_securitydeviceid()) {
    _this->_impl_.securitydeviceid_.Set(from._internal_securitydeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.weidianinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weidianinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_weidianinfo()) {
    _this->_impl_.weidianinfo_.Set(from._internal_weidianinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f2fpushsound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f2fpushsound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_f2fpushsound()) {
    _this->_impl_.f2fpushsound_.Set(from._internal_f2fpushsound(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bindxmail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindxmail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bindxmail()) {
    _this->_impl_.bindxmail_.Set(from._internal_bindxmail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.patsuffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.patsuffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_patsuffix()) {
    _this->_impl_.patsuffix_.Set(from._internal_patsuffix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.textstatusid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textstatusid()) {
    _this->_impl_.textstatusid_.Set(from._internal_textstatusid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.textstatusextinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusextinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textstatusextinfo()) {
    _this->_impl_.textstatusextinfo_.Set(from._internal_textstatusextinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_salt()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_snsuserinfo()) {
    _this->_impl_.snsuserinfo_ = new ::SnsUserInfo(*from._impl_.snsuserinfo_);
  }
  if (from._internal_has_extxml()) {
    _this->_impl_.extxml_ = new ::SKBuiltinString_t(*from._impl_.extxml_);
  }
  if (from._internal_has_safedevicelist()) {
    _this->_impl_.safedevicelist_ = new ::SafeDeviceList(*from._impl_.safedevicelist_);
  }
  if (from._internal_has_linkedincontactitem()) {
    _this->_impl_.linkedincontactitem_ = new ::LinkedinContactItem(*from._impl_.linkedincontactitem_);
  }
  if (from._internal_has_patternlockinfo()) {
    _this->_impl_.patternlockinfo_ = new ::PatternLockInfo(*from._impl_.patternlockinfo_);
  }
  if (from._internal_has_xagreementinfo()) {
    _this->_impl_.xagreementinfo_ = new ::XAgreementInfo(*from._impl_.xagreementinfo_);
  }
  if (from._internal_has_ringbacksetting()) {
    _this->_impl_.ringbacksetting_ = new ::RingBackSetting(*from._impl_.ringbacksetting_);
  }
  if (from._internal_has_globalringbacksetting()) {
    _this->_impl_.globalringbacksetting_ = new ::NewRingBackSetting(*from._impl_.globalringbacksetting_);
  }
  ::memcpy(&_impl_.bigchatroomsize_, &from._impl_.bigchatroomsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newcomemsgdefaultvoicenumber_) -
    reinterpret_cast<char*>(&_impl_.bigchatroomsize_)) + sizeof(_impl_.newcomemsgdefaultvoicenumber_));
  // @@protoc_insertion_point(copy_constructor:UserInfoExt)
}

inline void UserInfoExt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mybrandlist_){}
    , decltype(_impl_.msgpushsound_){}
    , decltype(_impl_.voippushsound_){}
    , decltype(_impl_.safemobile_){}
    , decltype(_impl_.bigheadimgurl_){}
    , decltype(_impl_.smallheadimgurl_){}
    , decltype(_impl_.googlecontactname_){}
    , decltype(_impl_.idcardnum_){}
    , decltype(_impl_.realname_){}
    , decltype(_impl_.regcountry_){}
    , decltype(_impl_.bbppid_){}
    , decltype(_impl_.bbpin_){}
    , decltype(_impl_.bbmnickname_){}
    , decltype(_impl_.kfinfo_){}
    , decltype(_impl_.securitydeviceid_){}
    , decltype(_impl_.weidianinfo_){}
    , decltype(_impl_.f2fpushsound_){}
    , decltype(_impl_.bindxmail_){}
    , decltype(_impl_.patsuffix_){}
    , decltype(_impl_.textstatusid_){}
    , decltype(_impl_.textstatusextinfo_){}
    , decltype(_impl_.salt_){}
    , decltype(_impl_.snsuserinfo_){nullptr}
    , decltype(_impl_.extxml_){nullptr}
    , decltype(_impl_.safedevicelist_){nullptr}
    , decltype(_impl_.linkedincontactitem_){nullptr}
    , decltype(_impl_.patternlockinfo_){nullptr}
    , decltype(_impl_.xagreementinfo_){nullptr}
    , decltype(_impl_.ringbacksetting_){nullptr}
    , decltype(_impl_.globalringbacksetting_){nullptr}
    , decltype(_impl_.bigchatroomsize_){0u}
    , decltype(_impl_.bigchatroomquota_){0u}
    , decltype(_impl_.bigchatroominvite_){0u}
    , decltype(_impl_.mainaccttype_){0u}
    , decltype(_impl_.safedevice_){0u}
    , decltype(_impl_.grayscaleflag_){0u}
    , decltype(_impl_.paywallettype_){0u}
    , decltype(_impl_.walletregion_){0u}
    , decltype(_impl_.extstatus_){uint64_t{0u}}
    , decltype(_impl_.paysetting_){uint64_t{0u}}
    , decltype(_impl_.userstatus_){0u}
    , decltype(_impl_.patsuffixversion_){0u}
    , decltype(_impl_.teenagermodefindersetting_){0u}
    , decltype(_impl_.teenagermodebizacctsetting_){0u}
    , decltype(_impl_.teenagermodeminiprogramsetting_){0u}
    , decltype(_impl_.smcryptoflag_){0u}
    , decltype(_impl_.findersetting_){uint64_t{0u}}
    , decltype(_impl_.discoverypagectrlflag_){uint64_t{0u}}
    , decltype(_impl_.newcomemsgdefaultvoicenumber_){0u}
  };
  _impl_.mybrandlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mybrandlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msgpushsound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgpushsound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voippushsound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voippushsound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.safemobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.safemobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bigheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smallheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.googlecontactname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.googlecontactname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idcardnum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idcardnum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.regcountry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regcountry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bbppid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bbppid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bbpin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bbpin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bbmnickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bbmnickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kfinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kfinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.securitydeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.securitydeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weidianinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weidianinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f2fpushsound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f2fpushsound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bindxmail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindxmail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.patsuffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.patsuffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textstatusid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textstatusextinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textstatusextinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfoExt::~UserInfoExt() {
  // @@protoc_insertion_point(destructor:UserInfoExt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoExt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mybrandlist_.Destroy();
  _impl_.msgpushsound_.Destroy();
  _impl_.voippushsound_.Destroy();
  _impl_.safemobile_.Destroy();
  _impl_.bigheadimgurl_.Destroy();
  _impl_.smallheadimgurl_.Destroy();
  _impl_.googlecontactname_.Destroy();
  _impl_.idcardnum_.Destroy();
  _impl_.realname_.Destroy();
  _impl_.regcountry_.Destroy();
  _impl_.bbppid_.Destroy();
  _impl_.bbpin_.Destroy();
  _impl_.bbmnickname_.Destroy();
  _impl_.kfinfo_.Destroy();
  _impl_.securitydeviceid_.Destroy();
  _impl_.weidianinfo_.Destroy();
  _impl_.f2fpushsound_.Destroy();
  _impl_.bindxmail_.Destroy();
  _impl_.patsuffix_.Destroy();
  _impl_.textstatusid_.Destroy();
  _impl_.textstatusextinfo_.Destroy();
  _impl_.salt_.Destroy();
  if (this != internal_default_instance()) delete _impl_.snsuserinfo_;
  if (this != internal_default_instance()) delete _impl_.extxml_;
  if (this != internal_default_instance()) delete _impl_.safedevicelist_;
  if (this != internal_default_instance()) delete _impl_.linkedincontactitem_;
  if (this != internal_default_instance()) delete _impl_.patternlockinfo_;
  if (this != internal_default_instance()) delete _impl_.xagreementinfo_;
  if (this != internal_default_instance()) delete _impl_.ringbacksetting_;
  if (this != internal_default_instance()) delete _impl_.globalringbacksetting_;
}

void UserInfoExt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoExt::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfoExt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mybrandlist_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.msgpushsound_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.voippushsound_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.safemobile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bigheadimgurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.smallheadimgurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.googlecontactname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.idcardnum_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.realname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.regcountry_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.bbppid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.bbpin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.bbmnickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.kfinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.securitydeviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.weidianinfo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.f2fpushsound_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.bindxmail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.patsuffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.textstatusid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.textstatusextinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.salt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.snsuserinfo_ != nullptr);
      _impl_.snsuserinfo_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.extxml_ != nullptr);
      _impl_.extxml_->Clear();
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.safedevicelist_ != nullptr);
      _impl_.safedevicelist_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.linkedincontactitem_ != nullptr);
      _impl_.linkedincontactitem_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.patternlockinfo_ != nullptr);
      _impl_.patternlockinfo_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.xagreementinfo_ != nullptr);
      _impl_.xagreementinfo_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.ringbacksetting_ != nullptr);
      _impl_.ringbacksetting_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.globalringbacksetting_ != nullptr);
      _impl_.globalringbacksetting_->Clear();
    }
  }
  if (cached_has_bits & 0xc0000000u) {
    ::memset(&_impl_.bigchatroomsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bigchatroomquota_) -
        reinterpret_cast<char*>(&_impl_.bigchatroomsize_)) + sizeof(_impl_.bigchatroomquota_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bigchatroominvite_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.paysetting_) -
        reinterpret_cast<char*>(&_impl_.bigchatroominvite_)) + sizeof(_impl_.paysetting_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.userstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.discoverypagectrlflag_) -
        reinterpret_cast<char*>(&_impl_.userstatus_)) + sizeof(_impl_.discoverypagectrlflag_));
  }
  _impl_.newcomemsgdefaultvoicenumber_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserInfoExt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .SnsUserInfo snsUserInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snsuserinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string myBrandList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mybrandlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msgPushSound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msgpushsound();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string voipPushSound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_voippushsound();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bigChatRoomSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bigchatroomsize(&_impl_._has_bits_);
          _impl_.bigchatroomsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bigChatRoomQuota = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bigchatroomquota(&_impl_._has_bits_);
          _impl_.bigchatroomquota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bigChatRoomInvite = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bigchatroominvite(&_impl_._has_bits_);
          _impl_.bigchatroominvite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string safeMobile = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_safemobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bigHeadImgUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_bigheadimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string smallHeadImgUrl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_smallheadimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mainAcctType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_mainaccttype(&_impl_._has_bits_);
          _impl_.mainaccttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SKBuiltinString_t extXml = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_extxml(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SafeDeviceList safeDeviceList = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_safedevicelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 safeDevice = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_safedevice(&_impl_._has_bits_);
          _impl_.safedevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 grayscaleFlag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_grayscaleflag(&_impl_._has_bits_);
          _impl_.grayscaleflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string googleContactName = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_googlecontactname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string idcardNum = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_idcardnum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string realName = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_realname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string regCountry = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_regcountry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bbppid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_bbppid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bbpin = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_bbpin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bbmnickName = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_bbmnickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LinkedinContactItem linkedinContactItem = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkedincontactitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string kfinfo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_kfinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PatternLockInfo patternLockInfo = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_patternlockinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string securityDeviceId = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_securitydeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 payWalletType = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_paywallettype(&_impl_._has_bits_);
          _impl_.paywallettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string weiDianInfo = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_weidianinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 walletRegion = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_walletregion(&_impl_._has_bits_);
          _impl_.walletregion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 extStatus = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_extstatus(&_impl_._has_bits_);
          _impl_.extstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string f2FpushSound = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_f2fpushsound();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 userStatus = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_userstatus(&_impl_._has_bits_);
          _impl_.userstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 paySetting = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_paysetting(&_impl_._has_bits_);
          _impl_.paysetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bindXmail = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bindxmail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string patSuffix = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_patsuffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 patSuffixVersion = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_patsuffixversion(&_impl_._has_bits_);
          _impl_.patsuffixversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teenagerModeFinderSetting = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_teenagermodefindersetting(&_impl_._has_bits_);
          _impl_.teenagermodefindersetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teenagerModeBizAcctSetting = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_teenagermodebizacctsetting(&_impl_._has_bits_);
          _impl_.teenagermodebizacctsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teenagerModeMiniProgramSetting = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_teenagermodeminiprogramsetting(&_impl_._has_bits_);
          _impl_.teenagermodeminiprogramsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XAgreementInfo xagreementInfo = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_xagreementinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string textStatusId = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_textstatusid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string textStatusExtInfo = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_textstatusextinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string salt = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 finderSetting = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_findersetting(&_impl_._has_bits_);
          _impl_.findersetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RingBackSetting ringBackSetting = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ringbacksetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 smcryptoFlag = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_smcryptoflag(&_impl_._has_bits_);
          _impl_.smcryptoflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .NewRingBackSetting globalRingBackSetting = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalringbacksetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 newcomeMsgDefaultVoiceNumber = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_newcomemsgdefaultvoicenumber(&_impl_._has_bits_);
          _impl_.newcomemsgdefaultvoicenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 discoveryPageCtrlFlag = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_discoverypagectrlflag(&_impl_._has_bits_);
          _impl_.discoverypagectrlflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoExt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoExt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .SnsUserInfo snsUserInfo = 1;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::snsuserinfo(this),
        _Internal::snsuserinfo(this).GetCachedSize(), target, stream);
  }

  // optional string myBrandList = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mybrandlist(), target);
  }

  // optional string msgPushSound = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msgpushsound(), target);
  }

  // optional string voipPushSound = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_voippushsound(), target);
  }

  // optional uint32 bigChatRoomSize = 5;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bigchatroomsize(), target);
  }

  // optional uint32 bigChatRoomQuota = 6;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bigchatroomquota(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 bigChatRoomInvite = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bigchatroominvite(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string safeMobile = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_safemobile(), target);
  }

  // optional string bigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_bigheadimgurl(), target);
  }

  // optional string smallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_smallheadimgurl(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 mainAcctType = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_mainaccttype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SKBuiltinString_t extXml = 12;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::extxml(this),
        _Internal::extxml(this).GetCachedSize(), target, stream);
  }

  // optional .SafeDeviceList safeDeviceList = 13;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::safedevicelist(this),
        _Internal::safedevicelist(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 safeDevice = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_safedevice(), target);
  }

  // optional uint32 grayscaleFlag = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_grayscaleflag(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string googleContactName = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_googlecontactname(), target);
  }

  // optional string idcardNum = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_idcardnum(), target);
  }

  // optional string realName = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_realname(), target);
  }

  // optional string regCountry = 19;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_regcountry(), target);
  }

  // optional string bbppid = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_bbppid(), target);
  }

  // optional string bbpin = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_bbpin(), target);
  }

  // optional string bbmnickName = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_bbmnickname(), target);
  }

  // optional .LinkedinContactItem linkedinContactItem = 23;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::linkedincontactitem(this),
        _Internal::linkedincontactitem(this).GetCachedSize(), target, stream);
  }

  // optional string kfinfo = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_kfinfo(), target);
  }

  // optional .PatternLockInfo patternLockInfo = 25;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::patternlockinfo(this),
        _Internal::patternlockinfo(this).GetCachedSize(), target, stream);
  }

  // optional string securityDeviceId = 26;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_securitydeviceid(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 payWalletType = 27;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_paywallettype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string weiDianInfo = 28;
  if (cached_has_bits & 0x00008000u) {
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_weidianinfo(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 walletRegion = 29;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_walletregion(), target);
  }

  // optional uint64 extStatus = 30;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_extstatus(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string f2FpushSound = 31;
  if (cached_has_bits & 0x00010000u) {
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_f2fpushsound(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 userStatus = 32;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_userstatus(), target);
  }

  // optional uint64 paySetting = 34;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_paysetting(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string bindXmail = 37;
  if (cached_has_bits & 0x00020000u) {
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_bindxmail(), target);
  }

  // optional string patSuffix = 38;
  if (cached_has_bits & 0x00040000u) {
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_patsuffix(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 patSuffixVersion = 39;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_patsuffixversion(), target);
  }

  // optional uint32 teenagerModeFinderSetting = 44;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_teenagermodefindersetting(), target);
  }

  // optional uint32 teenagerModeBizAcctSetting = 45;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_teenagermodebizacctsetting(), target);
  }

  // optional uint32 teenagerModeMiniProgramSetting = 46;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(46, this->_internal_teenagermodeminiprogramsetting(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .XAgreementInfo xagreementInfo = 47;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::xagreementinfo(this),
        _Internal::xagreementinfo(this).GetCachedSize(), target, stream);
  }

  // optional string textStatusId = 49;
  if (cached_has_bits & 0x00080000u) {
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_textstatusid(), target);
  }

  // optional string textStatusExtInfo = 51;
  if (cached_has_bits & 0x00100000u) {
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_textstatusextinfo(), target);
  }

  // optional string salt = 52;
  if (cached_has_bits & 0x00200000u) {
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_salt(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 finderSetting = 53;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(53, this->_internal_findersetting(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .RingBackSetting ringBackSetting = 55;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::ringbacksetting(this),
        _Internal::ringbacksetting(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 smcryptoFlag = 56;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(56, this->_internal_smcryptoflag(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .NewRingBackSetting globalRingBackSetting = 57;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::globalringbacksetting(this),
        _Internal::globalringbacksetting(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 newcomeMsgDefaultVoiceNumber = 58;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_newcomemsgdefaultvoicenumber(), target);
  }

  // optional uint64 discoveryPageCtrlFlag = 59;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(59, this->_internal_discoverypagectrlflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoExt)
  return target;
}

size_t UserInfoExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfoExt)
  size_t total_size = 0;

  // required .SnsUserInfo snsUserInfo = 1;
  if (_internal_has_snsuserinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.snsuserinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string myBrandList = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mybrandlist());
    }

    // optional string msgPushSound = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msgpushsound());
    }

    // optional string voipPushSound = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_voippushsound());
    }

    // optional string safeMobile = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_safemobile());
    }

    // optional string bigHeadImgUrl = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bigheadimgurl());
    }

    // optional string smallHeadImgUrl = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smallheadimgurl());
    }

    // optional string googleContactName = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_googlecontactname());
    }

    // optional string idcardNum = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idcardnum());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string realName = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_realname());
    }

    // optional string regCountry = 19;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regcountry());
    }

    // optional string bbppid = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bbppid());
    }

    // optional string bbpin = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bbpin());
    }

    // optional string bbmnickName = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bbmnickname());
    }

    // optional string kfinfo = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kfinfo());
    }

    // optional string securityDeviceId = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_securitydeviceid());
    }

    // optional string weiDianInfo = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weidianinfo());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional string f2FpushSound = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2fpushsound());
    }

    // optional string bindXmail = 37;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bindxmail());
    }

    // optional string patSuffix = 38;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_patsuffix());
    }

    // optional string textStatusId = 49;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textstatusid());
    }

    // optional string textStatusExtInfo = 51;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textstatusextinfo());
    }

    // optional string salt = 52;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_salt());
    }

  }
  // optional .SKBuiltinString_t extXml = 12;
  if (cached_has_bits & 0x00800000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extxml_);
  }

  if (cached_has_bits & 0xff000000u) {
    // optional .SafeDeviceList safeDeviceList = 13;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.safedevicelist_);
    }

    // optional .LinkedinContactItem linkedinContactItem = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linkedincontactitem_);
    }

    // optional .PatternLockInfo patternLockInfo = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.patternlockinfo_);
    }

    // optional .XAgreementInfo xagreementInfo = 47;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.xagreementinfo_);
    }

    // optional .RingBackSetting ringBackSetting = 55;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ringbacksetting_);
    }

    // optional .NewRingBackSetting globalRingBackSetting = 57;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.globalringbacksetting_);
    }

    // optional uint32 bigChatRoomSize = 5;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bigchatroomsize());
    }

    // optional uint32 bigChatRoomQuota = 6;
    if (cached_has_bits & 0x80000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bigchatroomquota());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 bigChatRoomInvite = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bigchatroominvite());
    }

    // optional uint32 mainAcctType = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mainaccttype());
    }

    // optional uint32 safeDevice = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_safedevice());
    }

    // optional uint32 grayscaleFlag = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grayscaleflag());
    }

    // optional uint32 payWalletType = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_paywallettype());
    }

    // optional uint32 walletRegion = 29;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_walletregion());
    }

    // optional uint64 extStatus = 30;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_extstatus());
    }

    // optional uint64 paySetting = 34;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_paysetting());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 userStatus = 32;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_userstatus());
    }

    // optional uint32 patSuffixVersion = 39;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_patsuffixversion());
    }

    // optional uint32 teenagerModeFinderSetting = 44;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_teenagermodefindersetting());
    }

    // optional uint32 teenagerModeBizAcctSetting = 45;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_teenagermodebizacctsetting());
    }

    // optional uint32 teenagerModeMiniProgramSetting = 46;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_teenagermodeminiprogramsetting());
    }

    // optional uint32 smcryptoFlag = 56;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_smcryptoflag());
    }

    // optional uint64 finderSetting = 53;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_findersetting());
    }

    // optional uint64 discoveryPageCtrlFlag = 59;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_discoverypagectrlflag());
    }

  }
  // optional uint32 newcomeMsgDefaultVoiceNumber = 58;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_newcomemsgdefaultvoicenumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoExt::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserInfoExt*>(
      &from));
}

void UserInfoExt::MergeFrom(const UserInfoExt& from) {
  UserInfoExt* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:UserInfoExt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mybrandlist(from._internal_mybrandlist());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_msgpushsound(from._internal_msgpushsound());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_voippushsound(from._internal_voippushsound());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_safemobile(from._internal_safemobile());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_bigheadimgurl(from._internal_bigheadimgurl());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_smallheadimgurl(from._internal_smallheadimgurl());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_googlecontactname(from._internal_googlecontactname());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_idcardnum(from._internal_idcardnum());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_realname(from._internal_realname());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_regcountry(from._internal_regcountry());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_bbppid(from._internal_bbppid());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_bbpin(from._internal_bbpin());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_bbmnickname(from._internal_bbmnickname());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_kfinfo(from._internal_kfinfo());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_securitydeviceid(from._internal_securitydeviceid());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_set_weidianinfo(from._internal_weidianinfo());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_set_f2fpushsound(from._internal_f2fpushsound());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_set_bindxmail(from._internal_bindxmail());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_set_patsuffix(from._internal_patsuffix());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_set_textstatusid(from._internal_textstatusid());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_set_textstatusextinfo(from._internal_textstatusextinfo());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_set_salt(from._internal_salt());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_snsuserinfo()->::SnsUserInfo::MergeFrom(
          from._internal_snsuserinfo());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_extxml()->::SKBuiltinString_t::MergeFrom(
          from._internal_extxml());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_safedevicelist()->::SafeDeviceList::MergeFrom(
          from._internal_safedevicelist());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_linkedincontactitem()->::LinkedinContactItem::MergeFrom(
          from._internal_linkedincontactitem());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_patternlockinfo()->::PatternLockInfo::MergeFrom(
          from._internal_patternlockinfo());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_xagreementinfo()->::XAgreementInfo::MergeFrom(
          from._internal_xagreementinfo());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_ringbacksetting()->::RingBackSetting::MergeFrom(
          from._internal_ringbacksetting());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_globalringbacksetting()->::NewRingBackSetting::MergeFrom(
          from._internal_globalringbacksetting());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.bigchatroomsize_ = from._impl_.bigchatroomsize_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.bigchatroomquota_ = from._impl_.bigchatroomquota_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bigchatroominvite_ = from._impl_.bigchatroominvite_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mainaccttype_ = from._impl_.mainaccttype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.safedevice_ = from._impl_.safedevice_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.grayscaleflag_ = from._impl_.grayscaleflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.paywallettype_ = from._impl_.paywallettype_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.walletregion_ = from._impl_.walletregion_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.extstatus_ = from._impl_.extstatus_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.paysetting_ = from._impl_.paysetting_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.userstatus_ = from._impl_.userstatus_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.patsuffixversion_ = from._impl_.patsuffixversion_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.teenagermodefindersetting_ = from._impl_.teenagermodefindersetting_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.teenagermodebizacctsetting_ = from._impl_.teenagermodebizacctsetting_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.teenagermodeminiprogramsetting_ = from._impl_.teenagermodeminiprogramsetting_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.smcryptoflag_ = from._impl_.smcryptoflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.findersetting_ = from._impl_.findersetting_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.discoverypagectrlflag_ = from._impl_.discoverypagectrlflag_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_newcomemsgdefaultvoicenumber(from._internal_newcomemsgdefaultvoicenumber());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserInfoExt::CopyFrom(const UserInfoExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfoExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoExt::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_snsuserinfo()) {
    if (!_impl_.snsuserinfo_->IsInitialized()) return false;
  }
  if (_internal_has_safedevicelist()) {
    if (!_impl_.safedevicelist_->IsInitialized()) return false;
  }
  if (_internal_has_patternlockinfo()) {
    if (!_impl_.patternlockinfo_->IsInitialized()) return false;
  }
  if (_internal_has_ringbacksetting()) {
    if (!_impl_.ringbacksetting_->IsInitialized()) return false;
  }
  return true;
}

void UserInfoExt::InternalSwap(UserInfoExt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mybrandlist_, lhs_arena,
      &other->_impl_.mybrandlist_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgpushsound_, lhs_arena,
      &other->_impl_.msgpushsound_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voippushsound_, lhs_arena,
      &other->_impl_.voippushsound_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.safemobile_, lhs_arena,
      &other->_impl_.safemobile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bigheadimgurl_, lhs_arena,
      &other->_impl_.bigheadimgurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.smallheadimgurl_, lhs_arena,
      &other->_impl_.smallheadimgurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.googlecontactname_, lhs_arena,
      &other->_impl_.googlecontactname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idcardnum_, lhs_arena,
      &other->_impl_.idcardnum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realname_, lhs_arena,
      &other->_impl_.realname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.regcountry_, lhs_arena,
      &other->_impl_.regcountry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bbppid_, lhs_arena,
      &other->_impl_.bbppid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bbpin_, lhs_arena,
      &other->_impl_.bbpin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bbmnickname_, lhs_arena,
      &other->_impl_.bbmnickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kfinfo_, lhs_arena,
      &other->_impl_.kfinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.securitydeviceid_, lhs_arena,
      &other->_impl_.securitydeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weidianinfo_, lhs_arena,
      &other->_impl_.weidianinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f2fpushsound_, lhs_arena,
      &other->_impl_.f2fpushsound_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bindxmail_, lhs_arena,
      &other->_impl_.bindxmail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.patsuffix_, lhs_arena,
      &other->_impl_.patsuffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textstatusid_, lhs_arena,
      &other->_impl_.textstatusid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textstatusextinfo_, lhs_arena,
      &other->_impl_.textstatusextinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfoExt, _impl_.newcomemsgdefaultvoicenumber_)
      + sizeof(UserInfoExt::_impl_.newcomemsgdefaultvoicenumber_)
      - PROTOBUF_FIELD_OFFSET(UserInfoExt, _impl_.snsuserinfo_)>(
          reinterpret_cast<char*>(&_impl_.snsuserinfo_),
          reinterpret_cast<char*>(&other->_impl_.snsuserinfo_));
}

std::string UserInfoExt::GetTypeName() const {
  return "UserInfoExt";
}


// ===================================================================

class GetProfileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProfileResponse>()._impl_._has_bits_);
  static const ::BaseResponse& baseresponse(const GetProfileResponse* msg);
  static void set_has_baseresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ModUserInfo& userinfo(const GetProfileResponse* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::UserInfoExt& userinfoext(const GetProfileResponse* msg);
  static void set_has_userinfoext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::BaseResponse&
GetProfileResponse::_Internal::baseresponse(const GetProfileResponse* msg) {
  return *msg->_impl_.baseresponse_;
}
const ::ModUserInfo&
GetProfileResponse::_Internal::userinfo(const GetProfileResponse* msg) {
  return *msg->_impl_.userinfo_;
}
const ::UserInfoExt&
GetProfileResponse::_Internal::userinfoext(const GetProfileResponse* msg) {
  return *msg->_impl_.userinfoext_;
}
void GetProfileResponse::clear_baseresponse() {
  if (_impl_.baseresponse_ != nullptr) _impl_.baseresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetProfileResponse::GetProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetProfileResponse)
}
GetProfileResponse::GetProfileResponse(const GetProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetProfileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.userinfo_){nullptr}
    , decltype(_impl_.userinfoext_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_baseresponse()) {
    _this->_impl_.baseresponse_ = new ::BaseResponse(*from._impl_.baseresponse_);
  }
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::ModUserInfo(*from._impl_.userinfo_);
  }
  if (from._internal_has_userinfoext()) {
    _this->_impl_.userinfoext_ = new ::UserInfoExt(*from._impl_.userinfoext_);
  }
  // @@protoc_insertion_point(copy_constructor:GetProfileResponse)
}

inline void GetProfileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.userinfo_){nullptr}
    , decltype(_impl_.userinfoext_){nullptr}
  };
}

GetProfileResponse::~GetProfileResponse() {
  // @@protoc_insertion_point(destructor:GetProfileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.baseresponse_;
  if (this != internal_default_instance()) delete _impl_.userinfo_;
  if (this != internal_default_instance()) delete _impl_.userinfoext_;
}

void GetProfileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetProfileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.baseresponse_ != nullptr);
      _impl_.baseresponse_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
      _impl_.userinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.userinfoext_ != nullptr);
      _impl_.userinfoext_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetProfileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .BaseResponse baseResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ModUserInfo userInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .UserInfoExt userInfoExt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfoext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetProfileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetProfileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .BaseResponse baseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseresponse(this),
        _Internal::baseresponse(this).GetCachedSize(), target, stream);
  }

  // required .ModUserInfo userInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  // required .UserInfoExt userInfoExt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::userinfoext(this),
        _Internal::userinfoext(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetProfileResponse)
  return target;
}

size_t GetProfileResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetProfileResponse)
  size_t total_size = 0;

  if (_internal_has_baseresponse()) {
    // required .BaseResponse baseResponse = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseresponse_);
  }

  if (_internal_has_userinfo()) {
    // required .ModUserInfo userInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }

  if (_internal_has_userinfoext()) {
    // required .UserInfoExt userInfoExt = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfoext_);
  }

  return total_size;
}
size_t GetProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetProfileResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .BaseResponse baseResponse = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseresponse_);

    // required .ModUserInfo userInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);

    // required .UserInfoExt userInfoExt = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfoext_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProfileResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetProfileResponse*>(
      &from));
}

void GetProfileResponse::MergeFrom(const GetProfileResponse& from) {
  GetProfileResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GetProfileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_baseresponse()->::BaseResponse::MergeFrom(
          from._internal_baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_userinfo()->::ModUserInfo::MergeFrom(
          from._internal_userinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_userinfoext()->::UserInfoExt::MergeFrom(
          from._internal_userinfoext());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetProfileResponse::CopyFrom(const GetProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProfileResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_baseresponse()) {
    if (!_impl_.baseresponse_->IsInitialized()) return false;
  }
  if (_internal_has_userinfo()) {
    if (!_impl_.userinfo_->IsInitialized()) return false;
  }
  if (_internal_has_userinfoext()) {
    if (!_impl_.userinfoext_->IsInitialized()) return false;
  }
  return true;
}

void GetProfileResponse::InternalSwap(GetProfileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetProfileResponse, _impl_.userinfoext_)
      + sizeof(GetProfileResponse::_impl_.userinfoext_)
      - PROTOBUF_FIELD_OFFSET(GetProfileResponse, _impl_.baseresponse_)>(
          reinterpret_cast<char*>(&_impl_.baseresponse_),
          reinterpret_cast<char*>(&other->_impl_.baseresponse_));
}

std::string GetProfileResponse::GetTypeName() const {
  return "GetProfileResponse";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GmailList*
Arena::CreateMaybeMessage< ::GmailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GmailList >(arena);
}
template<> PROTOBUF_NOINLINE ::MusicRingBackSetting*
Arena::CreateMaybeMessage< ::MusicRingBackSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MusicRingBackSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::FinderRingBackSetting*
Arena::CreateMaybeMessage< ::FinderRingBackSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FinderRingBackSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::NewRingBackSetting*
Arena::CreateMaybeMessage< ::NewRingBackSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewRingBackSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::RingBackSetting*
Arena::CreateMaybeMessage< ::RingBackSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RingBackSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::XAgreementInfo*
Arena::CreateMaybeMessage< ::XAgreementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XAgreementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkedinContactItem*
Arena::CreateMaybeMessage< ::LinkedinContactItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkedinContactItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PatternLockInfo*
Arena::CreateMaybeMessage< ::PatternLockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PatternLockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SafeDevice*
Arena::CreateMaybeMessage< ::SafeDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SafeDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::SafeDeviceList*
Arena::CreateMaybeMessage< ::SafeDeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SafeDeviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::SnsUserInfo*
Arena::CreateMaybeMessage< ::SnsUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SnsUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GmailInfo*
Arena::CreateMaybeMessage< ::GmailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GmailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DisturbTimeSpan*
Arena::CreateMaybeMessage< ::DisturbTimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DisturbTimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::DisturbSetting*
Arena::CreateMaybeMessage< ::DisturbSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DisturbSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::ModUserInfo*
Arena::CreateMaybeMessage< ::ModUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::UserInfoExt*
Arena::CreateMaybeMessage< ::UserInfoExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserInfoExt >(arena);
}
template<> PROTOBUF_NOINLINE ::GetProfileResponse*
Arena::CreateMaybeMessage< ::GetProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetProfileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
